
CAN_repeater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003974  08003974  00013974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800398c  0800398c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800398c  0800398c  0001398c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003994  08003994  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003994  08003994  00013994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003998  08003998  00013998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800399c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007dc  20000010  080039ac  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  200007ec  080039ac  000207ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c49e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c1c  00000000  00000000  0002c4de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0002e100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  0002ebd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ef1  00000000  00000000  0002f600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccc8  00000000  00000000  000544f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3509  00000000  00000000  000611b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001346c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cac  00000000  00000000  00134718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800395c 	.word	0x0800395c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800395c 	.word	0x0800395c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_CAN1_slientMode_Init>:
static void MX_SPI1_Init(void);
static void MX_WWDG_Init(void);
static void MX_IWDG_Init(void);
/* USER CODE BEGIN PFP */
static void MX_CAN1_slientMode_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004c4:	4b18      	ldr	r3, [pc, #96]	; (8000528 <MX_CAN1_slientMode_Init+0x68>)
 80004c6:	4a19      	ldr	r2, [pc, #100]	; (800052c <MX_CAN1_slientMode_Init+0x6c>)
 80004c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 80004ca:	4b17      	ldr	r3, [pc, #92]	; (8000528 <MX_CAN1_slientMode_Init+0x68>)
 80004cc:	2212      	movs	r2, #18
 80004ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_SILENT;
 80004d0:	4b15      	ldr	r3, [pc, #84]	; (8000528 <MX_CAN1_slientMode_Init+0x68>)
 80004d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80004d6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004d8:	4b13      	ldr	r3, [pc, #76]	; (8000528 <MX_CAN1_slientMode_Init+0x68>)
 80004da:	2200      	movs	r2, #0
 80004dc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <MX_CAN1_slientMode_Init+0x68>)
 80004e0:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80004e4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <MX_CAN1_slientMode_Init+0x68>)
 80004e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80004ec:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <MX_CAN1_slientMode_Init+0x68>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <MX_CAN1_slientMode_Init+0x68>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <MX_CAN1_slientMode_Init+0x68>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000500:	4b09      	ldr	r3, [pc, #36]	; (8000528 <MX_CAN1_slientMode_Init+0x68>)
 8000502:	2201      	movs	r2, #1
 8000504:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <MX_CAN1_slientMode_Init+0x68>)
 8000508:	2200      	movs	r2, #0
 800050a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <MX_CAN1_slientMode_Init+0x68>)
 800050e:	2200      	movs	r2, #0
 8000510:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000512:	4805      	ldr	r0, [pc, #20]	; (8000528 <MX_CAN1_slientMode_Init+0x68>)
 8000514:	f001 f876 	bl	8001604 <HAL_CAN_Init>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_CAN1_slientMode_Init+0x62>
  {
    Error_Handler();
 800051e:	f000 fd39 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	200007c0 	.word	0x200007c0
 800052c:	40006400 	.word	0x40006400

08000530 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char StrFunctionCode[16][10] = {"NMT      \0","EMERGENCY\0","TIME     \0","FC_3     \0","DOORS    \0","FC_5     \0","FC_6     \0","FC_7     \0","PDO_OUT  \0","PDO_IN   \0","MPDO     \0","TSDO     \0","RSDO     \0","FC_D     \0","HEARTBEAT\0","LSS      \0"};

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  /* Get RX message */
	if(hcan->Instance == hcan1.Instance)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b3f      	ldr	r3, [pc, #252]	; (800063c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	429a      	cmp	r2, r3
 8000542:	d136      	bne.n	80005b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x82>
	{
		  if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &Can1RxHeader[ri1], Can1RxData[ri1]) != HAL_OK)
 8000544:	4b3e      	ldr	r3, [pc, #248]	; (8000640 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	461a      	mov	r2, r3
 800054c:	4613      	mov	r3, r2
 800054e:	00db      	lsls	r3, r3, #3
 8000550:	1a9b      	subs	r3, r3, r2
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	4a3b      	ldr	r2, [pc, #236]	; (8000644 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8000556:	441a      	add	r2, r3
 8000558:	4b39      	ldr	r3, [pc, #228]	; (8000640 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	00db      	lsls	r3, r3, #3
 8000560:	4939      	ldr	r1, [pc, #228]	; (8000648 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8000562:	440b      	add	r3, r1
 8000564:	2100      	movs	r1, #0
 8000566:	4835      	ldr	r0, [pc, #212]	; (800063c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8000568:	f001 fbb2 	bl	8001cd0 <HAL_CAN_GetRxMessage>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d002      	beq.n	8000578 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
		  {
			/* Reception Error */
			  Error_Handler();
 8000572:	f000 fd0f 	bl	8000f94 <Error_Handler>
			  if(ri2 == (CAN_RX_SIZE -1)) { ri2 =0;}
			  else ri2++;

		  }
	}
}
 8000576:	e05d      	b.n	8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
			  RxCan1_cnt ++;
 8000578:	4b34      	ldr	r3, [pc, #208]	; (800064c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	4a33      	ldr	r2, [pc, #204]	; (800064c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8000580:	6013      	str	r3, [r2, #0]
			  rc1++;
 8000582:	4b33      	ldr	r3, [pc, #204]	; (8000650 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	b2db      	uxtb	r3, r3
 8000588:	3301      	adds	r3, #1
 800058a:	b2da      	uxtb	r2, r3
 800058c:	4b30      	ldr	r3, [pc, #192]	; (8000650 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 800058e:	701a      	strb	r2, [r3, #0]
			  if(ri1 == (CAN_RX_SIZE -1)) { ri1 =0;}
 8000590:	4b2b      	ldr	r3, [pc, #172]	; (8000640 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b2db      	uxtb	r3, r3
 8000596:	2b07      	cmp	r3, #7
 8000598:	d103      	bne.n	80005a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
 800059a:	4b29      	ldr	r3, [pc, #164]	; (8000640 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]
}
 80005a0:	e048      	b.n	8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
			  else ri1++;
 80005a2:	4b27      	ldr	r3, [pc, #156]	; (8000640 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	3301      	adds	r3, #1
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b24      	ldr	r3, [pc, #144]	; (8000640 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 80005ae:	701a      	strb	r2, [r3, #0]
}
 80005b0:	e040      	b.n	8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
	else	if (hcan->Instance == hcan2.Instance)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	4b27      	ldr	r3, [pc, #156]	; (8000654 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d13a      	bne.n	8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
		  if (HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &Can2RxHeader[ri2], Can2RxData[ri2]) != HAL_OK)
 80005be:	4b26      	ldr	r3, [pc, #152]	; (8000658 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	461a      	mov	r2, r3
 80005c6:	4613      	mov	r3, r2
 80005c8:	00db      	lsls	r3, r3, #3
 80005ca:	1a9b      	subs	r3, r3, r2
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	4a23      	ldr	r2, [pc, #140]	; (800065c <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 80005d0:	441a      	add	r2, r3
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	00db      	lsls	r3, r3, #3
 80005da:	4921      	ldr	r1, [pc, #132]	; (8000660 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 80005dc:	440b      	add	r3, r1
 80005de:	2100      	movs	r1, #0
 80005e0:	481c      	ldr	r0, [pc, #112]	; (8000654 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 80005e2:	f001 fb75 	bl	8001cd0 <HAL_CAN_GetRxMessage>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d002      	beq.n	80005f2 <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
			  Error_Handler();
 80005ec:	f000 fcd2 	bl	8000f94 <Error_Handler>
}
 80005f0:	e020      	b.n	8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
			  HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 80005f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f6:	481b      	ldr	r0, [pc, #108]	; (8000664 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 80005f8:	f002 fac1 	bl	8002b7e <HAL_GPIO_TogglePin>
			  RxCan2_cnt ++;
 80005fc:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	3301      	adds	r3, #1
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8000604:	6013      	str	r3, [r2, #0]
			  rc2++;
 8000606:	4b19      	ldr	r3, [pc, #100]	; (800066c <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	b2db      	uxtb	r3, r3
 800060c:	3301      	adds	r3, #1
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b16      	ldr	r3, [pc, #88]	; (800066c <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 8000612:	701a      	strb	r2, [r3, #0]
			  if(ri2 == (CAN_RX_SIZE -1)) { ri2 =0;}
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b07      	cmp	r3, #7
 800061c:	d103      	bne.n	8000626 <HAL_CAN_RxFifo0MsgPendingCallback+0xf6>
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
}
 8000624:	e006      	b.n	8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
			  else ri2++;
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	3301      	adds	r3, #1
 800062e:	b2da      	uxtb	r2, r3
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8000632:	701a      	strb	r2, [r3, #0]
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200007c0 	.word	0x200007c0
 8000640:	200000b6 	.word	0x200000b6
 8000644:	20000648 	.word	0x20000648
 8000648:	20000034 	.word	0x20000034
 800064c:	200000bc 	.word	0x200000bc
 8000650:	200000b4 	.word	0x200000b4
 8000654:	20000728 	.word	0x20000728
 8000658:	200000b7 	.word	0x200000b7
 800065c:	200000ec 	.word	0x200000ec
 8000660:	20000074 	.word	0x20000074
 8000664:	40020c00 	.word	0x40020c00
 8000668:	200000c0 	.word	0x200000c0
 800066c:	200000b5 	.word	0x200000b5

08000670 <HAL_CAN_TxMailbox0CompleteCallback>:


int CNT_interrup[6] = {0};
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == hcan1.Instance)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <HAL_CAN_TxMailbox0CompleteCallback+0x68>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	429a      	cmp	r2, r3
 8000682:	d10d      	bne.n	80006a0 <HAL_CAN_TxMailbox0CompleteCallback+0x30>
	{
		TxCan1_cnt++;
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_CAN_TxMailbox0CompleteCallback+0x6c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	3301      	adds	r3, #1
 800068a:	4a14      	ldr	r2, [pc, #80]	; (80006dc <HAL_CAN_TxMailbox0CompleteCallback+0x6c>)
 800068c:	6013      	str	r3, [r2, #0]
		Can1_tx_done = 1;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <HAL_CAN_TxMailbox0CompleteCallback+0x70>)
 8000690:	2201      	movs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]
		CNT_interrup[0]++;
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <HAL_CAN_TxMailbox0CompleteCallback+0x74>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	3301      	adds	r3, #1
 800069a:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <HAL_CAN_TxMailbox0CompleteCallback+0x74>)
 800069c:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LED_RUN_GPIO_Port, LED_RUN_Pin);
		Can2_tx_done = 1;
		TxCan2_cnt++;
		CNT_interrup[1]++;
	}
}
 800069e:	e017      	b.n	80006d0 <HAL_CAN_TxMailbox0CompleteCallback+0x60>
	else if(hcan->Instance == hcan2.Instance)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <HAL_CAN_TxMailbox0CompleteCallback+0x78>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d111      	bne.n	80006d0 <HAL_CAN_TxMailbox0CompleteCallback+0x60>
		HAL_GPIO_TogglePin(LED_RUN_GPIO_Port, LED_RUN_Pin);
 80006ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006b0:	480e      	ldr	r0, [pc, #56]	; (80006ec <HAL_CAN_TxMailbox0CompleteCallback+0x7c>)
 80006b2:	f002 fa64 	bl	8002b7e <HAL_GPIO_TogglePin>
		Can2_tx_done = 1;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <HAL_CAN_TxMailbox0CompleteCallback+0x80>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	701a      	strb	r2, [r3, #0]
		TxCan2_cnt++;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <HAL_CAN_TxMailbox0CompleteCallback+0x84>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	3301      	adds	r3, #1
 80006c2:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <HAL_CAN_TxMailbox0CompleteCallback+0x84>)
 80006c4:	6013      	str	r3, [r2, #0]
		CNT_interrup[1]++;
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <HAL_CAN_TxMailbox0CompleteCallback+0x74>)
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	3301      	adds	r3, #1
 80006cc:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <HAL_CAN_TxMailbox0CompleteCallback+0x74>)
 80006ce:	6053      	str	r3, [r2, #4]
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200007c0 	.word	0x200007c0
 80006dc:	200000c4 	.word	0x200000c4
 80006e0:	20000000 	.word	0x20000000
 80006e4:	200000cc 	.word	0x200000cc
 80006e8:	20000728 	.word	0x20000728
 80006ec:	40020c00 	.word	0x40020c00
 80006f0:	20000001 	.word	0x20000001
 80006f4:	200000c8 	.word	0x200000c8

080006f8 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == hcan1.Instance)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <HAL_CAN_TxMailbox1CompleteCallback+0x68>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	429a      	cmp	r2, r3
 800070a:	d10d      	bne.n	8000728 <HAL_CAN_TxMailbox1CompleteCallback+0x30>
	{
		TxCan1_cnt++;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <HAL_CAN_TxMailbox1CompleteCallback+0x6c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	4a14      	ldr	r2, [pc, #80]	; (8000764 <HAL_CAN_TxMailbox1CompleteCallback+0x6c>)
 8000714:	6013      	str	r3, [r2, #0]
		Can1_tx_done = 1;
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <HAL_CAN_TxMailbox1CompleteCallback+0x70>)
 8000718:	2201      	movs	r2, #1
 800071a:	701a      	strb	r2, [r3, #0]
		CNT_interrup[2]++;
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <HAL_CAN_TxMailbox1CompleteCallback+0x74>)
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	3301      	adds	r3, #1
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <HAL_CAN_TxMailbox1CompleteCallback+0x74>)
 8000724:	6093      	str	r3, [r2, #8]
		HAL_GPIO_TogglePin(LED_RUN_GPIO_Port, LED_RUN_Pin);
		Can2_tx_done = 1;
		TxCan2_cnt++;
		CNT_interrup[3]++;
	}
}
 8000726:	e017      	b.n	8000758 <HAL_CAN_TxMailbox1CompleteCallback+0x60>
	else if(hcan->Instance == hcan2.Instance)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b10      	ldr	r3, [pc, #64]	; (8000770 <HAL_CAN_TxMailbox1CompleteCallback+0x78>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	429a      	cmp	r2, r3
 8000732:	d111      	bne.n	8000758 <HAL_CAN_TxMailbox1CompleteCallback+0x60>
		HAL_GPIO_TogglePin(LED_RUN_GPIO_Port, LED_RUN_Pin);
 8000734:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000738:	480e      	ldr	r0, [pc, #56]	; (8000774 <HAL_CAN_TxMailbox1CompleteCallback+0x7c>)
 800073a:	f002 fa20 	bl	8002b7e <HAL_GPIO_TogglePin>
		Can2_tx_done = 1;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <HAL_CAN_TxMailbox1CompleteCallback+0x80>)
 8000740:	2201      	movs	r2, #1
 8000742:	701a      	strb	r2, [r3, #0]
		TxCan2_cnt++;
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <HAL_CAN_TxMailbox1CompleteCallback+0x84>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3301      	adds	r3, #1
 800074a:	4a0c      	ldr	r2, [pc, #48]	; (800077c <HAL_CAN_TxMailbox1CompleteCallback+0x84>)
 800074c:	6013      	str	r3, [r2, #0]
		CNT_interrup[3]++;
 800074e:	4b07      	ldr	r3, [pc, #28]	; (800076c <HAL_CAN_TxMailbox1CompleteCallback+0x74>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	3301      	adds	r3, #1
 8000754:	4a05      	ldr	r2, [pc, #20]	; (800076c <HAL_CAN_TxMailbox1CompleteCallback+0x74>)
 8000756:	60d3      	str	r3, [r2, #12]
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200007c0 	.word	0x200007c0
 8000764:	200000c4 	.word	0x200000c4
 8000768:	20000000 	.word	0x20000000
 800076c:	200000cc 	.word	0x200000cc
 8000770:	20000728 	.word	0x20000728
 8000774:	40020c00 	.word	0x40020c00
 8000778:	20000001 	.word	0x20000001
 800077c:	200000c8 	.word	0x200000c8

08000780 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == hcan1.Instance)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <HAL_CAN_TxMailbox2CompleteCallback+0x68>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	429a      	cmp	r2, r3
 8000792:	d10d      	bne.n	80007b0 <HAL_CAN_TxMailbox2CompleteCallback+0x30>
	{
		TxCan1_cnt++;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <HAL_CAN_TxMailbox2CompleteCallback+0x6c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3301      	adds	r3, #1
 800079a:	4a14      	ldr	r2, [pc, #80]	; (80007ec <HAL_CAN_TxMailbox2CompleteCallback+0x6c>)
 800079c:	6013      	str	r3, [r2, #0]
		Can1_tx_done = 1;
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <HAL_CAN_TxMailbox2CompleteCallback+0x70>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	701a      	strb	r2, [r3, #0]
		CNT_interrup[4]++;
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <HAL_CAN_TxMailbox2CompleteCallback+0x74>)
 80007a6:	691b      	ldr	r3, [r3, #16]
 80007a8:	3301      	adds	r3, #1
 80007aa:	4a12      	ldr	r2, [pc, #72]	; (80007f4 <HAL_CAN_TxMailbox2CompleteCallback+0x74>)
 80007ac:	6113      	str	r3, [r2, #16]
		Can2_tx_done = 1;
		TxCan2_cnt++;
		CNT_interrup[5]++;
	}

}
 80007ae:	e017      	b.n	80007e0 <HAL_CAN_TxMailbox2CompleteCallback+0x60>
	else if(hcan->Instance == hcan2.Instance)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <HAL_CAN_TxMailbox2CompleteCallback+0x78>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d111      	bne.n	80007e0 <HAL_CAN_TxMailbox2CompleteCallback+0x60>
		HAL_GPIO_TogglePin(LED_RUN_GPIO_Port, LED_RUN_Pin);
 80007bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007c0:	480e      	ldr	r0, [pc, #56]	; (80007fc <HAL_CAN_TxMailbox2CompleteCallback+0x7c>)
 80007c2:	f002 f9dc 	bl	8002b7e <HAL_GPIO_TogglePin>
		Can2_tx_done = 1;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_CAN_TxMailbox2CompleteCallback+0x80>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	701a      	strb	r2, [r3, #0]
		TxCan2_cnt++;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <HAL_CAN_TxMailbox2CompleteCallback+0x84>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <HAL_CAN_TxMailbox2CompleteCallback+0x84>)
 80007d4:	6013      	str	r3, [r2, #0]
		CNT_interrup[5]++;
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <HAL_CAN_TxMailbox2CompleteCallback+0x74>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	3301      	adds	r3, #1
 80007dc:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <HAL_CAN_TxMailbox2CompleteCallback+0x74>)
 80007de:	6153      	str	r3, [r2, #20]
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200007c0 	.word	0x200007c0
 80007ec:	200000c4 	.word	0x200000c4
 80007f0:	20000000 	.word	0x20000000
 80007f4:	200000cc 	.word	0x200000cc
 80007f8:	20000728 	.word	0x20000728
 80007fc:	40020c00 	.word	0x40020c00
 8000800:	20000001 	.word	0x20000001
 8000804:	200000c8 	.word	0x200000c8

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	; 0x30
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080e:	f000 fe87 	bl	8001520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000812:	f000 f983 	bl	8000b1c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000816:	f000 fad7 	bl	8000dc8 <MX_GPIO_Init>
  MX_CAN1_Init();
 800081a:	f000 f9eb 	bl	8000bf4 <MX_CAN1_Init>
  MX_CAN2_Init();
 800081e:	f000 fa1f 	bl	8000c60 <MX_CAN2_Init>
  MX_I2C1_Init();
 8000822:	f000 fa53 	bl	8000ccc <MX_I2C1_Init>
  MX_SPI1_Init();
 8000826:	f000 fa99 	bl	8000d5c <MX_SPI1_Init>
 // MX_WWDG_Init();
  MX_IWDG_Init();
 800082a:	f000 fa7d 	bl	8000d28 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  CAN1Mode = HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin);
 800082e:	2104      	movs	r1, #4
 8000830:	48a7      	ldr	r0, [pc, #668]	; (8000ad0 <main+0x2c8>)
 8000832:	f002 f973 	bl	8002b1c <HAL_GPIO_ReadPin>
 8000836:	4603      	mov	r3, r0
 8000838:	461a      	mov	r2, r3
 800083a:	4ba6      	ldr	r3, [pc, #664]	; (8000ad4 <main+0x2cc>)
 800083c:	601a      	str	r2, [r3, #0]
  if(CAN1Mode == 0)
 800083e:	4ba5      	ldr	r3, [pc, #660]	; (8000ad4 <main+0x2cc>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d104      	bne.n	8000850 <main+0x48>
  {
	  HAL_CAN_DeInit(&hcan1);
 8000846:	48a4      	ldr	r0, [pc, #656]	; (8000ad8 <main+0x2d0>)
 8000848:	f000 ffd7 	bl	80017fa <HAL_CAN_DeInit>
	  MX_CAN1_slientMode_Init();
 800084c:	f7ff fe38 	bl	80004c0 <MX_CAN1_slientMode_Init>
  }
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = 0x00;
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIdLow = 0x0000;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterActivation = ENABLE;
 8000870:	2301      	movs	r3, #1
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.SlaveStartFilterBank = 14;
 8000874:	230e      	movs	r3, #14
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28

	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	4619      	mov	r1, r3
 800087c:	4896      	ldr	r0, [pc, #600]	; (8000ad8 <main+0x2d0>)
 800087e:	f000 ffdf 	bl	8001840 <HAL_CAN_ConfigFilter>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <main+0x84>
	{
	/* Filter configuration Error */
		Error_Handler();
 8000888:	f000 fb84 	bl	8000f94 <Error_Handler>
	}
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterBank = 15;
 8000890:	230f      	movs	r3, #15
 8000892:	61bb      	str	r3, [r7, #24]
	if(HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4619      	mov	r1, r3
 8000898:	4890      	ldr	r0, [pc, #576]	; (8000adc <main+0x2d4>)
 800089a:	f000 ffd1 	bl	8001840 <HAL_CAN_ConfigFilter>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <main+0xa0>
	{
	/* Filter configuration Error */
		Error_Handler();
 80008a4:	f000 fb76 	bl	8000f94 <Error_Handler>
	}
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80008a8:	488b      	ldr	r0, [pc, #556]	; (8000ad8 <main+0x2d0>)
 80008aa:	f001 f8a9 	bl	8001a00 <HAL_CAN_Start>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <main+0xb0>
	{
	  /* Start Error */
		Error_Handler();
 80008b4:	f000 fb6e 	bl	8000f94 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80008b8:	2102      	movs	r1, #2
 80008ba:	4887      	ldr	r0, [pc, #540]	; (8000ad8 <main+0x2d0>)
 80008bc:	f001 fb1a 	bl	8001ef4 <HAL_CAN_ActivateNotification>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <main+0xc2>
	{
	/* Notification Error */
		Error_Handler();
 80008c6:	f000 fb65 	bl	8000f94 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80008ca:	2101      	movs	r1, #1
 80008cc:	4882      	ldr	r0, [pc, #520]	; (8000ad8 <main+0x2d0>)
 80008ce:	f001 fb11 	bl	8001ef4 <HAL_CAN_ActivateNotification>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <main+0xd4>
	{
	/* Notification Error */
		Error_Handler();
 80008d8:	f000 fb5c 	bl	8000f94 <Error_Handler>
	}
	if (HAL_CAN_Start(&hcan2) != HAL_OK)
 80008dc:	487f      	ldr	r0, [pc, #508]	; (8000adc <main+0x2d4>)
 80008de:	f001 f88f 	bl	8001a00 <HAL_CAN_Start>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <main+0xe4>
	{
	  /* Start Error */
	  Error_Handler();
 80008e8:	f000 fb54 	bl	8000f94 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80008ec:	2102      	movs	r1, #2
 80008ee:	487b      	ldr	r0, [pc, #492]	; (8000adc <main+0x2d4>)
 80008f0:	f001 fb00 	bl	8001ef4 <HAL_CAN_ActivateNotification>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <main+0xf6>
	{
	/* Notification Error */
		Error_Handler();
 80008fa:	f000 fb4b 	bl	8000f94 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80008fe:	2101      	movs	r1, #1
 8000900:	4876      	ldr	r0, [pc, #472]	; (8000adc <main+0x2d4>)
 8000902:	f001 faf7 	bl	8001ef4 <HAL_CAN_ActivateNotification>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <main+0x108>
	{
	/* Notification Error */
		Error_Handler();
 800090c:	f000 fb42 	bl	8000f94 <Error_Handler>
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t DebugTime =0;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (1)
  {
	  HAL_IWDG_Refresh(&hiwdg);
 8000914:	4872      	ldr	r0, [pc, #456]	; (8000ae0 <main+0x2d8>)
 8000916:	f002 fad3 	bl	8002ec0 <HAL_IWDG_Refresh>

	  if(rc1)
 800091a:	4b72      	ldr	r3, [pc, #456]	; (8000ae4 <main+0x2dc>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	d066      	beq.n	80009f2 <main+0x1ea>
	  {
		  CanTxHeader.StdId = Can1RxHeader[ro1].StdId;
 8000924:	4b70      	ldr	r3, [pc, #448]	; (8000ae8 <main+0x2e0>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	4619      	mov	r1, r3
 800092c:	4a6f      	ldr	r2, [pc, #444]	; (8000aec <main+0x2e4>)
 800092e:	460b      	mov	r3, r1
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	1a5b      	subs	r3, r3, r1
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	4413      	add	r3, r2
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a6d      	ldr	r2, [pc, #436]	; (8000af0 <main+0x2e8>)
 800093c:	6013      	str	r3, [r2, #0]
		  CanTxHeader.RTR = Can1RxHeader[ro1].RTR;
 800093e:	4b6a      	ldr	r3, [pc, #424]	; (8000ae8 <main+0x2e0>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	4619      	mov	r1, r3
 8000946:	4a69      	ldr	r2, [pc, #420]	; (8000aec <main+0x2e4>)
 8000948:	460b      	mov	r3, r1
 800094a:	00db      	lsls	r3, r3, #3
 800094c:	1a5b      	subs	r3, r3, r1
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	4413      	add	r3, r2
 8000952:	330c      	adds	r3, #12
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a66      	ldr	r2, [pc, #408]	; (8000af0 <main+0x2e8>)
 8000958:	60d3      	str	r3, [r2, #12]
		  CanTxHeader.IDE = Can1RxHeader[ro1].IDE;
 800095a:	4b63      	ldr	r3, [pc, #396]	; (8000ae8 <main+0x2e0>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	4619      	mov	r1, r3
 8000962:	4a62      	ldr	r2, [pc, #392]	; (8000aec <main+0x2e4>)
 8000964:	460b      	mov	r3, r1
 8000966:	00db      	lsls	r3, r3, #3
 8000968:	1a5b      	subs	r3, r3, r1
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	4413      	add	r3, r2
 800096e:	3308      	adds	r3, #8
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a5f      	ldr	r2, [pc, #380]	; (8000af0 <main+0x2e8>)
 8000974:	6093      	str	r3, [r2, #8]
		  CanTxHeader.DLC = Can1RxHeader[ro1].DLC;
 8000976:	4b5c      	ldr	r3, [pc, #368]	; (8000ae8 <main+0x2e0>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	4619      	mov	r1, r3
 800097e:	4a5b      	ldr	r2, [pc, #364]	; (8000aec <main+0x2e4>)
 8000980:	460b      	mov	r3, r1
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	1a5b      	subs	r3, r3, r1
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	4413      	add	r3, r2
 800098a:	3310      	adds	r3, #16
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a58      	ldr	r2, [pc, #352]	; (8000af0 <main+0x2e8>)
 8000990:	6113      	str	r3, [r2, #16]
		  CanTxHeader.TransmitGlobalTime = DISABLE;
 8000992:	4b57      	ldr	r3, [pc, #348]	; (8000af0 <main+0x2e8>)
 8000994:	2200      	movs	r2, #0
 8000996:	751a      	strb	r2, [r3, #20]
		  memcpy(CanTxData,Can1RxData[ro1],8);
 8000998:	4b53      	ldr	r3, [pc, #332]	; (8000ae8 <main+0x2e0>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	4a54      	ldr	r2, [pc, #336]	; (8000af4 <main+0x2ec>)
 80009a2:	441a      	add	r2, r3
 80009a4:	4b54      	ldr	r3, [pc, #336]	; (8000af8 <main+0x2f0>)
 80009a6:	6810      	ldr	r0, [r2, #0]
 80009a8:	6851      	ldr	r1, [r2, #4]
 80009aa:	c303      	stmia	r3!, {r0, r1}
		  if(HAL_CAN_AddTxMessage(&hcan2, &CanTxHeader, CanTxData, &Tx1Mailbox) != HAL_OK)
 80009ac:	4b53      	ldr	r3, [pc, #332]	; (8000afc <main+0x2f4>)
 80009ae:	4a52      	ldr	r2, [pc, #328]	; (8000af8 <main+0x2f0>)
 80009b0:	494f      	ldr	r1, [pc, #316]	; (8000af0 <main+0x2e8>)
 80009b2:	484a      	ldr	r0, [pc, #296]	; (8000adc <main+0x2d4>)
 80009b4:	f001 f8b1 	bl	8001b1a <HAL_CAN_AddTxMessage>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d119      	bne.n	80009f2 <main+0x1ea>
			/* Transmission request Error */
			//Error_Handler();
		  }
		  else
		  {
			  Can2_tx_done =0;
 80009be:	4b50      	ldr	r3, [pc, #320]	; (8000b00 <main+0x2f8>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
			  if(ro1 == (CAN_RX_SIZE -1)) { ro1 =0;}
 80009c4:	4b48      	ldr	r3, [pc, #288]	; (8000ae8 <main+0x2e0>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	2b07      	cmp	r3, #7
 80009cc:	d103      	bne.n	80009d6 <main+0x1ce>
 80009ce:	4b46      	ldr	r3, [pc, #280]	; (8000ae8 <main+0x2e0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
 80009d4:	e006      	b.n	80009e4 <main+0x1dc>
			  else ro1++;
 80009d6:	4b44      	ldr	r3, [pc, #272]	; (8000ae8 <main+0x2e0>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	3301      	adds	r3, #1
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	4b41      	ldr	r3, [pc, #260]	; (8000ae8 <main+0x2e0>)
 80009e2:	701a      	strb	r2, [r3, #0]
			  rc1--;
 80009e4:	4b3f      	ldr	r3, [pc, #252]	; (8000ae4 <main+0x2dc>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	3b01      	subs	r3, #1
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4b3d      	ldr	r3, [pc, #244]	; (8000ae4 <main+0x2dc>)
 80009f0:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  if(rc2 )
 80009f2:	4b44      	ldr	r3, [pc, #272]	; (8000b04 <main+0x2fc>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d08b      	beq.n	8000914 <main+0x10c>
	  {
		  CanTxHeader.StdId = Can2RxHeader[ro2].StdId;
 80009fc:	4b42      	ldr	r3, [pc, #264]	; (8000b08 <main+0x300>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	4619      	mov	r1, r3
 8000a04:	4a41      	ldr	r2, [pc, #260]	; (8000b0c <main+0x304>)
 8000a06:	460b      	mov	r3, r1
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	1a5b      	subs	r3, r3, r1
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a37      	ldr	r2, [pc, #220]	; (8000af0 <main+0x2e8>)
 8000a14:	6013      	str	r3, [r2, #0]
		  CanTxHeader.RTR = Can2RxHeader[ro2].RTR;
 8000a16:	4b3c      	ldr	r3, [pc, #240]	; (8000b08 <main+0x300>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4a3b      	ldr	r2, [pc, #236]	; (8000b0c <main+0x304>)
 8000a20:	460b      	mov	r3, r1
 8000a22:	00db      	lsls	r3, r3, #3
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	4413      	add	r3, r2
 8000a2a:	330c      	adds	r3, #12
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a30      	ldr	r2, [pc, #192]	; (8000af0 <main+0x2e8>)
 8000a30:	60d3      	str	r3, [r2, #12]
		  CanTxHeader.IDE = Can2RxHeader[ro2].IDE;
 8000a32:	4b35      	ldr	r3, [pc, #212]	; (8000b08 <main+0x300>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4a34      	ldr	r2, [pc, #208]	; (8000b0c <main+0x304>)
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	1a5b      	subs	r3, r3, r1
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	4413      	add	r3, r2
 8000a46:	3308      	adds	r3, #8
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a29      	ldr	r2, [pc, #164]	; (8000af0 <main+0x2e8>)
 8000a4c:	6093      	str	r3, [r2, #8]
		  CanTxHeader.DLC = Can2RxHeader[ro2].DLC;
 8000a4e:	4b2e      	ldr	r3, [pc, #184]	; (8000b08 <main+0x300>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	4619      	mov	r1, r3
 8000a56:	4a2d      	ldr	r2, [pc, #180]	; (8000b0c <main+0x304>)
 8000a58:	460b      	mov	r3, r1
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	1a5b      	subs	r3, r3, r1
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	4413      	add	r3, r2
 8000a62:	3310      	adds	r3, #16
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a22      	ldr	r2, [pc, #136]	; (8000af0 <main+0x2e8>)
 8000a68:	6113      	str	r3, [r2, #16]
		  CanTxHeader.TransmitGlobalTime = DISABLE;
 8000a6a:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <main+0x2e8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	751a      	strb	r2, [r3, #20]
		  memcpy(CanTxData,Can2RxData[ro2],8);
 8000a70:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <main+0x300>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	00db      	lsls	r3, r3, #3
 8000a78:	4a25      	ldr	r2, [pc, #148]	; (8000b10 <main+0x308>)
 8000a7a:	441a      	add	r2, r3
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <main+0x2f0>)
 8000a7e:	6810      	ldr	r0, [r2, #0]
 8000a80:	6851      	ldr	r1, [r2, #4]
 8000a82:	c303      	stmia	r3!, {r0, r1}
		  if(HAL_CAN_AddTxMessage(&hcan1, &CanTxHeader, CanTxData, &Tx2Mailbox) != HAL_OK)
 8000a84:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <main+0x30c>)
 8000a86:	4a1c      	ldr	r2, [pc, #112]	; (8000af8 <main+0x2f0>)
 8000a88:	4919      	ldr	r1, [pc, #100]	; (8000af0 <main+0x2e8>)
 8000a8a:	4813      	ldr	r0, [pc, #76]	; (8000ad8 <main+0x2d0>)
 8000a8c:	f001 f845 	bl	8001b1a <HAL_CAN_AddTxMessage>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f47f af3e 	bne.w	8000914 <main+0x10c>
			/* Transmission request Error */
			//Error_Handler();
		  }
		  else
		  {
			  Can1_tx_done =0;
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <main+0x310>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
			  if(ro2 == (CAN_RX_SIZE -1)) { ro2 =0;}
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <main+0x300>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	2b07      	cmp	r3, #7
 8000aa6:	d103      	bne.n	8000ab0 <main+0x2a8>
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <main+0x300>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
 8000aae:	e006      	b.n	8000abe <main+0x2b6>
			  else ro2++;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <main+0x300>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <main+0x300>)
 8000abc:	701a      	strb	r2, [r3, #0]
			  rc2--;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <main+0x2fc>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <main+0x2fc>)
 8000aca:	701a      	strb	r2, [r3, #0]
	  HAL_IWDG_Refresh(&hiwdg);
 8000acc:	e722      	b.n	8000914 <main+0x10c>
 8000ace:	bf00      	nop
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	200000e4 	.word	0x200000e4
 8000ad8:	200007c0 	.word	0x200007c0
 8000adc:	20000728 	.word	0x20000728
 8000ae0:	20000624 	.word	0x20000624
 8000ae4:	200000b4 	.word	0x200000b4
 8000ae8:	200000b8 	.word	0x200000b8
 8000aec:	20000648 	.word	0x20000648
 8000af0:	20000630 	.word	0x20000630
 8000af4:	20000034 	.word	0x20000034
 8000af8:	2000002c 	.word	0x2000002c
 8000afc:	200005cc 	.word	0x200005cc
 8000b00:	20000001 	.word	0x20000001
 8000b04:	200000b5 	.word	0x200000b5
 8000b08:	200000b9 	.word	0x200000b9
 8000b0c:	200000ec 	.word	0x200000ec
 8000b10:	20000074 	.word	0x20000074
 8000b14:	200007bc 	.word	0x200007bc
 8000b18:	20000000 	.word	0x20000000

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b094      	sub	sp, #80	; 0x50
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 0320 	add.w	r3, r7, #32
 8000b26:	2230      	movs	r2, #48	; 0x30
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f002 ff0e 	bl	800394c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	4b29      	ldr	r3, [pc, #164]	; (8000bec <SystemClock_Config+0xd0>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	4a28      	ldr	r2, [pc, #160]	; (8000bec <SystemClock_Config+0xd0>)
 8000b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b50:	4b26      	ldr	r3, [pc, #152]	; (8000bec <SystemClock_Config+0xd0>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	4b23      	ldr	r3, [pc, #140]	; (8000bf0 <SystemClock_Config+0xd4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a22      	ldr	r2, [pc, #136]	; (8000bf0 <SystemClock_Config+0xd4>)
 8000b66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <SystemClock_Config+0xd4>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b78:	2309      	movs	r3, #9
 8000b7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b82:	2301      	movs	r3, #1
 8000b84:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b86:	2302      	movs	r3, #2
 8000b88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b90:	2304      	movs	r3, #4
 8000b92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000b94:	2348      	movs	r3, #72	; 0x48
 8000b96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba0:	f107 0320 	add.w	r3, r7, #32
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f002 f99b 	bl	8002ee0 <HAL_RCC_OscConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bb0:	f000 f9f0 	bl	8000f94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f002 fbfc 	bl	80033d0 <HAL_RCC_ClockConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bde:	f000 f9d9 	bl	8000f94 <Error_Handler>
  }
}
 8000be2:	bf00      	nop
 8000be4:	3750      	adds	r7, #80	; 0x50
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40007000 	.word	0x40007000

08000bf4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <MX_CAN1_Init+0x64>)
 8000bfa:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <MX_CAN1_Init+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <MX_CAN1_Init+0x64>)
 8000c00:	2212      	movs	r2, #18
 8000c02:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_CAN1_Init+0x64>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <MX_CAN1_Init+0x64>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_CAN1_Init+0x64>)
 8000c12:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000c16:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_CAN1_Init+0x64>)
 8000c1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c1e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <MX_CAN1_Init+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_CAN1_Init+0x64>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MX_CAN1_Init+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_CAN1_Init+0x64>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_CAN1_Init+0x64>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_CAN1_Init+0x64>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_CAN1_Init+0x64>)
 8000c46:	f000 fcdd 	bl	8001604 <HAL_CAN_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000c50:	f000 f9a0 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	200007c0 	.word	0x200007c0
 8000c5c:	40006400 	.word	0x40006400

08000c60 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000c64:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <MX_CAN2_Init+0x64>)
 8000c66:	4a18      	ldr	r2, [pc, #96]	; (8000cc8 <MX_CAN2_Init+0x68>)
 8000c68:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 18;
 8000c6a:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <MX_CAN2_Init+0x64>)
 8000c6c:	2212      	movs	r2, #18
 8000c6e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <MX_CAN2_Init+0x64>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c76:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <MX_CAN2_Init+0x64>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_CAN2_Init+0x64>)
 8000c7e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000c82:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <MX_CAN2_Init+0x64>)
 8000c86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c8a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <MX_CAN2_Init+0x64>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <MX_CAN2_Init+0x64>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000c98:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <MX_CAN2_Init+0x64>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <MX_CAN2_Init+0x64>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <MX_CAN2_Init+0x64>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <MX_CAN2_Init+0x64>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000cb0:	4804      	ldr	r0, [pc, #16]	; (8000cc4 <MX_CAN2_Init+0x64>)
 8000cb2:	f000 fca7 	bl	8001604 <HAL_CAN_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000cbc:	f000 f96a 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000728 	.word	0x20000728
 8000cc8:	40006800 	.word	0x40006800

08000ccc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <MX_I2C1_Init+0x50>)
 8000cd2:	4a13      	ldr	r2, [pc, #76]	; (8000d20 <MX_I2C1_Init+0x54>)
 8000cd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_I2C1_Init+0x50>)
 8000cd8:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <MX_I2C1_Init+0x58>)
 8000cda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_I2C1_Init+0x50>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_I2C1_Init+0x50>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_I2C1_Init+0x50>)
 8000cea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <MX_I2C1_Init+0x50>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_I2C1_Init+0x50>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cfc:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <MX_I2C1_Init+0x50>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <MX_I2C1_Init+0x50>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <MX_I2C1_Init+0x50>)
 8000d0a:	f001 ff53 	bl	8002bb4 <HAL_I2C_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d14:	f000 f93e 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200005d0 	.word	0x200005d0
 8000d20:	40005400 	.word	0x40005400
 8000d24:	000186a0 	.word	0x000186a0

08000d28 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_IWDG_Init+0x2c>)
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <MX_IWDG_Init+0x30>)
 8000d30:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <MX_IWDG_Init+0x2c>)
 8000d34:	2202      	movs	r2, #2
 8000d36:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_IWDG_Init+0x2c>)
 8000d3a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d3e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000d40:	4804      	ldr	r0, [pc, #16]	; (8000d54 <MX_IWDG_Init+0x2c>)
 8000d42:	f002 f87b 	bl	8002e3c <HAL_IWDG_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000d4c:	f000 f922 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000624 	.word	0x20000624
 8000d58:	40003000 	.word	0x40003000

08000d5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d62:	4a18      	ldr	r2, [pc, #96]	; (8000dc4 <MX_SPI1_Init+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000da8:	220a      	movs	r2, #10
 8000daa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dac:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000dae:	f002 fcf7 	bl	80037a0 <HAL_SPI_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000db8:	f000 f8ec 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000764 	.word	0x20000764
 8000dc4:	40013000 	.word	0x40013000

08000dc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08c      	sub	sp, #48	; 0x30
 8000dcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
 8000ddc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
 8000de2:	4b66      	ldr	r3, [pc, #408]	; (8000f7c <MX_GPIO_Init+0x1b4>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a65      	ldr	r2, [pc, #404]	; (8000f7c <MX_GPIO_Init+0x1b4>)
 8000de8:	f043 0310 	orr.w	r3, r3, #16
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b63      	ldr	r3, [pc, #396]	; (8000f7c <MX_GPIO_Init+0x1b4>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0310 	and.w	r3, r3, #16
 8000df6:	61bb      	str	r3, [r7, #24]
 8000df8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	4b5f      	ldr	r3, [pc, #380]	; (8000f7c <MX_GPIO_Init+0x1b4>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a5e      	ldr	r2, [pc, #376]	; (8000f7c <MX_GPIO_Init+0x1b4>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b5c      	ldr	r3, [pc, #368]	; (8000f7c <MX_GPIO_Init+0x1b4>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	4b58      	ldr	r3, [pc, #352]	; (8000f7c <MX_GPIO_Init+0x1b4>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a57      	ldr	r2, [pc, #348]	; (8000f7c <MX_GPIO_Init+0x1b4>)
 8000e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b55      	ldr	r3, [pc, #340]	; (8000f7c <MX_GPIO_Init+0x1b4>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b51      	ldr	r3, [pc, #324]	; (8000f7c <MX_GPIO_Init+0x1b4>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a50      	ldr	r2, [pc, #320]	; (8000f7c <MX_GPIO_Init+0x1b4>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b4e      	ldr	r3, [pc, #312]	; (8000f7c <MX_GPIO_Init+0x1b4>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	4b4a      	ldr	r3, [pc, #296]	; (8000f7c <MX_GPIO_Init+0x1b4>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a49      	ldr	r2, [pc, #292]	; (8000f7c <MX_GPIO_Init+0x1b4>)
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b47      	ldr	r3, [pc, #284]	; (8000f7c <MX_GPIO_Init+0x1b4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	4b43      	ldr	r3, [pc, #268]	; (8000f7c <MX_GPIO_Init+0x1b4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a42      	ldr	r2, [pc, #264]	; (8000f7c <MX_GPIO_Init+0x1b4>)
 8000e74:	f043 0308 	orr.w	r3, r3, #8
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b40      	ldr	r3, [pc, #256]	; (8000f7c <MX_GPIO_Init+0x1b4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e86:	2201      	movs	r2, #1
 8000e88:	2101      	movs	r1, #1
 8000e8a:	483d      	ldr	r0, [pc, #244]	; (8000f80 <MX_GPIO_Init+0x1b8>)
 8000e8c:	f001 fe5e 	bl	8002b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_RUN_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000e90:	2200      	movs	r2, #0
 8000e92:	f64f 0110 	movw	r1, #63504	; 0xf810
 8000e96:	483b      	ldr	r0, [pc, #236]	; (8000f84 <MX_GPIO_Init+0x1bc>)
 8000e98:	f001 fe58 	bl	8002b4c <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin SW4_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin;
 8000e9c:	233c      	movs	r3, #60	; 0x3c
 8000e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4619      	mov	r1, r3
 8000eae:	4836      	ldr	r0, [pc, #216]	; (8000f88 <MX_GPIO_Init+0x1c0>)
 8000eb0:	f001 fb9c 	bl	80025ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	4619      	mov	r1, r3
 8000eca:	482d      	ldr	r0, [pc, #180]	; (8000f80 <MX_GPIO_Init+0x1b8>)
 8000ecc:	f001 fb8e 	bl	80025ec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ed4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ed8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4829      	ldr	r0, [pc, #164]	; (8000f8c <MX_GPIO_Init+0x1c4>)
 8000ee6:	f001 fb81 	bl	80025ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000eea:	2304      	movs	r3, #4
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	4619      	mov	r1, r3
 8000efc:	4824      	ldr	r0, [pc, #144]	; (8000f90 <MX_GPIO_Init+0x1c8>)
 8000efe:	f001 fb75 	bl	80025ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RUN_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LED_RUN_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000f02:	f64f 0310 	movw	r3, #63504	; 0xf810
 8000f06:	61fb      	str	r3, [r7, #28]
                          |LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	4619      	mov	r1, r3
 8000f1a:	481a      	ldr	r0, [pc, #104]	; (8000f84 <MX_GPIO_Init+0x1bc>)
 8000f1c:	f001 fb66 	bl	80025ec <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f32:	2306      	movs	r3, #6
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4810      	ldr	r0, [pc, #64]	; (8000f80 <MX_GPIO_Init+0x1b8>)
 8000f3e:	f001 fb55 	bl	80025ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000f42:	2320      	movs	r3, #32
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	4619      	mov	r1, r3
 8000f54:	480b      	ldr	r0, [pc, #44]	; (8000f84 <MX_GPIO_Init+0x1bc>)
 8000f56:	f001 fb49 	bl	80025ec <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f5e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <MX_GPIO_Init+0x1c0>)
 8000f70:	f001 fb3c 	bl	80025ec <HAL_GPIO_Init>

}
 8000f74:	bf00      	nop
 8000f76:	3730      	adds	r7, #48	; 0x30
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020800 	.word	0x40020800
 8000f84:	40020c00 	.word	0x40020c00
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	40020400 	.word	0x40020400

08000f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f98:	b672      	cpsid	i
}
 8000f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <Error_Handler+0x8>
	...

08000fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_MspInit+0x4c>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <HAL_MspInit+0x4c>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_MspInit+0x4c>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_MspInit+0x4c>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a08      	ldr	r2, [pc, #32]	; (8000fec <HAL_MspInit+0x4c>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_MspInit+0x4c>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fde:	2007      	movs	r0, #7
 8000fe0:	f001 fab4 	bl	800254c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800

08000ff0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	; 0x30
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a63      	ldr	r2, [pc, #396]	; (800119c <HAL_CAN_MspInit+0x1ac>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d156      	bne.n	80010c0 <HAL_CAN_MspInit+0xd0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001012:	4b63      	ldr	r3, [pc, #396]	; (80011a0 <HAL_CAN_MspInit+0x1b0>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	3301      	adds	r3, #1
 8001018:	4a61      	ldr	r2, [pc, #388]	; (80011a0 <HAL_CAN_MspInit+0x1b0>)
 800101a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800101c:	4b60      	ldr	r3, [pc, #384]	; (80011a0 <HAL_CAN_MspInit+0x1b0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d10d      	bne.n	8001040 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	61bb      	str	r3, [r7, #24]
 8001028:	4b5e      	ldr	r3, [pc, #376]	; (80011a4 <HAL_CAN_MspInit+0x1b4>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	4a5d      	ldr	r2, [pc, #372]	; (80011a4 <HAL_CAN_MspInit+0x1b4>)
 800102e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001032:	6413      	str	r3, [r2, #64]	; 0x40
 8001034:	4b5b      	ldr	r3, [pc, #364]	; (80011a4 <HAL_CAN_MspInit+0x1b4>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800103c:	61bb      	str	r3, [r7, #24]
 800103e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	4b57      	ldr	r3, [pc, #348]	; (80011a4 <HAL_CAN_MspInit+0x1b4>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	4a56      	ldr	r2, [pc, #344]	; (80011a4 <HAL_CAN_MspInit+0x1b4>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6313      	str	r3, [r2, #48]	; 0x30
 8001050:	4b54      	ldr	r3, [pc, #336]	; (80011a4 <HAL_CAN_MspInit+0x1b4>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800105c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106a:	2303      	movs	r3, #3
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800106e:	2309      	movs	r3, #9
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4619      	mov	r1, r3
 8001078:	484b      	ldr	r0, [pc, #300]	; (80011a8 <HAL_CAN_MspInit+0x1b8>)
 800107a:	f001 fab7 	bl	80025ec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2013      	movs	r0, #19
 8001084:	f001 fa6d 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001088:	2013      	movs	r0, #19
 800108a:	f001 fa86 	bl	800259a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2014      	movs	r0, #20
 8001094:	f001 fa65 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001098:	2014      	movs	r0, #20
 800109a:	f001 fa7e 	bl	800259a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2015      	movs	r0, #21
 80010a4:	f001 fa5d 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80010a8:	2015      	movs	r0, #21
 80010aa:	f001 fa76 	bl	800259a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2016      	movs	r0, #22
 80010b4:	f001 fa55 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80010b8:	2016      	movs	r0, #22
 80010ba:	f001 fa6e 	bl	800259a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80010be:	e068      	b.n	8001192 <HAL_CAN_MspInit+0x1a2>
  else if(hcan->Instance==CAN2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a39      	ldr	r2, [pc, #228]	; (80011ac <HAL_CAN_MspInit+0x1bc>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d163      	bne.n	8001192 <HAL_CAN_MspInit+0x1a2>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b35      	ldr	r3, [pc, #212]	; (80011a4 <HAL_CAN_MspInit+0x1b4>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a34      	ldr	r2, [pc, #208]	; (80011a4 <HAL_CAN_MspInit+0x1b4>)
 80010d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b32      	ldr	r3, [pc, #200]	; (80011a4 <HAL_CAN_MspInit+0x1b4>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80010e6:	4b2e      	ldr	r3, [pc, #184]	; (80011a0 <HAL_CAN_MspInit+0x1b0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	4a2c      	ldr	r2, [pc, #176]	; (80011a0 <HAL_CAN_MspInit+0x1b0>)
 80010ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <HAL_CAN_MspInit+0x1b0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d10d      	bne.n	8001114 <HAL_CAN_MspInit+0x124>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	4b29      	ldr	r3, [pc, #164]	; (80011a4 <HAL_CAN_MspInit+0x1b4>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	4a28      	ldr	r2, [pc, #160]	; (80011a4 <HAL_CAN_MspInit+0x1b4>)
 8001102:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001106:	6413      	str	r3, [r2, #64]	; 0x40
 8001108:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <HAL_CAN_MspInit+0x1b4>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <HAL_CAN_MspInit+0x1b4>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	4a21      	ldr	r2, [pc, #132]	; (80011a4 <HAL_CAN_MspInit+0x1b4>)
 800111e:	f043 0302 	orr.w	r3, r3, #2
 8001122:	6313      	str	r3, [r2, #48]	; 0x30
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <HAL_CAN_MspInit+0x1b4>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001130:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001142:	2309      	movs	r3, #9
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	4619      	mov	r1, r3
 800114c:	4818      	ldr	r0, [pc, #96]	; (80011b0 <HAL_CAN_MspInit+0x1c0>)
 800114e:	f001 fa4d 	bl	80025ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	203f      	movs	r0, #63	; 0x3f
 8001158:	f001 fa03 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800115c:	203f      	movs	r0, #63	; 0x3f
 800115e:	f001 fa1c 	bl	800259a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	2040      	movs	r0, #64	; 0x40
 8001168:	f001 f9fb 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800116c:	2040      	movs	r0, #64	; 0x40
 800116e:	f001 fa14 	bl	800259a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	2041      	movs	r0, #65	; 0x41
 8001178:	f001 f9f3 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800117c:	2041      	movs	r0, #65	; 0x41
 800117e:	f001 fa0c 	bl	800259a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	2042      	movs	r0, #66	; 0x42
 8001188:	f001 f9eb 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 800118c:	2042      	movs	r0, #66	; 0x42
 800118e:	f001 fa04 	bl	800259a <HAL_NVIC_EnableIRQ>
}
 8001192:	bf00      	nop
 8001194:	3730      	adds	r7, #48	; 0x30
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40006400 	.word	0x40006400
 80011a0:	200000e8 	.word	0x200000e8
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020000 	.word	0x40020000
 80011ac:	40006800 	.word	0x40006800
 80011b0:	40020400 	.word	0x40020400

080011b4 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a29      	ldr	r2, [pc, #164]	; (8001268 <HAL_CAN_MspDeInit+0xb4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d120      	bne.n	8001208 <HAL_CAN_MspDeInit+0x54>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_CAN1_CLK_ENABLED--;
 80011c6:	4b29      	ldr	r3, [pc, #164]	; (800126c <HAL_CAN_MspDeInit+0xb8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	4a27      	ldr	r2, [pc, #156]	; (800126c <HAL_CAN_MspDeInit+0xb8>)
 80011ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==0){
 80011d0:	4b26      	ldr	r3, [pc, #152]	; (800126c <HAL_CAN_MspDeInit+0xb8>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d105      	bne.n	80011e4 <HAL_CAN_MspDeInit+0x30>
      __HAL_RCC_CAN1_CLK_DISABLE();
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <HAL_CAN_MspDeInit+0xbc>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	4a24      	ldr	r2, [pc, #144]	; (8001270 <HAL_CAN_MspDeInit+0xbc>)
 80011de:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80011e2:	6413      	str	r3, [r2, #64]	; 0x40

    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 80011e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80011e8:	4822      	ldr	r0, [pc, #136]	; (8001274 <HAL_CAN_MspDeInit+0xc0>)
 80011ea:	f001 fb9b 	bl	8002924 <HAL_GPIO_DeInit>

    /* CAN1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(CAN1_TX_IRQn);
 80011ee:	2013      	movs	r0, #19
 80011f0:	f001 f9e1 	bl	80025b6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 80011f4:	2014      	movs	r0, #20
 80011f6:	f001 f9de 	bl	80025b6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
 80011fa:	2015      	movs	r0, #21
 80011fc:	f001 f9db 	bl	80025b6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_SCE_IRQn);
 8001200:	2016      	movs	r0, #22
 8001202:	f001 f9d8 	bl	80025b6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN2_MspDeInit 1 */

  /* USER CODE END CAN2_MspDeInit 1 */
  }

}
 8001206:	e02a      	b.n	800125e <HAL_CAN_MspDeInit+0xaa>
  else if(hcan->Instance==CAN2)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a1a      	ldr	r2, [pc, #104]	; (8001278 <HAL_CAN_MspDeInit+0xc4>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d125      	bne.n	800125e <HAL_CAN_MspDeInit+0xaa>
    __HAL_RCC_CAN2_CLK_DISABLE();
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <HAL_CAN_MspDeInit+0xbc>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	4a16      	ldr	r2, [pc, #88]	; (8001270 <HAL_CAN_MspDeInit+0xbc>)
 8001218:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_RCC_CAN1_CLK_ENABLED--;
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <HAL_CAN_MspDeInit+0xb8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	3b01      	subs	r3, #1
 8001224:	4a11      	ldr	r2, [pc, #68]	; (800126c <HAL_CAN_MspDeInit+0xb8>)
 8001226:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==0){
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <HAL_CAN_MspDeInit+0xb8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d105      	bne.n	800123c <HAL_CAN_MspDeInit+0x88>
      __HAL_RCC_CAN1_CLK_DISABLE();
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <HAL_CAN_MspDeInit+0xbc>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <HAL_CAN_MspDeInit+0xbc>)
 8001236:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800123a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13);
 800123c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001240:	480e      	ldr	r0, [pc, #56]	; (800127c <HAL_CAN_MspDeInit+0xc8>)
 8001242:	f001 fb6f 	bl	8002924 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(CAN2_TX_IRQn);
 8001246:	203f      	movs	r0, #63	; 0x3f
 8001248:	f001 f9b5 	bl	80025b6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN2_RX0_IRQn);
 800124c:	2040      	movs	r0, #64	; 0x40
 800124e:	f001 f9b2 	bl	80025b6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN2_RX1_IRQn);
 8001252:	2041      	movs	r0, #65	; 0x41
 8001254:	f001 f9af 	bl	80025b6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN2_SCE_IRQn);
 8001258:	2042      	movs	r0, #66	; 0x42
 800125a:	f001 f9ac 	bl	80025b6 <HAL_NVIC_DisableIRQ>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40006400 	.word	0x40006400
 800126c:	200000e8 	.word	0x200000e8
 8001270:	40023800 	.word	0x40023800
 8001274:	40020000 	.word	0x40020000
 8001278:	40006800 	.word	0x40006800
 800127c:	40020400 	.word	0x40020400

08001280 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a19      	ldr	r2, [pc, #100]	; (8001304 <HAL_I2C_MspInit+0x84>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d12c      	bne.n	80012fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <HAL_I2C_MspInit+0x88>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a17      	ldr	r2, [pc, #92]	; (8001308 <HAL_I2C_MspInit+0x88>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_I2C_MspInit+0x88>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80012be:	f44f 7310 	mov.w	r3, #576	; 0x240
 80012c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c4:	2312      	movs	r3, #18
 80012c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012d0:	2304      	movs	r3, #4
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	480c      	ldr	r0, [pc, #48]	; (800130c <HAL_I2C_MspInit+0x8c>)
 80012dc:	f001 f986 	bl	80025ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <HAL_I2C_MspInit+0x88>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	4a07      	ldr	r2, [pc, #28]	; (8001308 <HAL_I2C_MspInit+0x88>)
 80012ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ee:	6413      	str	r3, [r2, #64]	; 0x40
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <HAL_I2C_MspInit+0x88>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012fc:	bf00      	nop
 80012fe:	3728      	adds	r7, #40	; 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40005400 	.word	0x40005400
 8001308:	40023800 	.word	0x40023800
 800130c:	40020400 	.word	0x40020400

08001310 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a19      	ldr	r2, [pc, #100]	; (8001394 <HAL_SPI_MspInit+0x84>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d12b      	bne.n	800138a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <HAL_SPI_MspInit+0x88>)
 800133c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001340:	6453      	str	r3, [r2, #68]	; 0x44
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a10      	ldr	r2, [pc, #64]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_SPI_MspInit+0x88>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800136a:	23e0      	movs	r3, #224	; 0xe0
 800136c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800137a:	2305      	movs	r3, #5
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <HAL_SPI_MspInit+0x8c>)
 8001386:	f001 f931 	bl	80025ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	; 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40013000 	.word	0x40013000
 8001398:	40023800 	.word	0x40023800
 800139c:	40020000 	.word	0x40020000

080013a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <NMI_Handler+0x4>

080013a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <HardFault_Handler+0x4>

080013ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <MemManage_Handler+0x4>

080013b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <BusFault_Handler+0x4>

080013b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <UsageFault_Handler+0x4>

080013be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ec:	f000 f8ea 	bl	80015c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <WWDG_IRQHandler+0x10>)
 80013fa:	f002 fa5a 	bl	80038b2 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000750 	.word	0x20000750

08001408 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <CAN1_TX_IRQHandler+0x10>)
 800140e:	f000 fd97 	bl	8001f40 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200007c0 	.word	0x200007c0

0800141c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <CAN1_RX0_IRQHandler+0x10>)
 8001422:	f000 fd8d 	bl	8001f40 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200007c0 	.word	0x200007c0

08001430 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <CAN1_RX1_IRQHandler+0x10>)
 8001436:	f000 fd83 	bl	8001f40 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200007c0 	.word	0x200007c0

08001444 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <CAN1_SCE_IRQHandler+0x10>)
 800144a:	f000 fd79 	bl	8001f40 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200007c0 	.word	0x200007c0

08001458 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <CAN2_TX_IRQHandler+0x10>)
 800145e:	f000 fd6f 	bl	8001f40 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000728 	.word	0x20000728

0800146c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <CAN2_RX0_IRQHandler+0x10>)
 8001472:	f000 fd65 	bl	8001f40 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000728 	.word	0x20000728

08001480 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <CAN2_RX1_IRQHandler+0x10>)
 8001486:	f000 fd5b 	bl	8001f40 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000728 	.word	0x20000728

08001494 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <CAN2_SCE_IRQHandler+0x10>)
 800149a:	f000 fd51 	bl	8001f40 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000728 	.word	0x20000728

080014a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <SystemInit+0x20>)
 80014ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014b2:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <SystemInit+0x20>)
 80014b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001504 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d0:	480d      	ldr	r0, [pc, #52]	; (8001508 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014d2:	490e      	ldr	r1, [pc, #56]	; (800150c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014d4:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d8:	e002      	b.n	80014e0 <LoopCopyDataInit>

080014da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014de:	3304      	adds	r3, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e4:	d3f9      	bcc.n	80014da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e6:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014e8:	4c0b      	ldr	r4, [pc, #44]	; (8001518 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ec:	e001      	b.n	80014f2 <LoopFillZerobss>

080014ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f0:	3204      	adds	r2, #4

080014f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f4:	d3fb      	bcc.n	80014ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014f6:	f7ff ffd7 	bl	80014a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fa:	f002 fa03 	bl	8003904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fe:	f7ff f983 	bl	8000808 <main>
  bx  lr    
 8001502:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001504:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800150c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001510:	0800399c 	.word	0x0800399c
  ldr r2, =_sbss
 8001514:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001518:	200007ec 	.word	0x200007ec

0800151c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC_IRQHandler>
	...

08001520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <HAL_Init+0x40>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0d      	ldr	r2, [pc, #52]	; (8001560 <HAL_Init+0x40>)
 800152a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800152e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_Init+0x40>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <HAL_Init+0x40>)
 8001536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800153a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <HAL_Init+0x40>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a07      	ldr	r2, [pc, #28]	; (8001560 <HAL_Init+0x40>)
 8001542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001546:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001548:	2003      	movs	r0, #3
 800154a:	f000 ffff 	bl	800254c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154e:	2000      	movs	r0, #0
 8001550:	f000 f808 	bl	8001564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001554:	f7ff fd24 	bl	8000fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40023c00 	.word	0x40023c00

08001564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_InitTick+0x54>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_InitTick+0x58>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	fbb3 f3f1 	udiv	r3, r3, r1
 800157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f001 f825 	bl	80025d2 <HAL_SYSTICK_Config>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e00e      	b.n	80015b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b0f      	cmp	r3, #15
 8001596:	d80a      	bhi.n	80015ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001598:	2200      	movs	r2, #0
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	f000 ffdf 	bl	8002562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a4:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <HAL_InitTick+0x5c>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e000      	b.n	80015b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000004 	.word	0x20000004
 80015bc:	2000000c 	.word	0x2000000c
 80015c0:	20000008 	.word	0x20000008

080015c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_IncTick+0x20>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_IncTick+0x24>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <HAL_IncTick+0x24>)
 80015d6:	6013      	str	r3, [r2, #0]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	2000000c 	.word	0x2000000c
 80015e8:	200007e8 	.word	0x200007e8

080015ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return uwTick;
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_GetTick+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	200007e8 	.word	0x200007e8

08001604 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e0ed      	b.n	80017f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3020 	ldrb.w	r3, [r3, #32]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fce4 	bl	8000ff0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0201 	orr.w	r2, r2, #1
 8001636:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001638:	f7ff ffd8 	bl	80015ec <HAL_GetTick>
 800163c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800163e:	e012      	b.n	8001666 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001640:	f7ff ffd4 	bl	80015ec <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b0a      	cmp	r3, #10
 800164c:	d90b      	bls.n	8001666 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2205      	movs	r2, #5
 800165e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e0c5      	b.n	80017f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0e5      	beq.n	8001640 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0202 	bic.w	r2, r2, #2
 8001682:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001684:	f7ff ffb2 	bl	80015ec <HAL_GetTick>
 8001688:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800168a:	e012      	b.n	80016b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800168c:	f7ff ffae 	bl	80015ec <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b0a      	cmp	r3, #10
 8001698:	d90b      	bls.n	80016b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2205      	movs	r2, #5
 80016aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e09f      	b.n	80017f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1e5      	bne.n	800168c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7e1b      	ldrb	r3, [r3, #24]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d108      	bne.n	80016da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	e007      	b.n	80016ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	7e5b      	ldrb	r3, [r3, #25]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d108      	bne.n	8001704 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	e007      	b.n	8001714 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001712:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7e9b      	ldrb	r3, [r3, #26]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d108      	bne.n	800172e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0220 	orr.w	r2, r2, #32
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	e007      	b.n	800173e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0220 	bic.w	r2, r2, #32
 800173c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	7edb      	ldrb	r3, [r3, #27]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d108      	bne.n	8001758 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0210 	bic.w	r2, r2, #16
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	e007      	b.n	8001768 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0210 	orr.w	r2, r2, #16
 8001766:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7f1b      	ldrb	r3, [r3, #28]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d108      	bne.n	8001782 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0208 	orr.w	r2, r2, #8
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	e007      	b.n	8001792 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0208 	bic.w	r2, r2, #8
 8001790:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	7f5b      	ldrb	r3, [r3, #29]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d108      	bne.n	80017ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f042 0204 	orr.w	r2, r2, #4
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	e007      	b.n	80017bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0204 	bic.w	r2, r2, #4
 80017ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	ea42 0103 	orr.w	r1, r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	1e5a      	subs	r2, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e015      	b.n	8001838 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 f93b 	bl	8001a88 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff fcce 	bl	80011b4 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001826:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001840:	b480      	push	{r7}
 8001842:	b087      	sub	sp, #28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001856:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001858:	7cfb      	ldrb	r3, [r7, #19]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d003      	beq.n	8001866 <HAL_CAN_ConfigFilter+0x26>
 800185e:	7cfb      	ldrb	r3, [r7, #19]
 8001860:	2b02      	cmp	r3, #2
 8001862:	f040 80be 	bne.w	80019e2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001866:	4b65      	ldr	r3, [pc, #404]	; (80019fc <HAL_CAN_ConfigFilter+0x1bc>)
 8001868:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001870:	f043 0201 	orr.w	r2, r3, #1
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001880:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	021b      	lsls	r3, r3, #8
 8001896:	431a      	orrs	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	f003 031f 	and.w	r3, r3, #31
 80018a6:	2201      	movs	r2, #1
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	401a      	ands	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d123      	bne.n	8001910 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	401a      	ands	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018ea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	3248      	adds	r2, #72	; 0x48
 80018f0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001904:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001906:	6979      	ldr	r1, [r7, #20]
 8001908:	3348      	adds	r3, #72	; 0x48
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	440b      	add	r3, r1
 800190e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d122      	bne.n	800195e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	431a      	orrs	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001938:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3248      	adds	r2, #72	; 0x48
 800193e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001952:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001954:	6979      	ldr	r1, [r7, #20]
 8001956:	3348      	adds	r3, #72	; 0x48
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	440b      	add	r3, r1
 800195c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d109      	bne.n	800197a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	43db      	mvns	r3, r3
 8001970:	401a      	ands	r2, r3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001978:	e007      	b.n	800198a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	431a      	orrs	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d109      	bne.n	80019a6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	43db      	mvns	r3, r3
 800199c:	401a      	ands	r2, r3
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80019a4:	e007      	b.n	80019b6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	431a      	orrs	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d107      	bne.n	80019ce <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019d4:	f023 0201 	bic.w	r2, r3, #1
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	e006      	b.n	80019f0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
  }
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	40006400 	.word	0x40006400

08001a00 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d12e      	bne.n	8001a72 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2202      	movs	r2, #2
 8001a18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0201 	bic.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a2c:	f7ff fdde 	bl	80015ec <HAL_GetTick>
 8001a30:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a32:	e012      	b.n	8001a5a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a34:	f7ff fdda 	bl	80015ec <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b0a      	cmp	r3, #10
 8001a40:	d90b      	bls.n	8001a5a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2205      	movs	r2, #5
 8001a52:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e012      	b.n	8001a80 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1e5      	bne.n	8001a34 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e006      	b.n	8001a80 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
  }
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d133      	bne.n	8001b04 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0201 	orr.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001aac:	f7ff fd9e 	bl	80015ec <HAL_GetTick>
 8001ab0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ab2:	e012      	b.n	8001ada <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ab4:	f7ff fd9a 	bl	80015ec <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b0a      	cmp	r3, #10
 8001ac0:	d90b      	bls.n	8001ada <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2205      	movs	r2, #5
 8001ad2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e01b      	b.n	8001b12 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0e5      	beq.n	8001ab4 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0202 	bic.w	r2, r2, #2
 8001af6:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	e006      	b.n	8001b12 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
  }
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b089      	sub	sp, #36	; 0x24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b38:	7ffb      	ldrb	r3, [r7, #31]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d003      	beq.n	8001b46 <HAL_CAN_AddTxMessage+0x2c>
 8001b3e:	7ffb      	ldrb	r3, [r7, #31]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	f040 80b8 	bne.w	8001cb6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10a      	bne.n	8001b66 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d105      	bne.n	8001b66 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80a0 	beq.w	8001ca6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	0e1b      	lsrs	r3, r3, #24
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d907      	bls.n	8001b86 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e09e      	b.n	8001cc4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001b86:	2201      	movs	r2, #1
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10d      	bne.n	8001bb4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ba2:	68f9      	ldr	r1, [r7, #12]
 8001ba4:	6809      	ldr	r1, [r1, #0]
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3318      	adds	r3, #24
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	440b      	add	r3, r1
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	e00f      	b.n	8001bd4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bbe:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bc4:	68f9      	ldr	r1, [r7, #12]
 8001bc6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001bc8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3318      	adds	r3, #24
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	440b      	add	r3, r1
 8001bd2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6819      	ldr	r1, [r3, #0]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	3318      	adds	r3, #24
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	440b      	add	r3, r1
 8001be4:	3304      	adds	r3, #4
 8001be6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	7d1b      	ldrb	r3, [r3, #20]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d111      	bne.n	8001c14 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	3318      	adds	r3, #24
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	6811      	ldr	r1, [r2, #0]
 8001c04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	3318      	adds	r3, #24
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	440b      	add	r3, r1
 8001c10:	3304      	adds	r3, #4
 8001c12:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3307      	adds	r3, #7
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	061a      	lsls	r2, r3, #24
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3306      	adds	r3, #6
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	041b      	lsls	r3, r3, #16
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3305      	adds	r3, #5
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	3204      	adds	r2, #4
 8001c34:	7812      	ldrb	r2, [r2, #0]
 8001c36:	4610      	mov	r0, r2
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	6811      	ldr	r1, [r2, #0]
 8001c3c:	ea43 0200 	orr.w	r2, r3, r0
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	440b      	add	r3, r1
 8001c46:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001c4a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3303      	adds	r3, #3
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	061a      	lsls	r2, r3, #24
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3302      	adds	r3, #2
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	041b      	lsls	r3, r3, #16
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3301      	adds	r3, #1
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	4313      	orrs	r3, r2
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	7812      	ldrb	r2, [r2, #0]
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	6811      	ldr	r1, [r2, #0]
 8001c72:	ea43 0200 	orr.w	r2, r3, r0
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001c80:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3318      	adds	r3, #24
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	4413      	add	r3, r2
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	6811      	ldr	r1, [r2, #0]
 8001c94:	f043 0201 	orr.w	r2, r3, #1
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	3318      	adds	r3, #24
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	440b      	add	r3, r1
 8001ca0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e00e      	b.n	8001cc4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e006      	b.n	8001cc4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
  }
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3724      	adds	r7, #36	; 0x24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ce6:	7dfb      	ldrb	r3, [r7, #23]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d003      	beq.n	8001cf4 <HAL_CAN_GetRxMessage+0x24>
 8001cec:	7dfb      	ldrb	r3, [r7, #23]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	f040 80f3 	bne.w	8001eda <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10e      	bne.n	8001d18 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d116      	bne.n	8001d36 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0e7      	b.n	8001ee8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d107      	bne.n	8001d36 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e0d8      	b.n	8001ee8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	331b      	adds	r3, #27
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	4413      	add	r3, r2
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0204 	and.w	r2, r3, #4
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10c      	bne.n	8001d6e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	331b      	adds	r3, #27
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	4413      	add	r3, r2
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	0d5b      	lsrs	r3, r3, #21
 8001d64:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	e00b      	b.n	8001d86 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	331b      	adds	r3, #27
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	4413      	add	r3, r2
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	08db      	lsrs	r3, r3, #3
 8001d7e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	331b      	adds	r3, #27
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	4413      	add	r3, r2
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0202 	and.w	r2, r3, #2
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	331b      	adds	r3, #27
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	4413      	add	r3, r2
 8001da8:	3304      	adds	r3, #4
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 020f 	and.w	r2, r3, #15
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	331b      	adds	r3, #27
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	0a1b      	lsrs	r3, r3, #8
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	331b      	adds	r3, #27
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3304      	adds	r3, #4
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0c1b      	lsrs	r3, r3, #16
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	0a1a      	lsrs	r2, r3, #8
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	0c1a      	lsrs	r2, r3, #16
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	3302      	adds	r3, #2
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	4413      	add	r3, r2
 8001e38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	0e1a      	lsrs	r2, r3, #24
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	3303      	adds	r3, #3
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0a1a      	lsrs	r2, r3, #8
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	3305      	adds	r3, #5
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	0c1a      	lsrs	r2, r3, #16
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	3306      	adds	r3, #6
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	0e1a      	lsrs	r2, r3, #24
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	3307      	adds	r3, #7
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d108      	bne.n	8001ec6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0220 	orr.w	r2, r2, #32
 8001ec2:	60da      	str	r2, [r3, #12]
 8001ec4:	e007      	b.n	8001ed6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 0220 	orr.w	r2, r2, #32
 8001ed4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e006      	b.n	8001ee8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
  }
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	371c      	adds	r7, #28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f04:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d002      	beq.n	8001f12 <HAL_CAN_ActivateNotification+0x1e>
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d109      	bne.n	8001f26 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6959      	ldr	r1, [r3, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	e006      	b.n	8001f34 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
  }
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d07c      	beq.n	8002080 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d023      	beq.n	8001fd8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2201      	movs	r2, #1
 8001f96:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7fe fb64 	bl	8000670 <HAL_CAN_TxMailbox0CompleteCallback>
 8001fa8:	e016      	b.n	8001fd8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d004      	beq.n	8001fbe <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
 8001fbc:	e00c      	b.n	8001fd8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d004      	beq.n	8001fd2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd0:	e002      	b.n	8001fd8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f96b 	bl	80022ae <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d024      	beq.n	800202c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7fe fb7e 	bl	80006f8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001ffc:	e016      	b.n	800202c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002004:	2b00      	cmp	r3, #0
 8002006:	d004      	beq.n	8002012 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
 8002010:	e00c      	b.n	800202c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002018:	2b00      	cmp	r3, #0
 800201a:	d004      	beq.n	8002026 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
 8002024:	e002      	b.n	800202c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f94b 	bl	80022c2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d024      	beq.n	8002080 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800203e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fb98 	bl	8000780 <HAL_CAN_TxMailbox2CompleteCallback>
 8002050:	e016      	b.n	8002080 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d004      	beq.n	8002066 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
 8002064:	e00c      	b.n	8002080 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d004      	beq.n	800207a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
 8002078:	e002      	b.n	8002080 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f92b 	bl	80022d6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00c      	beq.n	80020a4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f003 0310 	and.w	r3, r3, #16
 8002090:	2b00      	cmp	r3, #0
 8002092:	d007      	beq.n	80020a4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800209a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2210      	movs	r2, #16
 80020a2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00b      	beq.n	80020c6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d006      	beq.n	80020c6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2208      	movs	r2, #8
 80020be:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f912 	bl	80022ea <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d009      	beq.n	80020e4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7fe fa26 	bl	8000530 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00c      	beq.n	8002108 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d007      	beq.n	8002108 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2210      	movs	r2, #16
 8002106:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	f003 0320 	and.w	r3, r3, #32
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00b      	beq.n	800212a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d006      	beq.n	800212a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2208      	movs	r2, #8
 8002122:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f8f4 	bl	8002312 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b00      	cmp	r3, #0
 8002132:	d009      	beq.n	8002148 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d002      	beq.n	8002148 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f8db 	bl	80022fe <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00b      	beq.n	800216a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	2b00      	cmp	r3, #0
 800215a:	d006      	beq.n	800216a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2210      	movs	r2, #16
 8002162:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f8de 	bl	8002326 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00b      	beq.n	800218c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d006      	beq.n	800218c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2208      	movs	r2, #8
 8002184:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f8d7 	bl	800233a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800218c:	6a3b      	ldr	r3, [r7, #32]
 800218e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d07b      	beq.n	800228e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d072      	beq.n	8002286 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021a0:	6a3b      	ldr	r3, [r7, #32]
 80021a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d008      	beq.n	80021bc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d008      	beq.n	80021d8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	f043 0302 	orr.w	r3, r3, #2
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d008      	beq.n	80021f4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	f043 0304 	orr.w	r3, r3, #4
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021f4:	6a3b      	ldr	r3, [r7, #32]
 80021f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d043      	beq.n	8002286 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002204:	2b00      	cmp	r3, #0
 8002206:	d03e      	beq.n	8002286 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800220e:	2b60      	cmp	r3, #96	; 0x60
 8002210:	d02b      	beq.n	800226a <HAL_CAN_IRQHandler+0x32a>
 8002212:	2b60      	cmp	r3, #96	; 0x60
 8002214:	d82e      	bhi.n	8002274 <HAL_CAN_IRQHandler+0x334>
 8002216:	2b50      	cmp	r3, #80	; 0x50
 8002218:	d022      	beq.n	8002260 <HAL_CAN_IRQHandler+0x320>
 800221a:	2b50      	cmp	r3, #80	; 0x50
 800221c:	d82a      	bhi.n	8002274 <HAL_CAN_IRQHandler+0x334>
 800221e:	2b40      	cmp	r3, #64	; 0x40
 8002220:	d019      	beq.n	8002256 <HAL_CAN_IRQHandler+0x316>
 8002222:	2b40      	cmp	r3, #64	; 0x40
 8002224:	d826      	bhi.n	8002274 <HAL_CAN_IRQHandler+0x334>
 8002226:	2b30      	cmp	r3, #48	; 0x30
 8002228:	d010      	beq.n	800224c <HAL_CAN_IRQHandler+0x30c>
 800222a:	2b30      	cmp	r3, #48	; 0x30
 800222c:	d822      	bhi.n	8002274 <HAL_CAN_IRQHandler+0x334>
 800222e:	2b10      	cmp	r3, #16
 8002230:	d002      	beq.n	8002238 <HAL_CAN_IRQHandler+0x2f8>
 8002232:	2b20      	cmp	r3, #32
 8002234:	d005      	beq.n	8002242 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002236:	e01d      	b.n	8002274 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	f043 0308 	orr.w	r3, r3, #8
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002240:	e019      	b.n	8002276 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	f043 0310 	orr.w	r3, r3, #16
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800224a:	e014      	b.n	8002276 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	f043 0320 	orr.w	r3, r3, #32
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002254:	e00f      	b.n	8002276 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800225e:	e00a      	b.n	8002276 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002268:	e005      	b.n	8002276 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002272:	e000      	b.n	8002276 <HAL_CAN_IRQHandler+0x336>
            break;
 8002274:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	699a      	ldr	r2, [r3, #24]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002284:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2204      	movs	r2, #4
 800228c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f854 	bl	800234e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80022a6:	bf00      	nop
 80022a8:	3728      	adds	r7, #40	; 0x28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002380:	4013      	ands	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800238c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002396:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	60d3      	str	r3, [r2, #12]
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <__NVIC_GetPriorityGrouping+0x18>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	f003 0307 	and.w	r3, r3, #7
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	db0b      	blt.n	80023f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	f003 021f 	and.w	r2, r3, #31
 80023e0:	4907      	ldr	r1, [pc, #28]	; (8002400 <__NVIC_EnableIRQ+0x38>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2001      	movs	r0, #1
 80023ea:	fa00 f202 	lsl.w	r2, r0, r2
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000e100 	.word	0xe000e100

08002404 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	2b00      	cmp	r3, #0
 8002414:	db12      	blt.n	800243c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	f003 021f 	and.w	r2, r3, #31
 800241c:	490a      	ldr	r1, [pc, #40]	; (8002448 <__NVIC_DisableIRQ+0x44>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	2001      	movs	r0, #1
 8002426:	fa00 f202 	lsl.w	r2, r0, r2
 800242a:	3320      	adds	r3, #32
 800242c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002430:	f3bf 8f4f 	dsb	sy
}
 8002434:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002436:	f3bf 8f6f 	isb	sy
}
 800243a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000e100 	.word	0xe000e100

0800244c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	6039      	str	r1, [r7, #0]
 8002456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	2b00      	cmp	r3, #0
 800245e:	db0a      	blt.n	8002476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	490c      	ldr	r1, [pc, #48]	; (8002498 <__NVIC_SetPriority+0x4c>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	0112      	lsls	r2, r2, #4
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	440b      	add	r3, r1
 8002470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002474:	e00a      	b.n	800248c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4908      	ldr	r1, [pc, #32]	; (800249c <__NVIC_SetPriority+0x50>)
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	3b04      	subs	r3, #4
 8002484:	0112      	lsls	r2, r2, #4
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	440b      	add	r3, r1
 800248a:	761a      	strb	r2, [r3, #24]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000e100 	.word	0xe000e100
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f1c3 0307 	rsb	r3, r3, #7
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	bf28      	it	cs
 80024be:	2304      	movcs	r3, #4
 80024c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3304      	adds	r3, #4
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	d902      	bls.n	80024d0 <NVIC_EncodePriority+0x30>
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3b03      	subs	r3, #3
 80024ce:	e000      	b.n	80024d2 <NVIC_EncodePriority+0x32>
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	f04f 32ff 	mov.w	r2, #4294967295
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43da      	mvns	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	401a      	ands	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	fa01 f303 	lsl.w	r3, r1, r3
 80024f2:	43d9      	mvns	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f8:	4313      	orrs	r3, r2
         );
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3724      	adds	r7, #36	; 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002518:	d301      	bcc.n	800251e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800251a:	2301      	movs	r3, #1
 800251c:	e00f      	b.n	800253e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251e:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <SysTick_Config+0x40>)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3b01      	subs	r3, #1
 8002524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002526:	210f      	movs	r1, #15
 8002528:	f04f 30ff 	mov.w	r0, #4294967295
 800252c:	f7ff ff8e 	bl	800244c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <SysTick_Config+0x40>)
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002536:	4b04      	ldr	r3, [pc, #16]	; (8002548 <SysTick_Config+0x40>)
 8002538:	2207      	movs	r2, #7
 800253a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	e000e010 	.word	0xe000e010

0800254c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff ff05 	bl	8002364 <__NVIC_SetPriorityGrouping>
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002562:	b580      	push	{r7, lr}
 8002564:	b086      	sub	sp, #24
 8002566:	af00      	add	r7, sp, #0
 8002568:	4603      	mov	r3, r0
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002574:	f7ff ff1a 	bl	80023ac <__NVIC_GetPriorityGrouping>
 8002578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	6978      	ldr	r0, [r7, #20]
 8002580:	f7ff ff8e 	bl	80024a0 <NVIC_EncodePriority>
 8002584:	4602      	mov	r2, r0
 8002586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff5d 	bl	800244c <__NVIC_SetPriority>
}
 8002592:	bf00      	nop
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	4603      	mov	r3, r0
 80025a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff0d 	bl	80023c8 <__NVIC_EnableIRQ>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	4603      	mov	r3, r0
 80025be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80025c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff1d 	bl	8002404 <__NVIC_DisableIRQ>
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff ff94 	bl	8002508 <SysTick_Config>
 80025e0:	4603      	mov	r3, r0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
	...

080025ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b089      	sub	sp, #36	; 0x24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025fe:	2300      	movs	r3, #0
 8002600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
 8002606:	e16b      	b.n	80028e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002608:	2201      	movs	r2, #1
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	4013      	ands	r3, r2
 800261a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	429a      	cmp	r2, r3
 8002622:	f040 815a 	bne.w	80028da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	2b01      	cmp	r3, #1
 8002630:	d005      	beq.n	800263e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800263a:	2b02      	cmp	r3, #2
 800263c:	d130      	bne.n	80026a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	2203      	movs	r2, #3
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002674:	2201      	movs	r2, #1
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	091b      	lsrs	r3, r3, #4
 800268a:	f003 0201 	and.w	r2, r3, #1
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d017      	beq.n	80026dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	2203      	movs	r2, #3
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d123      	bne.n	8002730 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	08da      	lsrs	r2, r3, #3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3208      	adds	r2, #8
 80026f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	220f      	movs	r2, #15
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	08da      	lsrs	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3208      	adds	r2, #8
 800272a:	69b9      	ldr	r1, [r7, #24]
 800272c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	2203      	movs	r2, #3
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 0203 	and.w	r2, r3, #3
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 80b4 	beq.w	80028da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	4b60      	ldr	r3, [pc, #384]	; (80028f8 <HAL_GPIO_Init+0x30c>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	4a5f      	ldr	r2, [pc, #380]	; (80028f8 <HAL_GPIO_Init+0x30c>)
 800277c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002780:	6453      	str	r3, [r2, #68]	; 0x44
 8002782:	4b5d      	ldr	r3, [pc, #372]	; (80028f8 <HAL_GPIO_Init+0x30c>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800278e:	4a5b      	ldr	r2, [pc, #364]	; (80028fc <HAL_GPIO_Init+0x310>)
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	089b      	lsrs	r3, r3, #2
 8002794:	3302      	adds	r3, #2
 8002796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	220f      	movs	r2, #15
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a52      	ldr	r2, [pc, #328]	; (8002900 <HAL_GPIO_Init+0x314>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d02b      	beq.n	8002812 <HAL_GPIO_Init+0x226>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a51      	ldr	r2, [pc, #324]	; (8002904 <HAL_GPIO_Init+0x318>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d025      	beq.n	800280e <HAL_GPIO_Init+0x222>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a50      	ldr	r2, [pc, #320]	; (8002908 <HAL_GPIO_Init+0x31c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d01f      	beq.n	800280a <HAL_GPIO_Init+0x21e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a4f      	ldr	r2, [pc, #316]	; (800290c <HAL_GPIO_Init+0x320>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d019      	beq.n	8002806 <HAL_GPIO_Init+0x21a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a4e      	ldr	r2, [pc, #312]	; (8002910 <HAL_GPIO_Init+0x324>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d013      	beq.n	8002802 <HAL_GPIO_Init+0x216>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a4d      	ldr	r2, [pc, #308]	; (8002914 <HAL_GPIO_Init+0x328>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d00d      	beq.n	80027fe <HAL_GPIO_Init+0x212>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a4c      	ldr	r2, [pc, #304]	; (8002918 <HAL_GPIO_Init+0x32c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d007      	beq.n	80027fa <HAL_GPIO_Init+0x20e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a4b      	ldr	r2, [pc, #300]	; (800291c <HAL_GPIO_Init+0x330>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d101      	bne.n	80027f6 <HAL_GPIO_Init+0x20a>
 80027f2:	2307      	movs	r3, #7
 80027f4:	e00e      	b.n	8002814 <HAL_GPIO_Init+0x228>
 80027f6:	2308      	movs	r3, #8
 80027f8:	e00c      	b.n	8002814 <HAL_GPIO_Init+0x228>
 80027fa:	2306      	movs	r3, #6
 80027fc:	e00a      	b.n	8002814 <HAL_GPIO_Init+0x228>
 80027fe:	2305      	movs	r3, #5
 8002800:	e008      	b.n	8002814 <HAL_GPIO_Init+0x228>
 8002802:	2304      	movs	r3, #4
 8002804:	e006      	b.n	8002814 <HAL_GPIO_Init+0x228>
 8002806:	2303      	movs	r3, #3
 8002808:	e004      	b.n	8002814 <HAL_GPIO_Init+0x228>
 800280a:	2302      	movs	r3, #2
 800280c:	e002      	b.n	8002814 <HAL_GPIO_Init+0x228>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_GPIO_Init+0x228>
 8002812:	2300      	movs	r3, #0
 8002814:	69fa      	ldr	r2, [r7, #28]
 8002816:	f002 0203 	and.w	r2, r2, #3
 800281a:	0092      	lsls	r2, r2, #2
 800281c:	4093      	lsls	r3, r2
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002824:	4935      	ldr	r1, [pc, #212]	; (80028fc <HAL_GPIO_Init+0x310>)
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	089b      	lsrs	r3, r3, #2
 800282a:	3302      	adds	r3, #2
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002832:	4b3b      	ldr	r3, [pc, #236]	; (8002920 <HAL_GPIO_Init+0x334>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002856:	4a32      	ldr	r2, [pc, #200]	; (8002920 <HAL_GPIO_Init+0x334>)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800285c:	4b30      	ldr	r3, [pc, #192]	; (8002920 <HAL_GPIO_Init+0x334>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002880:	4a27      	ldr	r2, [pc, #156]	; (8002920 <HAL_GPIO_Init+0x334>)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002886:	4b26      	ldr	r3, [pc, #152]	; (8002920 <HAL_GPIO_Init+0x334>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028aa:	4a1d      	ldr	r2, [pc, #116]	; (8002920 <HAL_GPIO_Init+0x334>)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028b0:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <HAL_GPIO_Init+0x334>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028d4:	4a12      	ldr	r2, [pc, #72]	; (8002920 <HAL_GPIO_Init+0x334>)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3301      	adds	r3, #1
 80028de:	61fb      	str	r3, [r7, #28]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	2b0f      	cmp	r3, #15
 80028e4:	f67f ae90 	bls.w	8002608 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	3724      	adds	r7, #36	; 0x24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40013800 	.word	0x40013800
 8002900:	40020000 	.word	0x40020000
 8002904:	40020400 	.word	0x40020400
 8002908:	40020800 	.word	0x40020800
 800290c:	40020c00 	.word	0x40020c00
 8002910:	40021000 	.word	0x40021000
 8002914:	40021400 	.word	0x40021400
 8002918:	40021800 	.word	0x40021800
 800291c:	40021c00 	.word	0x40021c00
 8002920:	40013c00 	.word	0x40013c00

08002924 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002936:	2300      	movs	r3, #0
 8002938:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	e0cd      	b.n	8002adc <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002940:	2201      	movs	r2, #1
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4013      	ands	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	429a      	cmp	r2, r3
 8002958:	f040 80bd 	bne.w	8002ad6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800295c:	4a65      	ldr	r2, [pc, #404]	; (8002af4 <HAL_GPIO_DeInit+0x1d0>)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	089b      	lsrs	r3, r3, #2
 8002962:	3302      	adds	r3, #2
 8002964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002968:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	220f      	movs	r2, #15
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	4013      	ands	r3, r2
 800297c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a5d      	ldr	r2, [pc, #372]	; (8002af8 <HAL_GPIO_DeInit+0x1d4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d02b      	beq.n	80029de <HAL_GPIO_DeInit+0xba>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a5c      	ldr	r2, [pc, #368]	; (8002afc <HAL_GPIO_DeInit+0x1d8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d025      	beq.n	80029da <HAL_GPIO_DeInit+0xb6>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a5b      	ldr	r2, [pc, #364]	; (8002b00 <HAL_GPIO_DeInit+0x1dc>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d01f      	beq.n	80029d6 <HAL_GPIO_DeInit+0xb2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a5a      	ldr	r2, [pc, #360]	; (8002b04 <HAL_GPIO_DeInit+0x1e0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d019      	beq.n	80029d2 <HAL_GPIO_DeInit+0xae>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a59      	ldr	r2, [pc, #356]	; (8002b08 <HAL_GPIO_DeInit+0x1e4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d013      	beq.n	80029ce <HAL_GPIO_DeInit+0xaa>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a58      	ldr	r2, [pc, #352]	; (8002b0c <HAL_GPIO_DeInit+0x1e8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00d      	beq.n	80029ca <HAL_GPIO_DeInit+0xa6>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a57      	ldr	r2, [pc, #348]	; (8002b10 <HAL_GPIO_DeInit+0x1ec>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d007      	beq.n	80029c6 <HAL_GPIO_DeInit+0xa2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a56      	ldr	r2, [pc, #344]	; (8002b14 <HAL_GPIO_DeInit+0x1f0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d101      	bne.n	80029c2 <HAL_GPIO_DeInit+0x9e>
 80029be:	2307      	movs	r3, #7
 80029c0:	e00e      	b.n	80029e0 <HAL_GPIO_DeInit+0xbc>
 80029c2:	2308      	movs	r3, #8
 80029c4:	e00c      	b.n	80029e0 <HAL_GPIO_DeInit+0xbc>
 80029c6:	2306      	movs	r3, #6
 80029c8:	e00a      	b.n	80029e0 <HAL_GPIO_DeInit+0xbc>
 80029ca:	2305      	movs	r3, #5
 80029cc:	e008      	b.n	80029e0 <HAL_GPIO_DeInit+0xbc>
 80029ce:	2304      	movs	r3, #4
 80029d0:	e006      	b.n	80029e0 <HAL_GPIO_DeInit+0xbc>
 80029d2:	2303      	movs	r3, #3
 80029d4:	e004      	b.n	80029e0 <HAL_GPIO_DeInit+0xbc>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e002      	b.n	80029e0 <HAL_GPIO_DeInit+0xbc>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <HAL_GPIO_DeInit+0xbc>
 80029de:	2300      	movs	r3, #0
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	f002 0203 	and.w	r2, r2, #3
 80029e6:	0092      	lsls	r2, r2, #2
 80029e8:	4093      	lsls	r3, r2
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d132      	bne.n	8002a56 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80029f0:	4b49      	ldr	r3, [pc, #292]	; (8002b18 <HAL_GPIO_DeInit+0x1f4>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	4947      	ldr	r1, [pc, #284]	; (8002b18 <HAL_GPIO_DeInit+0x1f4>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80029fe:	4b46      	ldr	r3, [pc, #280]	; (8002b18 <HAL_GPIO_DeInit+0x1f4>)
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	4944      	ldr	r1, [pc, #272]	; (8002b18 <HAL_GPIO_DeInit+0x1f4>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002a0c:	4b42      	ldr	r3, [pc, #264]	; (8002b18 <HAL_GPIO_DeInit+0x1f4>)
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	43db      	mvns	r3, r3
 8002a14:	4940      	ldr	r1, [pc, #256]	; (8002b18 <HAL_GPIO_DeInit+0x1f4>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002a1a:	4b3f      	ldr	r3, [pc, #252]	; (8002b18 <HAL_GPIO_DeInit+0x1f4>)
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	493d      	ldr	r1, [pc, #244]	; (8002b18 <HAL_GPIO_DeInit+0x1f4>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	220f      	movs	r2, #15
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002a38:	4a2e      	ldr	r2, [pc, #184]	; (8002af4 <HAL_GPIO_DeInit+0x1d0>)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	089b      	lsrs	r3, r3, #2
 8002a3e:	3302      	adds	r3, #2
 8002a40:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	43da      	mvns	r2, r3
 8002a48:	482a      	ldr	r0, [pc, #168]	; (8002af4 <HAL_GPIO_DeInit+0x1d0>)
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	089b      	lsrs	r3, r3, #2
 8002a4e:	400a      	ands	r2, r1
 8002a50:	3302      	adds	r3, #2
 8002a52:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	2103      	movs	r1, #3
 8002a60:	fa01 f303 	lsl.w	r3, r1, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	401a      	ands	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	08da      	lsrs	r2, r3, #3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3208      	adds	r2, #8
 8002a74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	220f      	movs	r2, #15
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	08d2      	lsrs	r2, r2, #3
 8002a8c:	4019      	ands	r1, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	3208      	adds	r2, #8
 8002a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	2103      	movs	r1, #3
 8002aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	401a      	ands	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	2103      	movs	r1, #3
 8002aca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	401a      	ands	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2b0f      	cmp	r3, #15
 8002ae0:	f67f af2e 	bls.w	8002940 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	371c      	adds	r7, #28
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40013800 	.word	0x40013800
 8002af8:	40020000 	.word	0x40020000
 8002afc:	40020400 	.word	0x40020400
 8002b00:	40020800 	.word	0x40020800
 8002b04:	40020c00 	.word	0x40020c00
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40021400 	.word	0x40021400
 8002b10:	40021800 	.word	0x40021800
 8002b14:	40021c00 	.word	0x40021c00
 8002b18:	40013c00 	.word	0x40013c00

08002b1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	887b      	ldrh	r3, [r7, #2]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
 8002b38:	e001      	b.n	8002b3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	807b      	strh	r3, [r7, #2]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b5c:	787b      	ldrb	r3, [r7, #1]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b62:	887a      	ldrh	r2, [r7, #2]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b68:	e003      	b.n	8002b72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b6a:	887b      	ldrh	r3, [r7, #2]
 8002b6c:	041a      	lsls	r2, r3, #16
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	619a      	str	r2, [r3, #24]
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b085      	sub	sp, #20
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	460b      	mov	r3, r1
 8002b88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b90:	887a      	ldrh	r2, [r7, #2]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4013      	ands	r3, r2
 8002b96:	041a      	lsls	r2, r3, #16
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	43d9      	mvns	r1, r3
 8002b9c:	887b      	ldrh	r3, [r7, #2]
 8002b9e:	400b      	ands	r3, r1
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	619a      	str	r2, [r3, #24]
}
 8002ba6:	bf00      	nop
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e12b      	b.n	8002e1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fe fb50 	bl	8001280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2224      	movs	r2, #36	; 0x24
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0201 	bic.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c18:	f000 fdae 	bl	8003778 <HAL_RCC_GetPCLK1Freq>
 8002c1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4a81      	ldr	r2, [pc, #516]	; (8002e28 <HAL_I2C_Init+0x274>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d807      	bhi.n	8002c38 <HAL_I2C_Init+0x84>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4a80      	ldr	r2, [pc, #512]	; (8002e2c <HAL_I2C_Init+0x278>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	bf94      	ite	ls
 8002c30:	2301      	movls	r3, #1
 8002c32:	2300      	movhi	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	e006      	b.n	8002c46 <HAL_I2C_Init+0x92>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4a7d      	ldr	r2, [pc, #500]	; (8002e30 <HAL_I2C_Init+0x27c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	bf94      	ite	ls
 8002c40:	2301      	movls	r3, #1
 8002c42:	2300      	movhi	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0e7      	b.n	8002e1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4a78      	ldr	r2, [pc, #480]	; (8002e34 <HAL_I2C_Init+0x280>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	0c9b      	lsrs	r3, r3, #18
 8002c58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	4a6a      	ldr	r2, [pc, #424]	; (8002e28 <HAL_I2C_Init+0x274>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d802      	bhi.n	8002c88 <HAL_I2C_Init+0xd4>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	3301      	adds	r3, #1
 8002c86:	e009      	b.n	8002c9c <HAL_I2C_Init+0xe8>
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c8e:	fb02 f303 	mul.w	r3, r2, r3
 8002c92:	4a69      	ldr	r2, [pc, #420]	; (8002e38 <HAL_I2C_Init+0x284>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	099b      	lsrs	r3, r3, #6
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	495c      	ldr	r1, [pc, #368]	; (8002e28 <HAL_I2C_Init+0x274>)
 8002cb8:	428b      	cmp	r3, r1
 8002cba:	d819      	bhi.n	8002cf0 <HAL_I2C_Init+0x13c>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1e59      	subs	r1, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cca:	1c59      	adds	r1, r3, #1
 8002ccc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cd0:	400b      	ands	r3, r1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_I2C_Init+0x138>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	1e59      	subs	r1, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cea:	e051      	b.n	8002d90 <HAL_I2C_Init+0x1dc>
 8002cec:	2304      	movs	r3, #4
 8002cee:	e04f      	b.n	8002d90 <HAL_I2C_Init+0x1dc>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d111      	bne.n	8002d1c <HAL_I2C_Init+0x168>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1e58      	subs	r0, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6859      	ldr	r1, [r3, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	440b      	add	r3, r1
 8002d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	e012      	b.n	8002d42 <HAL_I2C_Init+0x18e>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	1e58      	subs	r0, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	0099      	lsls	r1, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d32:	3301      	adds	r3, #1
 8002d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	2300      	movne	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_I2C_Init+0x196>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e022      	b.n	8002d90 <HAL_I2C_Init+0x1dc>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10e      	bne.n	8002d70 <HAL_I2C_Init+0x1bc>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	1e58      	subs	r0, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6859      	ldr	r1, [r3, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	440b      	add	r3, r1
 8002d60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d64:	3301      	adds	r3, #1
 8002d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d6e:	e00f      	b.n	8002d90 <HAL_I2C_Init+0x1dc>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1e58      	subs	r0, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6859      	ldr	r1, [r3, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	0099      	lsls	r1, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d86:	3301      	adds	r3, #1
 8002d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	6809      	ldr	r1, [r1, #0]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69da      	ldr	r2, [r3, #28]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6911      	ldr	r1, [r2, #16]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68d2      	ldr	r2, [r2, #12]
 8002dca:	4311      	orrs	r1, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695a      	ldr	r2, [r3, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	000186a0 	.word	0x000186a0
 8002e2c:	001e847f 	.word	0x001e847f
 8002e30:	003d08ff 	.word	0x003d08ff
 8002e34:	431bde83 	.word	0x431bde83
 8002e38:	10624dd3 	.word	0x10624dd3

08002e3c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e034      	b.n	8002eb8 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002e56:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f245 5255 	movw	r2, #21845	; 0x5555
 8002e60:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6852      	ldr	r2, [r2, #4]
 8002e6a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6892      	ldr	r2, [r2, #8]
 8002e74:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002e76:	f7fe fbb9 	bl	80015ec <HAL_GetTick>
 8002e7a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002e7c:	e00f      	b.n	8002e9e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002e7e:	f7fe fbb5 	bl	80015ec <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b31      	cmp	r3, #49	; 0x31
 8002e8a:	d908      	bls.n	8002e9e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e00c      	b.n	8002eb8 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0303 	and.w	r3, r3, #3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1e8      	bne.n	8002e7e <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002eb4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002ed0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e264      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d075      	beq.n	8002fea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002efe:	4ba3      	ldr	r3, [pc, #652]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d00c      	beq.n	8002f24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f0a:	4ba0      	ldr	r3, [pc, #640]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d112      	bne.n	8002f3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f16:	4b9d      	ldr	r3, [pc, #628]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f22:	d10b      	bne.n	8002f3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f24:	4b99      	ldr	r3, [pc, #612]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d05b      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x108>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d157      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e23f      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f44:	d106      	bne.n	8002f54 <HAL_RCC_OscConfig+0x74>
 8002f46:	4b91      	ldr	r3, [pc, #580]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a90      	ldr	r2, [pc, #576]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	e01d      	b.n	8002f90 <HAL_RCC_OscConfig+0xb0>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f5c:	d10c      	bne.n	8002f78 <HAL_RCC_OscConfig+0x98>
 8002f5e:	4b8b      	ldr	r3, [pc, #556]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a8a      	ldr	r2, [pc, #552]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	4b88      	ldr	r3, [pc, #544]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a87      	ldr	r2, [pc, #540]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e00b      	b.n	8002f90 <HAL_RCC_OscConfig+0xb0>
 8002f78:	4b84      	ldr	r3, [pc, #528]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a83      	ldr	r2, [pc, #524]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	4b81      	ldr	r3, [pc, #516]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a80      	ldr	r2, [pc, #512]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d013      	beq.n	8002fc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7fe fb28 	bl	80015ec <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa0:	f7fe fb24 	bl	80015ec <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	; 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e204      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb2:	4b76      	ldr	r3, [pc, #472]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0xc0>
 8002fbe:	e014      	b.n	8002fea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fb14 	bl	80015ec <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc8:	f7fe fb10 	bl	80015ec <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b64      	cmp	r3, #100	; 0x64
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e1f0      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fda:	4b6c      	ldr	r3, [pc, #432]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0xe8>
 8002fe6:	e000      	b.n	8002fea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d063      	beq.n	80030be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ff6:	4b65      	ldr	r3, [pc, #404]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00b      	beq.n	800301a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003002:	4b62      	ldr	r3, [pc, #392]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800300a:	2b08      	cmp	r3, #8
 800300c:	d11c      	bne.n	8003048 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800300e:	4b5f      	ldr	r3, [pc, #380]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d116      	bne.n	8003048 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301a:	4b5c      	ldr	r3, [pc, #368]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_RCC_OscConfig+0x152>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d001      	beq.n	8003032 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e1c4      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003032:	4b56      	ldr	r3, [pc, #344]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4952      	ldr	r1, [pc, #328]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003046:	e03a      	b.n	80030be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d020      	beq.n	8003092 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003050:	4b4f      	ldr	r3, [pc, #316]	; (8003190 <HAL_RCC_OscConfig+0x2b0>)
 8003052:	2201      	movs	r2, #1
 8003054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003056:	f7fe fac9 	bl	80015ec <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800305e:	f7fe fac5 	bl	80015ec <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e1a5      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003070:	4b46      	ldr	r3, [pc, #280]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f0      	beq.n	800305e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307c:	4b43      	ldr	r3, [pc, #268]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4940      	ldr	r1, [pc, #256]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 800308c:	4313      	orrs	r3, r2
 800308e:	600b      	str	r3, [r1, #0]
 8003090:	e015      	b.n	80030be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003092:	4b3f      	ldr	r3, [pc, #252]	; (8003190 <HAL_RCC_OscConfig+0x2b0>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe faa8 	bl	80015ec <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a0:	f7fe faa4 	bl	80015ec <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e184      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b2:	4b36      	ldr	r3, [pc, #216]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d030      	beq.n	800312c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d016      	beq.n	8003100 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d2:	4b30      	ldr	r3, [pc, #192]	; (8003194 <HAL_RCC_OscConfig+0x2b4>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d8:	f7fe fa88 	bl	80015ec <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e0:	f7fe fa84 	bl	80015ec <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e164      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f2:	4b26      	ldr	r3, [pc, #152]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0x200>
 80030fe:	e015      	b.n	800312c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003100:	4b24      	ldr	r3, [pc, #144]	; (8003194 <HAL_RCC_OscConfig+0x2b4>)
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003106:	f7fe fa71 	bl	80015ec <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800310e:	f7fe fa6d 	bl	80015ec <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e14d      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003120:	4b1a      	ldr	r3, [pc, #104]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f0      	bne.n	800310e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80a0 	beq.w	800327a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313a:	2300      	movs	r3, #0
 800313c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313e:	4b13      	ldr	r3, [pc, #76]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10f      	bne.n	800316a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	4b0f      	ldr	r3, [pc, #60]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	4a0e      	ldr	r2, [pc, #56]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003158:	6413      	str	r3, [r2, #64]	; 0x40
 800315a:	4b0c      	ldr	r3, [pc, #48]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003166:	2301      	movs	r3, #1
 8003168:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316a:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_RCC_OscConfig+0x2b8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003172:	2b00      	cmp	r3, #0
 8003174:	d121      	bne.n	80031ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003176:	4b08      	ldr	r3, [pc, #32]	; (8003198 <HAL_RCC_OscConfig+0x2b8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a07      	ldr	r2, [pc, #28]	; (8003198 <HAL_RCC_OscConfig+0x2b8>)
 800317c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003182:	f7fe fa33 	bl	80015ec <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003188:	e011      	b.n	80031ae <HAL_RCC_OscConfig+0x2ce>
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	42470000 	.word	0x42470000
 8003194:	42470e80 	.word	0x42470e80
 8003198:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319c:	f7fe fa26 	bl	80015ec <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e106      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ae:	4b85      	ldr	r3, [pc, #532]	; (80033c4 <HAL_RCC_OscConfig+0x4e4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d106      	bne.n	80031d0 <HAL_RCC_OscConfig+0x2f0>
 80031c2:	4b81      	ldr	r3, [pc, #516]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	4a80      	ldr	r2, [pc, #512]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6713      	str	r3, [r2, #112]	; 0x70
 80031ce:	e01c      	b.n	800320a <HAL_RCC_OscConfig+0x32a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b05      	cmp	r3, #5
 80031d6:	d10c      	bne.n	80031f2 <HAL_RCC_OscConfig+0x312>
 80031d8:	4b7b      	ldr	r3, [pc, #492]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 80031da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031dc:	4a7a      	ldr	r2, [pc, #488]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 80031de:	f043 0304 	orr.w	r3, r3, #4
 80031e2:	6713      	str	r3, [r2, #112]	; 0x70
 80031e4:	4b78      	ldr	r3, [pc, #480]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e8:	4a77      	ldr	r2, [pc, #476]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6713      	str	r3, [r2, #112]	; 0x70
 80031f0:	e00b      	b.n	800320a <HAL_RCC_OscConfig+0x32a>
 80031f2:	4b75      	ldr	r3, [pc, #468]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f6:	4a74      	ldr	r2, [pc, #464]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 80031f8:	f023 0301 	bic.w	r3, r3, #1
 80031fc:	6713      	str	r3, [r2, #112]	; 0x70
 80031fe:	4b72      	ldr	r3, [pc, #456]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	4a71      	ldr	r2, [pc, #452]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 8003204:	f023 0304 	bic.w	r3, r3, #4
 8003208:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d015      	beq.n	800323e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003212:	f7fe f9eb 	bl	80015ec <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003218:	e00a      	b.n	8003230 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800321a:	f7fe f9e7 	bl	80015ec <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	; 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e0c5      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003230:	4b65      	ldr	r3, [pc, #404]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 8003232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0ee      	beq.n	800321a <HAL_RCC_OscConfig+0x33a>
 800323c:	e014      	b.n	8003268 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323e:	f7fe f9d5 	bl	80015ec <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003244:	e00a      	b.n	800325c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003246:	f7fe f9d1 	bl	80015ec <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	f241 3288 	movw	r2, #5000	; 0x1388
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e0af      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325c:	4b5a      	ldr	r3, [pc, #360]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1ee      	bne.n	8003246 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003268:	7dfb      	ldrb	r3, [r7, #23]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d105      	bne.n	800327a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326e:	4b56      	ldr	r3, [pc, #344]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	4a55      	ldr	r2, [pc, #340]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 8003274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003278:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 809b 	beq.w	80033ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003284:	4b50      	ldr	r3, [pc, #320]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b08      	cmp	r3, #8
 800328e:	d05c      	beq.n	800334a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d141      	bne.n	800331c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003298:	4b4c      	ldr	r3, [pc, #304]	; (80033cc <HAL_RCC_OscConfig+0x4ec>)
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329e:	f7fe f9a5 	bl	80015ec <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a6:	f7fe f9a1 	bl	80015ec <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e081      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b8:	4b43      	ldr	r3, [pc, #268]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1f0      	bne.n	80032a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69da      	ldr	r2, [r3, #28]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	019b      	lsls	r3, r3, #6
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032da:	085b      	lsrs	r3, r3, #1
 80032dc:	3b01      	subs	r3, #1
 80032de:	041b      	lsls	r3, r3, #16
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	061b      	lsls	r3, r3, #24
 80032e8:	4937      	ldr	r1, [pc, #220]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ee:	4b37      	ldr	r3, [pc, #220]	; (80033cc <HAL_RCC_OscConfig+0x4ec>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7fe f97a 	bl	80015ec <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fe f976 	bl	80015ec <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e056      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330e:	4b2e      	ldr	r3, [pc, #184]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x41c>
 800331a:	e04e      	b.n	80033ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331c:	4b2b      	ldr	r3, [pc, #172]	; (80033cc <HAL_RCC_OscConfig+0x4ec>)
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003322:	f7fe f963 	bl	80015ec <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800332a:	f7fe f95f 	bl	80015ec <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e03f      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333c:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f0      	bne.n	800332a <HAL_RCC_OscConfig+0x44a>
 8003348:	e037      	b.n	80033ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e032      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003356:	4b1c      	ldr	r3, [pc, #112]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d028      	beq.n	80033b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800336e:	429a      	cmp	r2, r3
 8003370:	d121      	bne.n	80033b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337c:	429a      	cmp	r2, r3
 800337e:	d11a      	bne.n	80033b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003386:	4013      	ands	r3, r2
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800338c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800338e:	4293      	cmp	r3, r2
 8003390:	d111      	bne.n	80033b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339c:	085b      	lsrs	r3, r3, #1
 800339e:	3b01      	subs	r3, #1
 80033a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d107      	bne.n	80033b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d001      	beq.n	80033ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40007000 	.word	0x40007000
 80033c8:	40023800 	.word	0x40023800
 80033cc:	42470060 	.word	0x42470060

080033d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0cc      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033e4:	4b68      	ldr	r3, [pc, #416]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d90c      	bls.n	800340c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f2:	4b65      	ldr	r3, [pc, #404]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fa:	4b63      	ldr	r3, [pc, #396]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0b8      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d020      	beq.n	800345a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003424:	4b59      	ldr	r3, [pc, #356]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4a58      	ldr	r2, [pc, #352]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800342e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800343c:	4b53      	ldr	r3, [pc, #332]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4a52      	ldr	r2, [pc, #328]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003446:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003448:	4b50      	ldr	r3, [pc, #320]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	494d      	ldr	r1, [pc, #308]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	4313      	orrs	r3, r2
 8003458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d044      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d107      	bne.n	800347e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346e:	4b47      	ldr	r3, [pc, #284]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d119      	bne.n	80034ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e07f      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d003      	beq.n	800348e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800348a:	2b03      	cmp	r3, #3
 800348c:	d107      	bne.n	800349e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348e:	4b3f      	ldr	r3, [pc, #252]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d109      	bne.n	80034ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e06f      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349e:	4b3b      	ldr	r3, [pc, #236]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e067      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ae:	4b37      	ldr	r3, [pc, #220]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f023 0203 	bic.w	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	4934      	ldr	r1, [pc, #208]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034c0:	f7fe f894 	bl	80015ec <HAL_GetTick>
 80034c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c6:	e00a      	b.n	80034de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c8:	f7fe f890 	bl	80015ec <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e04f      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034de:	4b2b      	ldr	r3, [pc, #172]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 020c 	and.w	r2, r3, #12
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d1eb      	bne.n	80034c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034f0:	4b25      	ldr	r3, [pc, #148]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d20c      	bcs.n	8003518 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fe:	4b22      	ldr	r3, [pc, #136]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003506:	4b20      	ldr	r3, [pc, #128]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d001      	beq.n	8003518 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e032      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003524:	4b19      	ldr	r3, [pc, #100]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4916      	ldr	r1, [pc, #88]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	4313      	orrs	r3, r2
 8003534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d009      	beq.n	8003556 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003542:	4b12      	ldr	r3, [pc, #72]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	490e      	ldr	r1, [pc, #56]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003556:	f000 f821 	bl	800359c <HAL_RCC_GetSysClockFreq>
 800355a:	4602      	mov	r2, r0
 800355c:	4b0b      	ldr	r3, [pc, #44]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	490a      	ldr	r1, [pc, #40]	; (8003590 <HAL_RCC_ClockConfig+0x1c0>)
 8003568:	5ccb      	ldrb	r3, [r1, r3]
 800356a:	fa22 f303 	lsr.w	r3, r2, r3
 800356e:	4a09      	ldr	r2, [pc, #36]	; (8003594 <HAL_RCC_ClockConfig+0x1c4>)
 8003570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003572:	4b09      	ldr	r3, [pc, #36]	; (8003598 <HAL_RCC_ClockConfig+0x1c8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7fd fff4 	bl	8001564 <HAL_InitTick>

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40023c00 	.word	0x40023c00
 800358c:	40023800 	.word	0x40023800
 8003590:	08003974 	.word	0x08003974
 8003594:	20000004 	.word	0x20000004
 8003598:	20000008 	.word	0x20000008

0800359c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800359c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	607b      	str	r3, [r7, #4]
 80035a8:	2300      	movs	r3, #0
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	2300      	movs	r3, #0
 80035ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035b4:	4b67      	ldr	r3, [pc, #412]	; (8003754 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 030c 	and.w	r3, r3, #12
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d00d      	beq.n	80035dc <HAL_RCC_GetSysClockFreq+0x40>
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	f200 80bd 	bhi.w	8003740 <HAL_RCC_GetSysClockFreq+0x1a4>
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x34>
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d003      	beq.n	80035d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80035ce:	e0b7      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035d0:	4b61      	ldr	r3, [pc, #388]	; (8003758 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035d2:	60bb      	str	r3, [r7, #8]
       break;
 80035d4:	e0b7      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035d6:	4b61      	ldr	r3, [pc, #388]	; (800375c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80035d8:	60bb      	str	r3, [r7, #8]
      break;
 80035da:	e0b4      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035dc:	4b5d      	ldr	r3, [pc, #372]	; (8003754 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035e6:	4b5b      	ldr	r3, [pc, #364]	; (8003754 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d04d      	beq.n	800368e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f2:	4b58      	ldr	r3, [pc, #352]	; (8003754 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	099b      	lsrs	r3, r3, #6
 80035f8:	461a      	mov	r2, r3
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003602:	f04f 0100 	mov.w	r1, #0
 8003606:	ea02 0800 	and.w	r8, r2, r0
 800360a:	ea03 0901 	and.w	r9, r3, r1
 800360e:	4640      	mov	r0, r8
 8003610:	4649      	mov	r1, r9
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	014b      	lsls	r3, r1, #5
 800361c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003620:	0142      	lsls	r2, r0, #5
 8003622:	4610      	mov	r0, r2
 8003624:	4619      	mov	r1, r3
 8003626:	ebb0 0008 	subs.w	r0, r0, r8
 800362a:	eb61 0109 	sbc.w	r1, r1, r9
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	018b      	lsls	r3, r1, #6
 8003638:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800363c:	0182      	lsls	r2, r0, #6
 800363e:	1a12      	subs	r2, r2, r0
 8003640:	eb63 0301 	sbc.w	r3, r3, r1
 8003644:	f04f 0000 	mov.w	r0, #0
 8003648:	f04f 0100 	mov.w	r1, #0
 800364c:	00d9      	lsls	r1, r3, #3
 800364e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003652:	00d0      	lsls	r0, r2, #3
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	eb12 0208 	adds.w	r2, r2, r8
 800365c:	eb43 0309 	adc.w	r3, r3, r9
 8003660:	f04f 0000 	mov.w	r0, #0
 8003664:	f04f 0100 	mov.w	r1, #0
 8003668:	0259      	lsls	r1, r3, #9
 800366a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800366e:	0250      	lsls	r0, r2, #9
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4610      	mov	r0, r2
 8003676:	4619      	mov	r1, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	461a      	mov	r2, r3
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	f7fc fda2 	bl	80001c8 <__aeabi_uldivmod>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4613      	mov	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	e04a      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800368e:	4b31      	ldr	r3, [pc, #196]	; (8003754 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	099b      	lsrs	r3, r3, #6
 8003694:	461a      	mov	r2, r3
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800369e:	f04f 0100 	mov.w	r1, #0
 80036a2:	ea02 0400 	and.w	r4, r2, r0
 80036a6:	ea03 0501 	and.w	r5, r3, r1
 80036aa:	4620      	mov	r0, r4
 80036ac:	4629      	mov	r1, r5
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	014b      	lsls	r3, r1, #5
 80036b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036bc:	0142      	lsls	r2, r0, #5
 80036be:	4610      	mov	r0, r2
 80036c0:	4619      	mov	r1, r3
 80036c2:	1b00      	subs	r0, r0, r4
 80036c4:	eb61 0105 	sbc.w	r1, r1, r5
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	018b      	lsls	r3, r1, #6
 80036d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036d6:	0182      	lsls	r2, r0, #6
 80036d8:	1a12      	subs	r2, r2, r0
 80036da:	eb63 0301 	sbc.w	r3, r3, r1
 80036de:	f04f 0000 	mov.w	r0, #0
 80036e2:	f04f 0100 	mov.w	r1, #0
 80036e6:	00d9      	lsls	r1, r3, #3
 80036e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036ec:	00d0      	lsls	r0, r2, #3
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	1912      	adds	r2, r2, r4
 80036f4:	eb45 0303 	adc.w	r3, r5, r3
 80036f8:	f04f 0000 	mov.w	r0, #0
 80036fc:	f04f 0100 	mov.w	r1, #0
 8003700:	0299      	lsls	r1, r3, #10
 8003702:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003706:	0290      	lsls	r0, r2, #10
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4610      	mov	r0, r2
 800370e:	4619      	mov	r1, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	461a      	mov	r2, r3
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	f7fc fd56 	bl	80001c8 <__aeabi_uldivmod>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4613      	mov	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003724:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	0c1b      	lsrs	r3, r3, #16
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	3301      	adds	r3, #1
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	fbb2 f3f3 	udiv	r3, r2, r3
 800373c:	60bb      	str	r3, [r7, #8]
      break;
 800373e:	e002      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003742:	60bb      	str	r3, [r7, #8]
      break;
 8003744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003746:	68bb      	ldr	r3, [r7, #8]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003752:	bf00      	nop
 8003754:	40023800 	.word	0x40023800
 8003758:	00f42400 	.word	0x00f42400
 800375c:	007a1200 	.word	0x007a1200

08003760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003764:	4b03      	ldr	r3, [pc, #12]	; (8003774 <HAL_RCC_GetHCLKFreq+0x14>)
 8003766:	681b      	ldr	r3, [r3, #0]
}
 8003768:	4618      	mov	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	20000004 	.word	0x20000004

08003778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800377c:	f7ff fff0 	bl	8003760 <HAL_RCC_GetHCLKFreq>
 8003780:	4602      	mov	r2, r0
 8003782:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	0a9b      	lsrs	r3, r3, #10
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	4903      	ldr	r1, [pc, #12]	; (800379c <HAL_RCC_GetPCLK1Freq+0x24>)
 800378e:	5ccb      	ldrb	r3, [r1, r3]
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003794:	4618      	mov	r0, r3
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40023800 	.word	0x40023800
 800379c:	08003984 	.word	0x08003984

080037a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e07b      	b.n	80038aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d108      	bne.n	80037cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037c2:	d009      	beq.n	80037d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	61da      	str	r2, [r3, #28]
 80037ca:	e005      	b.n	80037d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fd fd8c 	bl	8001310 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800380e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385c:	ea42 0103 	orr.w	r1, r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	f003 0104 	and.w	r1, r3, #4
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	f003 0210 	and.w	r2, r3, #16
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69da      	ldr	r2, [r3, #28]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003898:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c8:	d10e      	bne.n	80038e8 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d107      	bne.n	80038e8 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0201 	mvn.w	r2, #1
 80038e0:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f804 	bl	80038f0 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 80038e8:	bf00      	nop
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <__libc_init_array>:
 8003904:	b570      	push	{r4, r5, r6, lr}
 8003906:	4d0d      	ldr	r5, [pc, #52]	; (800393c <__libc_init_array+0x38>)
 8003908:	4c0d      	ldr	r4, [pc, #52]	; (8003940 <__libc_init_array+0x3c>)
 800390a:	1b64      	subs	r4, r4, r5
 800390c:	10a4      	asrs	r4, r4, #2
 800390e:	2600      	movs	r6, #0
 8003910:	42a6      	cmp	r6, r4
 8003912:	d109      	bne.n	8003928 <__libc_init_array+0x24>
 8003914:	4d0b      	ldr	r5, [pc, #44]	; (8003944 <__libc_init_array+0x40>)
 8003916:	4c0c      	ldr	r4, [pc, #48]	; (8003948 <__libc_init_array+0x44>)
 8003918:	f000 f820 	bl	800395c <_init>
 800391c:	1b64      	subs	r4, r4, r5
 800391e:	10a4      	asrs	r4, r4, #2
 8003920:	2600      	movs	r6, #0
 8003922:	42a6      	cmp	r6, r4
 8003924:	d105      	bne.n	8003932 <__libc_init_array+0x2e>
 8003926:	bd70      	pop	{r4, r5, r6, pc}
 8003928:	f855 3b04 	ldr.w	r3, [r5], #4
 800392c:	4798      	blx	r3
 800392e:	3601      	adds	r6, #1
 8003930:	e7ee      	b.n	8003910 <__libc_init_array+0xc>
 8003932:	f855 3b04 	ldr.w	r3, [r5], #4
 8003936:	4798      	blx	r3
 8003938:	3601      	adds	r6, #1
 800393a:	e7f2      	b.n	8003922 <__libc_init_array+0x1e>
 800393c:	08003994 	.word	0x08003994
 8003940:	08003994 	.word	0x08003994
 8003944:	08003994 	.word	0x08003994
 8003948:	08003998 	.word	0x08003998

0800394c <memset>:
 800394c:	4402      	add	r2, r0
 800394e:	4603      	mov	r3, r0
 8003950:	4293      	cmp	r3, r2
 8003952:	d100      	bne.n	8003956 <memset+0xa>
 8003954:	4770      	bx	lr
 8003956:	f803 1b01 	strb.w	r1, [r3], #1
 800395a:	e7f9      	b.n	8003950 <memset+0x4>

0800395c <_init>:
 800395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395e:	bf00      	nop
 8003960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003962:	bc08      	pop	{r3}
 8003964:	469e      	mov	lr, r3
 8003966:	4770      	bx	lr

08003968 <_fini>:
 8003968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396a:	bf00      	nop
 800396c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396e:	bc08      	pop	{r3}
 8003970:	469e      	mov	lr, r3
 8003972:	4770      	bx	lr
