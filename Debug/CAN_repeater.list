
CAN_repeater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008990  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08008b20  08008b20  00018b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c70  08008c70  00020288  2**0
                  CONTENTS
  4 .ARM          00000008  08008c70  08008c70  00018c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c78  08008c78  00020288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c78  08008c78  00018c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c7c  08008c7c  00018c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  08008c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000234c  20000288  08008f08  00020288  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  200025d4  08008f08  000225d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af8d  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039d4  00000000  00000000  0003b245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  0003ec20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  0003fdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c43  00000000  00000000  00040e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e7e  00000000  00000000  00069acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d888a  00000000  00000000  00080949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001591d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dc0  00000000  00000000  00159228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000288 	.word	0x20000288
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b08 	.word	0x08008b08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000028c 	.word	0x2000028c
 80001cc:	08008b08 	.word	0x08008b08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char StrFunctionCode[16][10] = {"NMT      \0","EMERGENCY\0","TIME     \0","FC_3     \0","DOORS    \0","FC_5     \0","FC_6     \0","FC_7     \0","PDO_OUT  \0","PDO_IN   \0","MPDO     \0","TSDO     \0","RSDO     \0","FC_D     \0","HEARTBEAT\0","LSS      \0"};

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056a:	b097      	sub	sp, #92	; 0x5c
 800056c:	af0c      	add	r7, sp, #48	; 0x30
 800056e:	61f8      	str	r0, [r7, #28]
  /* Get RX message */
	if(hcan->Instance == hcan1.Instance)
 8000570:	69fb      	ldr	r3, [r7, #28]
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4ba8      	ldr	r3, [pc, #672]	; (8000818 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	429a      	cmp	r2, r3
 800057a:	f040 812c 	bne.w	80007d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x26e>
	{
		  memset(Buf_infor,0,100);
 800057e:	2264      	movs	r2, #100	; 0x64
 8000580:	2100      	movs	r1, #0
 8000582:	48a6      	ldr	r0, [pc, #664]	; (800081c <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8000584:	f007 fe8a 	bl	800829c <memset>
		  if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &Can1RxHeader[ri1], Can1RxData[ri1]) != HAL_OK)
 8000588:	4ba5      	ldr	r3, [pc, #660]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	461a      	mov	r2, r3
 8000590:	4613      	mov	r3, r2
 8000592:	00db      	lsls	r3, r3, #3
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	4aa2      	ldr	r2, [pc, #648]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 800059a:	441a      	add	r2, r3
 800059c:	4ba0      	ldr	r3, [pc, #640]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	00db      	lsls	r3, r3, #3
 80005a4:	49a0      	ldr	r1, [pc, #640]	; (8000828 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 80005a6:	440b      	add	r3, r1
 80005a8:	2100      	movs	r1, #0
 80005aa:	489b      	ldr	r0, [pc, #620]	; (8000818 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 80005ac:	f001 fb14 	bl	8001bd8 <HAL_CAN_GetRxMessage>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d002      	beq.n	80005bc <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		  {
			/* Reception Error */
			  Error_Handler();
 80005b6:	f000 fdbb 	bl	8001130 <Error_Handler>
			  if(ri2 == (CAN_RX_SIZE -1)) { ri2 =0;}
			  else ri2++;

		  }
	}
}
 80005ba:	e1fc      	b.n	80009b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x44e>
			  uint8_t functioncode = ((Can1RxHeader[ri1].StdId>>3) & 0xF0);
 80005bc:	4b98      	ldr	r3, [pc, #608]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	4619      	mov	r1, r3
 80005c4:	4a97      	ldr	r2, [pc, #604]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 80005c6:	460b      	mov	r3, r1
 80005c8:	00db      	lsls	r3, r3, #3
 80005ca:	1a5b      	subs	r3, r3, r1
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	4413      	add	r3, r2
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	08db      	lsrs	r3, r3, #3
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	f023 030f 	bic.w	r3, r3, #15
 80005da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  uint8_t type = Can1RxData[ri1][0];
 80005de:	4b90      	ldr	r3, [pc, #576]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b90      	ldr	r3, [pc, #576]	; (8000828 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 80005e8:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 80005ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			  switch (functioncode) {
 80005f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005f4:	2b40      	cmp	r3, #64	; 0x40
 80005f6:	d041      	beq.n	800067c <HAL_CAN_RxFifo0MsgPendingCallback+0x114>
 80005f8:	2bc0      	cmp	r3, #192	; 0xc0
 80005fa:	d141      	bne.n	8000680 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>
					switch (type & COMMAND_SPECIFIER) {
 80005fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000600:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000604:	2b20      	cmp	r3, #32
 8000606:	d002      	beq.n	800060e <HAL_CAN_RxFifo0MsgPendingCallback+0xa6>
 8000608:	2b40      	cmp	r3, #64	; 0x40
 800060a:	d01f      	beq.n	800064c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>
							break;
 800060c:	e035      	b.n	800067a <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
							index = *(uint16_t *)&Can1RxData[ri1][1];		/* read object index					*/
 800060e:	4b84      	ldr	r3, [pc, #528]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	00db      	lsls	r3, r3, #3
 8000616:	3301      	adds	r3, #1
 8000618:	4a83      	ldr	r2, [pc, #524]	; (8000828 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800061a:	4413      	add	r3, r2
 800061c:	881b      	ldrh	r3, [r3, #0]
 800061e:	84bb      	strh	r3, [r7, #36]	; 0x24
							subindex = Can1RxData[ri1][3];				/* read object subindex					*/
 8000620:	4b7f      	ldr	r3, [pc, #508]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	4a80      	ldr	r2, [pc, #512]	; (8000828 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8000628:	00db      	lsls	r3, r3, #3
 800062a:	4413      	add	r3, r2
 800062c:	78db      	ldrb	r3, [r3, #3]
 800062e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
							if (type & EXPEDITED_BIT)			/* expedited transfer					*/
 8000632:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	2b00      	cmp	r3, #0
 800063c:	d004      	beq.n	8000648 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>
								switch (index) {
 800063e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000640:	f242 0209 	movw	r2, #8201	; 0x2009
 8000644:	4293      	cmp	r3, r2
										break;
 8000646:	e000      	b.n	800064a <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
							}
 8000648:	bf00      	nop
							break;
 800064a:	e016      	b.n	800067a <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
							index = *(uint16_t *)&Can1RxData[ri1][1];		/* read object index					*/
 800064c:	4b74      	ldr	r3, [pc, #464]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	00db      	lsls	r3, r3, #3
 8000654:	3301      	adds	r3, #1
 8000656:	4a74      	ldr	r2, [pc, #464]	; (8000828 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8000658:	4413      	add	r3, r2
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	84bb      	strh	r3, [r7, #36]	; 0x24
							subindex = Can1RxData[ri1][3];				/* read object subindex					*/
 800065e:	4b70      	ldr	r3, [pc, #448]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b2db      	uxtb	r3, r3
 8000664:	4a70      	ldr	r2, [pc, #448]	; (8000828 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	4413      	add	r3, r2
 800066a:	78db      	ldrb	r3, [r3, #3]
 800066c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
							switch (index)
 8000670:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000672:	f5b3 4fc9 	cmp.w	r3, #25728	; 0x6480
									break;
 8000676:	bf00      	nop
							break;
 8000678:	bf00      	nop
					break;
 800067a:	e002      	b.n	8000682 <HAL_CAN_RxFifo0MsgPendingCallback+0x11a>
					  break;
 800067c:	bf00      	nop
 800067e:	e000      	b.n	8000682 <HAL_CAN_RxFifo0MsgPendingCallback+0x11a>
					break;
 8000680:	bf00      	nop
			  Debug_len =  sprintf(DebugBuf,"%lu<= %s (%06lu)  0x%02lX 0x%02lX: 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X \r\n",HAL_GetTick(),StrFunctionCode[(functioncode>>4)],HAL_GetTick(),(Can1RxHeader[ri1].StdId &0x7F),((Can1RxHeader[ri1].StdId>>3) & 0xF0),Can1RxData[ri1][0],Can1RxData[ri1][1],Can1RxData[ri1][2],Can1RxData[ri1][3],Can1RxData[ri1][4],Can1RxData[ri1][5],Can1RxData[ri1][6],Can1RxData[ri1][7]);
 8000682:	f001 f859 	bl	8001738 <HAL_GetTick>
 8000686:	4606      	mov	r6, r0
 8000688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800068c:	091b      	lsrs	r3, r3, #4
 800068e:	b2db      	uxtb	r3, r3
 8000690:	461a      	mov	r2, r3
 8000692:	4613      	mov	r3, r2
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	4413      	add	r3, r2
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	4a64      	ldr	r2, [pc, #400]	; (800082c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800069c:	189c      	adds	r4, r3, r2
 800069e:	f001 f84b 	bl	8001738 <HAL_GetTick>
 80006a2:	4605      	mov	r5, r0
 80006a4:	4b5e      	ldr	r3, [pc, #376]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	4619      	mov	r1, r3
 80006ac:	4a5d      	ldr	r2, [pc, #372]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 80006ae:	460b      	mov	r3, r1
 80006b0:	00db      	lsls	r3, r3, #3
 80006b2:	1a5b      	subs	r3, r3, r1
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	4413      	add	r3, r2
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 80006be:	4b58      	ldr	r3, [pc, #352]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4619      	mov	r1, r3
 80006c6:	4a57      	ldr	r2, [pc, #348]	; (8000824 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 80006c8:	460b      	mov	r3, r1
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	4413      	add	r3, r2
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	08db      	lsrs	r3, r3, #3
 80006d6:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 80006da:	4b51      	ldr	r3, [pc, #324]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b51      	ldr	r3, [pc, #324]	; (8000828 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 80006e4:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 80006e8:	61bb      	str	r3, [r7, #24]
 80006ea:	4b4d      	ldr	r3, [pc, #308]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4a4d      	ldr	r2, [pc, #308]	; (8000828 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	4413      	add	r3, r2
 80006f6:	785b      	ldrb	r3, [r3, #1]
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	4b49      	ldr	r3, [pc, #292]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	4a49      	ldr	r2, [pc, #292]	; (8000828 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8000702:	00db      	lsls	r3, r3, #3
 8000704:	4413      	add	r3, r2
 8000706:	789b      	ldrb	r3, [r3, #2]
 8000708:	613b      	str	r3, [r7, #16]
 800070a:	4b45      	ldr	r3, [pc, #276]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	4a45      	ldr	r2, [pc, #276]	; (8000828 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8000712:	00db      	lsls	r3, r3, #3
 8000714:	4413      	add	r3, r2
 8000716:	78db      	ldrb	r3, [r3, #3]
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	4b41      	ldr	r3, [pc, #260]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	4a41      	ldr	r2, [pc, #260]	; (8000828 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8000722:	00db      	lsls	r3, r3, #3
 8000724:	4413      	add	r3, r2
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b3d      	ldr	r3, [pc, #244]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	4a3d      	ldr	r2, [pc, #244]	; (8000828 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	4413      	add	r3, r2
 8000736:	795b      	ldrb	r3, [r3, #5]
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b39      	ldr	r3, [pc, #228]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	4a39      	ldr	r2, [pc, #228]	; (8000828 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	4413      	add	r3, r2
 8000746:	799b      	ldrb	r3, [r3, #6]
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	4b35      	ldr	r3, [pc, #212]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4a35      	ldr	r2, [pc, #212]	; (8000828 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8000752:	00db      	lsls	r3, r3, #3
 8000754:	4413      	add	r3, r2
 8000756:	79db      	ldrb	r3, [r3, #7]
 8000758:	930a      	str	r3, [sp, #40]	; 0x28
 800075a:	683a      	ldr	r2, [r7, #0]
 800075c:	9209      	str	r2, [sp, #36]	; 0x24
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	9208      	str	r2, [sp, #32]
 8000762:	68ba      	ldr	r2, [r7, #8]
 8000764:	9207      	str	r2, [sp, #28]
 8000766:	68fa      	ldr	r2, [r7, #12]
 8000768:	9206      	str	r2, [sp, #24]
 800076a:	693a      	ldr	r2, [r7, #16]
 800076c:	9205      	str	r2, [sp, #20]
 800076e:	697a      	ldr	r2, [r7, #20]
 8000770:	9204      	str	r2, [sp, #16]
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	9303      	str	r3, [sp, #12]
 8000776:	9102      	str	r1, [sp, #8]
 8000778:	9001      	str	r0, [sp, #4]
 800077a:	9500      	str	r5, [sp, #0]
 800077c:	4623      	mov	r3, r4
 800077e:	4632      	mov	r2, r6
 8000780:	492b      	ldr	r1, [pc, #172]	; (8000830 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8000782:	482c      	ldr	r0, [pc, #176]	; (8000834 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 8000784:	f007 fd92 	bl	80082ac <siprintf>
 8000788:	4603      	mov	r3, r0
 800078a:	b29a      	uxth	r2, r3
 800078c:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 800078e:	801a      	strh	r2, [r3, #0]
			  CDC_Transmit_FS((uint8_t *)DebugBuf, Debug_len);
 8000790:	4b29      	ldr	r3, [pc, #164]	; (8000838 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	4619      	mov	r1, r3
 8000796:	4827      	ldr	r0, [pc, #156]	; (8000834 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 8000798:	f007 f8ec 	bl	8007974 <CDC_Transmit_FS>
			  RxCan1_cnt ++;
 800079c:	4b27      	ldr	r3, [pc, #156]	; (800083c <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	3301      	adds	r3, #1
 80007a2:	4a26      	ldr	r2, [pc, #152]	; (800083c <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 80007a4:	6013      	str	r3, [r2, #0]
			  rc1++;
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	3301      	adds	r3, #1
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b23      	ldr	r3, [pc, #140]	; (8000840 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 80007b2:	701a      	strb	r2, [r3, #0]
			  if(ri1 == (CAN_RX_SIZE -1)) { ri1 =0;}
 80007b4:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	2b07      	cmp	r3, #7
 80007bc:	d103      	bne.n	80007c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x25e>
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
}
 80007c4:	e0f7      	b.n	80009b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x44e>
			  else ri1++;
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	3301      	adds	r3, #1
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	4b13      	ldr	r3, [pc, #76]	; (8000820 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 80007d2:	701a      	strb	r2, [r3, #0]
}
 80007d4:	e0ef      	b.n	80009b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x44e>
	else	if (hcan->Instance == hcan2.Instance)
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	429a      	cmp	r2, r3
 80007e0:	f040 80e9 	bne.w	80009b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x44e>
		  if (HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &Can2RxHeader[ri2], Can2RxData[ri2]) != HAL_OK)
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	461a      	mov	r2, r3
 80007ec:	4613      	mov	r3, r2
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	1a9b      	subs	r3, r3, r2
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	4a15      	ldr	r2, [pc, #84]	; (800084c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 80007f6:	441a      	add	r2, r3
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	4913      	ldr	r1, [pc, #76]	; (8000850 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 8000802:	440b      	add	r3, r1
 8000804:	2100      	movs	r1, #0
 8000806:	480f      	ldr	r0, [pc, #60]	; (8000844 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 8000808:	f001 f9e6 	bl	8001bd8 <HAL_CAN_GetRxMessage>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d020      	beq.n	8000854 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>
			  Error_Handler();
 8000812:	f000 fc8d 	bl	8001130 <Error_Handler>
}
 8000816:	e0ce      	b.n	80009b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x44e>
 8000818:	20000cc0 	.word	0x20000cc0
 800081c:	20000668 	.word	0x20000668
 8000820:	20000326 	.word	0x20000326
 8000824:	20000b48 	.word	0x20000b48
 8000828:	200002a4 	.word	0x200002a4
 800082c:	20000004 	.word	0x20000004
 8000830:	08008b20 	.word	0x08008b20
 8000834:	200006cc 	.word	0x200006cc
 8000838:	20000338 	.word	0x20000338
 800083c:	20000328 	.word	0x20000328
 8000840:	20000324 	.word	0x20000324
 8000844:	20000c28 	.word	0x20000c28
 8000848:	20000327 	.word	0x20000327
 800084c:	20000588 	.word	0x20000588
 8000850:	200002e4 	.word	0x200002e4
			  Debug_len =  sprintf(DebugBuf,"=> %s (%06lu)  0x%02lX 0x%02lX: 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X \r\n",StrFunctionCode[(Can2RxHeader[ri2].StdId>>7)&0x0F],HAL_GetTick(),(Can2RxHeader[ri2].StdId &0x7F),((Can2RxHeader[ri2].StdId>>3) & 0xF0),Can2RxData[ri2][0],Can2RxData[ri2][1],Can2RxData[ri2][2],Can2RxData[ri2][3],Can2RxData[ri2][4],Can2RxData[ri2][5],Can2RxData[ri2][6],Can2RxData[ri2][7]);
 8000854:	4b5a      	ldr	r3, [pc, #360]	; (80009c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4619      	mov	r1, r3
 800085c:	4a59      	ldr	r2, [pc, #356]	; (80009c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 800085e:	460b      	mov	r3, r1
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	1a5b      	subs	r3, r3, r1
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	4413      	add	r3, r2
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	09db      	lsrs	r3, r3, #7
 800086c:	f003 020f 	and.w	r2, r3, #15
 8000870:	4613      	mov	r3, r2
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	4413      	add	r3, r2
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	4a53      	ldr	r2, [pc, #332]	; (80009c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 800087a:	189c      	adds	r4, r3, r2
 800087c:	f000 ff5c 	bl	8001738 <HAL_GetTick>
 8000880:	4b4f      	ldr	r3, [pc, #316]	; (80009c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	4619      	mov	r1, r3
 8000888:	4a4e      	ldr	r2, [pc, #312]	; (80009c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 800088a:	460b      	mov	r3, r1
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	1a5b      	subs	r3, r3, r1
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	4413      	add	r3, r2
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800089a:	4b49      	ldr	r3, [pc, #292]	; (80009c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	461d      	mov	r5, r3
 80008a2:	4948      	ldr	r1, [pc, #288]	; (80009c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 80008a4:	462b      	mov	r3, r5
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	1b5b      	subs	r3, r3, r5
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	440b      	add	r3, r1
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	08db      	lsrs	r3, r3, #3
 80008b2:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 80008b6:	4b42      	ldr	r3, [pc, #264]	; (80009c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	461d      	mov	r5, r3
 80008be:	4b43      	ldr	r3, [pc, #268]	; (80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 80008c0:	f813 3035 	ldrb.w	r3, [r3, r5, lsl #3]
 80008c4:	461e      	mov	r6, r3
 80008c6:	4b3e      	ldr	r3, [pc, #248]	; (80009c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	4d3f      	ldr	r5, [pc, #252]	; (80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 80008ce:	00db      	lsls	r3, r3, #3
 80008d0:	442b      	add	r3, r5
 80008d2:	785b      	ldrb	r3, [r3, #1]
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	4b3a      	ldr	r3, [pc, #232]	; (80009c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4d3b      	ldr	r5, [pc, #236]	; (80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 80008de:	00db      	lsls	r3, r3, #3
 80008e0:	442b      	add	r3, r5
 80008e2:	789b      	ldrb	r3, [r3, #2]
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	4b36      	ldr	r3, [pc, #216]	; (80009c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	4d37      	ldr	r5, [pc, #220]	; (80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	442b      	add	r3, r5
 80008f2:	78db      	ldrb	r3, [r3, #3]
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	4b32      	ldr	r3, [pc, #200]	; (80009c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	4d33      	ldr	r5, [pc, #204]	; (80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	442b      	add	r3, r5
 8000902:	791b      	ldrb	r3, [r3, #4]
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b2e      	ldr	r3, [pc, #184]	; (80009c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	b2db      	uxtb	r3, r3
 800090c:	4d2f      	ldr	r5, [pc, #188]	; (80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	442b      	add	r3, r5
 8000912:	795b      	ldrb	r3, [r3, #5]
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b2db      	uxtb	r3, r3
 800091c:	4d2b      	ldr	r5, [pc, #172]	; (80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	442b      	add	r3, r5
 8000922:	799b      	ldrb	r3, [r3, #6]
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b26      	ldr	r3, [pc, #152]	; (80009c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	4d27      	ldr	r5, [pc, #156]	; (80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	442b      	add	r3, r5
 8000932:	79db      	ldrb	r3, [r3, #7]
 8000934:	9309      	str	r3, [sp, #36]	; 0x24
 8000936:	687d      	ldr	r5, [r7, #4]
 8000938:	9508      	str	r5, [sp, #32]
 800093a:	68bd      	ldr	r5, [r7, #8]
 800093c:	9507      	str	r5, [sp, #28]
 800093e:	68fd      	ldr	r5, [r7, #12]
 8000940:	9506      	str	r5, [sp, #24]
 8000942:	693d      	ldr	r5, [r7, #16]
 8000944:	9505      	str	r5, [sp, #20]
 8000946:	697d      	ldr	r5, [r7, #20]
 8000948:	9504      	str	r5, [sp, #16]
 800094a:	69bb      	ldr	r3, [r7, #24]
 800094c:	9303      	str	r3, [sp, #12]
 800094e:	9602      	str	r6, [sp, #8]
 8000950:	9101      	str	r1, [sp, #4]
 8000952:	9200      	str	r2, [sp, #0]
 8000954:	4603      	mov	r3, r0
 8000956:	4622      	mov	r2, r4
 8000958:	491d      	ldr	r1, [pc, #116]	; (80009d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 800095a:	481e      	ldr	r0, [pc, #120]	; (80009d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x46c>)
 800095c:	f007 fca6 	bl	80082ac <siprintf>
 8000960:	4603      	mov	r3, r0
 8000962:	b29a      	uxth	r2, r3
 8000964:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x470>)
 8000966:	801a      	strh	r2, [r3, #0]
			  CDC_Transmit_FS((uint8_t *)DebugBuf, Debug_len);
 8000968:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x470>)
 800096a:	881b      	ldrh	r3, [r3, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	4819      	ldr	r0, [pc, #100]	; (80009d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x46c>)
 8000970:	f007 f800 	bl	8007974 <CDC_Transmit_FS>
			  HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8000974:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000978:	4818      	ldr	r0, [pc, #96]	; (80009dc <HAL_CAN_RxFifo0MsgPendingCallback+0x474>)
 800097a:	f001 ff3e 	bl	80027fa <HAL_GPIO_TogglePin>
			  RxCan2_cnt ++;
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x478>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	3301      	adds	r3, #1
 8000984:	4a16      	ldr	r2, [pc, #88]	; (80009e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x478>)
 8000986:	6013      	str	r3, [r2, #0]
			  rc2++;
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x47c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	3301      	adds	r3, #1
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x47c>)
 8000994:	701a      	strb	r2, [r3, #0]
			  if(ri2 == (CAN_RX_SIZE -1)) { ri2 =0;}
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2b07      	cmp	r3, #7
 800099e:	d103      	bne.n	80009a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x440>
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
}
 80009a6:	e006      	b.n	80009b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x44e>
			  else ri2++;
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	3301      	adds	r3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>)
 80009b4:	701a      	strb	r2, [r3, #0]
}
 80009b6:	bf00      	nop
 80009b8:	372c      	adds	r7, #44	; 0x2c
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000327 	.word	0x20000327
 80009c4:	20000588 	.word	0x20000588
 80009c8:	20000004 	.word	0x20000004
 80009cc:	200002e4 	.word	0x200002e4
 80009d0:	08008b80 	.word	0x08008b80
 80009d4:	200006cc 	.word	0x200006cc
 80009d8:	20000338 	.word	0x20000338
 80009dc:	40020c00 	.word	0x40020c00
 80009e0:	2000032c 	.word	0x2000032c
 80009e4:	20000325 	.word	0x20000325

080009e8 <HAL_CAN_TxMailbox0CompleteCallback>:


int CNT_interrup[6] = {0};
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == hcan1.Instance)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_CAN_TxMailbox0CompleteCallback+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d10d      	bne.n	8000a18 <HAL_CAN_TxMailbox0CompleteCallback+0x30>
	{
		TxCan1_cnt++;
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <HAL_CAN_TxMailbox0CompleteCallback+0x68>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	4a13      	ldr	r2, [pc, #76]	; (8000a50 <HAL_CAN_TxMailbox0CompleteCallback+0x68>)
 8000a04:	6013      	str	r3, [r2, #0]
		Can1_tx_done = 1;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <HAL_CAN_TxMailbox0CompleteCallback+0x6c>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
		CNT_interrup[0]++;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_CAN_TxMailbox0CompleteCallback+0x70>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	4a11      	ldr	r2, [pc, #68]	; (8000a58 <HAL_CAN_TxMailbox0CompleteCallback+0x70>)
 8000a14:	6013      	str	r3, [r2, #0]
	{
		Can2_tx_done = 1;
		TxCan2_cnt++;
		CNT_interrup[1]++;
	}
}
 8000a16:	e012      	b.n	8000a3e <HAL_CAN_TxMailbox0CompleteCallback+0x56>
	else if(hcan->Instance == hcan2.Instance)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <HAL_CAN_TxMailbox0CompleteCallback+0x74>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d10c      	bne.n	8000a3e <HAL_CAN_TxMailbox0CompleteCallback+0x56>
		Can2_tx_done = 1;
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <HAL_CAN_TxMailbox0CompleteCallback+0x78>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	701a      	strb	r2, [r3, #0]
		TxCan2_cnt++;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_CAN_TxMailbox0CompleteCallback+0x7c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	4a0c      	ldr	r2, [pc, #48]	; (8000a64 <HAL_CAN_TxMailbox0CompleteCallback+0x7c>)
 8000a32:	6013      	str	r3, [r2, #0]
		CNT_interrup[1]++;
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_CAN_TxMailbox0CompleteCallback+0x70>)
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <HAL_CAN_TxMailbox0CompleteCallback+0x70>)
 8000a3c:	6053      	str	r3, [r2, #4]
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000cc0 	.word	0x20000cc0
 8000a50:	20000330 	.word	0x20000330
 8000a54:	20000000 	.word	0x20000000
 8000a58:	2000033c 	.word	0x2000033c
 8000a5c:	20000c28 	.word	0x20000c28
 8000a60:	20000001 	.word	0x20000001
 8000a64:	20000334 	.word	0x20000334

08000a68 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == hcan1.Instance)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_CAN_TxMailbox1CompleteCallback+0x64>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d10d      	bne.n	8000a98 <HAL_CAN_TxMailbox1CompleteCallback+0x30>
	{
		TxCan1_cnt++;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <HAL_CAN_TxMailbox1CompleteCallback+0x68>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	4a13      	ldr	r2, [pc, #76]	; (8000ad0 <HAL_CAN_TxMailbox1CompleteCallback+0x68>)
 8000a84:	6013      	str	r3, [r2, #0]
		Can1_tx_done = 1;
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <HAL_CAN_TxMailbox1CompleteCallback+0x6c>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
		CNT_interrup[2]++;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_CAN_TxMailbox1CompleteCallback+0x70>)
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	3301      	adds	r3, #1
 8000a92:	4a11      	ldr	r2, [pc, #68]	; (8000ad8 <HAL_CAN_TxMailbox1CompleteCallback+0x70>)
 8000a94:	6093      	str	r3, [r2, #8]
	{
		Can2_tx_done = 1;
		TxCan2_cnt++;
		CNT_interrup[3]++;
	}
}
 8000a96:	e012      	b.n	8000abe <HAL_CAN_TxMailbox1CompleteCallback+0x56>
	else if(hcan->Instance == hcan2.Instance)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <HAL_CAN_TxMailbox1CompleteCallback+0x74>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d10c      	bne.n	8000abe <HAL_CAN_TxMailbox1CompleteCallback+0x56>
		Can2_tx_done = 1;
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <HAL_CAN_TxMailbox1CompleteCallback+0x78>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
		TxCan2_cnt++;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_CAN_TxMailbox1CompleteCallback+0x7c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <HAL_CAN_TxMailbox1CompleteCallback+0x7c>)
 8000ab2:	6013      	str	r3, [r2, #0]
		CNT_interrup[3]++;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_CAN_TxMailbox1CompleteCallback+0x70>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_CAN_TxMailbox1CompleteCallback+0x70>)
 8000abc:	60d3      	str	r3, [r2, #12]
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000cc0 	.word	0x20000cc0
 8000ad0:	20000330 	.word	0x20000330
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	2000033c 	.word	0x2000033c
 8000adc:	20000c28 	.word	0x20000c28
 8000ae0:	20000001 	.word	0x20000001
 8000ae4:	20000334 	.word	0x20000334

08000ae8 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == hcan1.Instance)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <HAL_CAN_TxMailbox2CompleteCallback+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d10d      	bne.n	8000b18 <HAL_CAN_TxMailbox2CompleteCallback+0x30>
	{
		TxCan1_cnt++;
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <HAL_CAN_TxMailbox2CompleteCallback+0x68>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	3301      	adds	r3, #1
 8000b02:	4a13      	ldr	r2, [pc, #76]	; (8000b50 <HAL_CAN_TxMailbox2CompleteCallback+0x68>)
 8000b04:	6013      	str	r3, [r2, #0]
		Can1_tx_done = 1;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <HAL_CAN_TxMailbox2CompleteCallback+0x6c>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
		CNT_interrup[4]++;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_CAN_TxMailbox2CompleteCallback+0x70>)
 8000b0e:	691b      	ldr	r3, [r3, #16]
 8000b10:	3301      	adds	r3, #1
 8000b12:	4a11      	ldr	r2, [pc, #68]	; (8000b58 <HAL_CAN_TxMailbox2CompleteCallback+0x70>)
 8000b14:	6113      	str	r3, [r2, #16]
		Can2_tx_done = 1;
		TxCan2_cnt++;
		CNT_interrup[5]++;
	}

}
 8000b16:	e012      	b.n	8000b3e <HAL_CAN_TxMailbox2CompleteCallback+0x56>
	else if(hcan->Instance == hcan2.Instance)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_CAN_TxMailbox2CompleteCallback+0x74>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d10c      	bne.n	8000b3e <HAL_CAN_TxMailbox2CompleteCallback+0x56>
		Can2_tx_done = 1;
 8000b24:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <HAL_CAN_TxMailbox2CompleteCallback+0x78>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	701a      	strb	r2, [r3, #0]
		TxCan2_cnt++;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_CAN_TxMailbox2CompleteCallback+0x7c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	4a0c      	ldr	r2, [pc, #48]	; (8000b64 <HAL_CAN_TxMailbox2CompleteCallback+0x7c>)
 8000b32:	6013      	str	r3, [r2, #0]
		CNT_interrup[5]++;
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <HAL_CAN_TxMailbox2CompleteCallback+0x70>)
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <HAL_CAN_TxMailbox2CompleteCallback+0x70>)
 8000b3c:	6153      	str	r3, [r2, #20]
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000cc0 	.word	0x20000cc0
 8000b50:	20000330 	.word	0x20000330
 8000b54:	20000000 	.word	0x20000000
 8000b58:	2000033c 	.word	0x2000033c
 8000b5c:	20000c28 	.word	0x20000c28
 8000b60:	20000001 	.word	0x20000001
 8000b64:	20000334 	.word	0x20000334

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08c      	sub	sp, #48	; 0x30
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6e:	f000 fd7d 	bl	800166c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b72:	f000 f883 	bl	8000c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b76:	f000 f9bd 	bl	8000ef4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000b7a:	f000 f8eb 	bl	8000d54 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000b7e:	f000 f91f 	bl	8000dc0 <MX_CAN2_Init>
  MX_I2C1_Init();
 8000b82:	f000 f953 	bl	8000e2c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000b86:	f000 f97f 	bl	8000e88 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000b8a:	f006 fe35 	bl	80077f8 <MX_USB_DEVICE_Init>
//  MX_WWDG_Init();
//  MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b96:	2301      	movs	r3, #1
 8000b98:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = 0x00;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIdLow = 0x0000;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterActivation = ENABLE;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.SlaveStartFilterBank = 14;
 8000bb2:	230e      	movs	r3, #14
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28

	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4619      	mov	r1, r3
 8000bba:	482d      	ldr	r0, [pc, #180]	; (8000c70 <main+0x108>)
 8000bbc:	f000 fee8 	bl	8001990 <HAL_CAN_ConfigFilter>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <main+0x62>
	{
	/* Filter configuration Error */
		Error_Handler();
 8000bc6:	f000 fab3 	bl	8001130 <Error_Handler>
	}
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterBank = 15;
 8000bce:	230f      	movs	r3, #15
 8000bd0:	61bb      	str	r3, [r7, #24]
	if(HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4827      	ldr	r0, [pc, #156]	; (8000c74 <main+0x10c>)
 8000bd8:	f000 feda 	bl	8001990 <HAL_CAN_ConfigFilter>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <main+0x7e>
	{
	/* Filter configuration Error */
		Error_Handler();
 8000be2:	f000 faa5 	bl	8001130 <Error_Handler>
	}
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000be6:	4822      	ldr	r0, [pc, #136]	; (8000c70 <main+0x108>)
 8000be8:	f000 ffb2 	bl	8001b50 <HAL_CAN_Start>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <main+0x8e>
	{
	  /* Start Error */
	  Error_Handler();
 8000bf2:	f000 fa9d 	bl	8001130 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000bf6:	2102      	movs	r1, #2
 8000bf8:	481d      	ldr	r0, [pc, #116]	; (8000c70 <main+0x108>)
 8000bfa:	f001 f8ff 	bl	8001dfc <HAL_CAN_ActivateNotification>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <main+0xa0>
	{
	/* Notification Error */
		Error_Handler();
 8000c04:	f000 fa94 	bl	8001130 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8000c08:	2101      	movs	r1, #1
 8000c0a:	4819      	ldr	r0, [pc, #100]	; (8000c70 <main+0x108>)
 8000c0c:	f001 f8f6 	bl	8001dfc <HAL_CAN_ActivateNotification>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <main+0xb2>
	{
	/* Notification Error */
		Error_Handler();
 8000c16:	f000 fa8b 	bl	8001130 <Error_Handler>
	}
	if (HAL_CAN_Start(&hcan2) != HAL_OK)
 8000c1a:	4816      	ldr	r0, [pc, #88]	; (8000c74 <main+0x10c>)
 8000c1c:	f000 ff98 	bl	8001b50 <HAL_CAN_Start>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <main+0xc2>
	{
	  /* Start Error */
	  Error_Handler();
 8000c26:	f000 fa83 	bl	8001130 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000c2a:	2102      	movs	r1, #2
 8000c2c:	4811      	ldr	r0, [pc, #68]	; (8000c74 <main+0x10c>)
 8000c2e:	f001 f8e5 	bl	8001dfc <HAL_CAN_ActivateNotification>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <main+0xd4>
	{
	/* Notification Error */
		Error_Handler();
 8000c38:	f000 fa7a 	bl	8001130 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	480d      	ldr	r0, [pc, #52]	; (8000c74 <main+0x10c>)
 8000c40:	f001 f8dc 	bl	8001dfc <HAL_CAN_ActivateNotification>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <main+0xe6>
	{
	/* Notification Error */
		Error_Handler();
 8000c4a:	f000 fa71 	bl	8001130 <Error_Handler>
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t DebugTime =0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (1)
  {
	  if(rc1)
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <main+0x110>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
//			  if(ro2 == (CAN_RX_SIZE -1)) { ro2 =0;}
//			  else ro2++;
//			  rc2--;
//		  }
//	  }
	  if(HAL_GetTick() > DebugTime)
 8000c56:	f000 fd6f 	bl	8001738 <HAL_GetTick>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d2f7      	bcs.n	8000c52 <main+0xea>
	  {
		  DebugTime = HAL_GetTick() +500;
 8000c62:	f000 fd69 	bl	8001738 <HAL_GetTick>
 8000c66:	4603      	mov	r3, r0
 8000c68:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if(rc1)
 8000c6e:	e7f0      	b.n	8000c52 <main+0xea>
 8000c70:	20000cc0 	.word	0x20000cc0
 8000c74:	20000c28 	.word	0x20000c28
 8000c78:	20000324 	.word	0x20000324

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b094      	sub	sp, #80	; 0x50
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0320 	add.w	r3, r7, #32
 8000c86:	2230      	movs	r2, #48	; 0x30
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f007 fb06 	bl	800829c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <SystemClock_Config+0xd0>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	4a28      	ldr	r2, [pc, #160]	; (8000d4c <SystemClock_Config+0xd0>)
 8000caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cae:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb0:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <SystemClock_Config+0xd0>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	4b23      	ldr	r3, [pc, #140]	; (8000d50 <SystemClock_Config+0xd4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a22      	ldr	r2, [pc, #136]	; (8000d50 <SystemClock_Config+0xd4>)
 8000cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <SystemClock_Config+0xd4>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000cd8:	2309      	movs	r3, #9
 8000cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000cf4:	2360      	movs	r3, #96	; 0x60
 8000cf6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000cf8:	2306      	movs	r3, #6
 8000cfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d00:	f107 0320 	add.w	r3, r7, #32
 8000d04:	4618      	mov	r0, r3
 8000d06:	f003 f85b 	bl	8003dc0 <HAL_RCC_OscConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d10:	f000 fa0e 	bl	8001130 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d14:	230f      	movs	r3, #15
 8000d16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000d26:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2101      	movs	r1, #1
 8000d32:	4618      	mov	r0, r3
 8000d34:	f003 fabc 	bl	80042b0 <HAL_RCC_ClockConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d3e:	f000 f9f7 	bl	8001130 <Error_Handler>
  }
}
 8000d42:	bf00      	nop
 8000d44:	3750      	adds	r7, #80	; 0x50
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40007000 	.word	0x40007000

08000d54 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <MX_CAN1_Init+0x64>)
 8000d5a:	4a18      	ldr	r2, [pc, #96]	; (8000dbc <MX_CAN1_Init+0x68>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000d5e:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <MX_CAN1_Init+0x64>)
 8000d60:	2204      	movs	r2, #4
 8000d62:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_CAN1_Init+0x64>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <MX_CAN1_Init+0x64>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <MX_CAN1_Init+0x64>)
 8000d72:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000d76:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <MX_CAN1_Init+0x64>)
 8000d7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d7e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <MX_CAN1_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_CAN1_Init+0x64>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <MX_CAN1_Init+0x64>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_CAN1_Init+0x64>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <MX_CAN1_Init+0x64>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_CAN1_Init+0x64>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000da4:	4804      	ldr	r0, [pc, #16]	; (8000db8 <MX_CAN1_Init+0x64>)
 8000da6:	f000 fcf7 	bl	8001798 <HAL_CAN_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000db0:	f000 f9be 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000cc0 	.word	0x20000cc0
 8000dbc:	40006400 	.word	0x40006400

08000dc0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <MX_CAN2_Init+0x64>)
 8000dc6:	4a18      	ldr	r2, [pc, #96]	; (8000e28 <MX_CAN2_Init+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 8000dca:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <MX_CAN2_Init+0x64>)
 8000dcc:	2204      	movs	r2, #4
 8000dce:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <MX_CAN2_Init+0x64>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000dd6:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <MX_CAN2_Init+0x64>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MX_CAN2_Init+0x64>)
 8000dde:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000de2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <MX_CAN2_Init+0x64>)
 8000de6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000dea:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000dec:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <MX_CAN2_Init+0x64>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_CAN2_Init+0x64>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000df8:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <MX_CAN2_Init+0x64>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_CAN2_Init+0x64>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <MX_CAN2_Init+0x64>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_CAN2_Init+0x64>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000e10:	4804      	ldr	r0, [pc, #16]	; (8000e24 <MX_CAN2_Init+0x64>)
 8000e12:	f000 fcc1 	bl	8001798 <HAL_CAN_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000e1c:	f000 f988 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000c28 	.word	0x20000c28
 8000e28:	40006800 	.word	0x40006800

08000e2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <MX_I2C1_Init+0x50>)
 8000e32:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <MX_I2C1_Init+0x54>)
 8000e34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_I2C1_Init+0x50>)
 8000e38:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <MX_I2C1_Init+0x58>)
 8000e3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_I2C1_Init+0x50>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <MX_I2C1_Init+0x50>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_I2C1_Init+0x50>)
 8000e4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e50:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <MX_I2C1_Init+0x50>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_I2C1_Init+0x50>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <MX_I2C1_Init+0x50>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_I2C1_Init+0x50>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e68:	4804      	ldr	r0, [pc, #16]	; (8000e7c <MX_I2C1_Init+0x50>)
 8000e6a:	f001 fce1 	bl	8002830 <HAL_I2C_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e74:	f000 f95c 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000ad0 	.word	0x20000ad0
 8000e80:	40005400 	.word	0x40005400
 8000e84:	000186a0 	.word	0x000186a0

08000e88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <MX_SPI1_Init+0x64>)
 8000e8e:	4a18      	ldr	r2, [pc, #96]	; (8000ef0 <MX_SPI1_Init+0x68>)
 8000e90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e92:	4b16      	ldr	r3, [pc, #88]	; (8000eec <MX_SPI1_Init+0x64>)
 8000e94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <MX_SPI1_Init+0x64>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <MX_SPI1_Init+0x64>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_SPI1_Init+0x64>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_SPI1_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_SPI1_Init+0x64>)
 8000eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_SPI1_Init+0x64>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <MX_SPI1_Init+0x64>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_SPI1_Init+0x64>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <MX_SPI1_Init+0x64>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_SPI1_Init+0x64>)
 8000ed4:	220a      	movs	r2, #10
 8000ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <MX_SPI1_Init+0x64>)
 8000eda:	f003 fbd1 	bl	8004680 <HAL_SPI_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ee4:	f000 f924 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000c64 	.word	0x20000c64
 8000ef0:	40013000 	.word	0x40013000

08000ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08c      	sub	sp, #48	; 0x30
 8000ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
 8000f0e:	4b82      	ldr	r3, [pc, #520]	; (8001118 <MX_GPIO_Init+0x224>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a81      	ldr	r2, [pc, #516]	; (8001118 <MX_GPIO_Init+0x224>)
 8000f14:	f043 0310 	orr.w	r3, r3, #16
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b7f      	ldr	r3, [pc, #508]	; (8001118 <MX_GPIO_Init+0x224>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0310 	and.w	r3, r3, #16
 8000f22:	61bb      	str	r3, [r7, #24]
 8000f24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	4b7b      	ldr	r3, [pc, #492]	; (8001118 <MX_GPIO_Init+0x224>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a7a      	ldr	r2, [pc, #488]	; (8001118 <MX_GPIO_Init+0x224>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b78      	ldr	r3, [pc, #480]	; (8001118 <MX_GPIO_Init+0x224>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	4b74      	ldr	r3, [pc, #464]	; (8001118 <MX_GPIO_Init+0x224>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a73      	ldr	r2, [pc, #460]	; (8001118 <MX_GPIO_Init+0x224>)
 8000f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b71      	ldr	r3, [pc, #452]	; (8001118 <MX_GPIO_Init+0x224>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b6d      	ldr	r3, [pc, #436]	; (8001118 <MX_GPIO_Init+0x224>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a6c      	ldr	r2, [pc, #432]	; (8001118 <MX_GPIO_Init+0x224>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b6a      	ldr	r3, [pc, #424]	; (8001118 <MX_GPIO_Init+0x224>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	4b66      	ldr	r3, [pc, #408]	; (8001118 <MX_GPIO_Init+0x224>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a65      	ldr	r2, [pc, #404]	; (8001118 <MX_GPIO_Init+0x224>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b63      	ldr	r3, [pc, #396]	; (8001118 <MX_GPIO_Init+0x224>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4b5f      	ldr	r3, [pc, #380]	; (8001118 <MX_GPIO_Init+0x224>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a5e      	ldr	r2, [pc, #376]	; (8001118 <MX_GPIO_Init+0x224>)
 8000fa0:	f043 0308 	orr.w	r3, r3, #8
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b5c      	ldr	r3, [pc, #368]	; (8001118 <MX_GPIO_Init+0x224>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2108      	movs	r1, #8
 8000fb6:	4859      	ldr	r0, [pc, #356]	; (800111c <MX_GPIO_Init+0x228>)
 8000fb8:	f001 fc06 	bl	80027c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	4857      	ldr	r0, [pc, #348]	; (8001120 <MX_GPIO_Init+0x22c>)
 8000fc2:	f001 fc01 	bl	80027c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000fcc:	4855      	ldr	r0, [pc, #340]	; (8001124 <MX_GPIO_Init+0x230>)
 8000fce:	f001 fbfb 	bl	80027c8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000fd2:	2308      	movs	r3, #8
 8000fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	484c      	ldr	r0, [pc, #304]	; (800111c <MX_GPIO_Init+0x228>)
 8000fea:	f001 fa51 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	4846      	ldr	r0, [pc, #280]	; (8001120 <MX_GPIO_Init+0x22c>)
 8001006:	f001 fa43 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800100a:	2308      	movs	r3, #8
 800100c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800101a:	2305      	movs	r3, #5
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	4619      	mov	r1, r3
 8001024:	483e      	ldr	r0, [pc, #248]	; (8001120 <MX_GPIO_Init+0x22c>)
 8001026:	f001 fa33 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800102a:	2301      	movs	r3, #1
 800102c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800102e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	4619      	mov	r1, r3
 800103e:	483a      	ldr	r0, [pc, #232]	; (8001128 <MX_GPIO_Init+0x234>)
 8001040:	f001 fa26 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001044:	2310      	movs	r3, #16
 8001046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001054:	2306      	movs	r3, #6
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	4832      	ldr	r0, [pc, #200]	; (8001128 <MX_GPIO_Init+0x234>)
 8001060:	f001 fa16 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001064:	2304      	movs	r3, #4
 8001066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	4619      	mov	r1, r3
 8001076:	482d      	ldr	r0, [pc, #180]	; (800112c <MX_GPIO_Init+0x238>)
 8001078:	f001 fa0a 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800107c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800108e:	2305      	movs	r3, #5
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	4824      	ldr	r0, [pc, #144]	; (800112c <MX_GPIO_Init+0x238>)
 800109a:	f001 f9f9 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800109e:	f24f 0310 	movw	r3, #61456	; 0xf010
 80010a2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	481b      	ldr	r0, [pc, #108]	; (8001124 <MX_GPIO_Init+0x230>)
 80010b8:	f001 f9ea 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80010bc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010ce:	2306      	movs	r3, #6
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	4811      	ldr	r0, [pc, #68]	; (8001120 <MX_GPIO_Init+0x22c>)
 80010da:	f001 f9d9 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80010de:	2320      	movs	r3, #32
 80010e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	4619      	mov	r1, r3
 80010f0:	480c      	ldr	r0, [pc, #48]	; (8001124 <MX_GPIO_Init+0x230>)
 80010f2:	f001 f9cd 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010fa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	4804      	ldr	r0, [pc, #16]	; (800111c <MX_GPIO_Init+0x228>)
 800110c:	f001 f9c0 	bl	8002490 <HAL_GPIO_Init>

}
 8001110:	bf00      	nop
 8001112:	3730      	adds	r7, #48	; 0x30
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40023800 	.word	0x40023800
 800111c:	40021000 	.word	0x40021000
 8001120:	40020800 	.word	0x40020800
 8001124:	40020c00 	.word	0x40020c00
 8001128:	40020000 	.word	0x40020000
 800112c:	40020400 	.word	0x40020400

08001130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001134:	b672      	cpsid	i
}
 8001136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001138:	e7fe      	b.n	8001138 <Error_Handler+0x8>
	...

0800113c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <HAL_MspInit+0x4c>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a0f      	ldr	r2, [pc, #60]	; (8001188 <HAL_MspInit+0x4c>)
 800114c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <HAL_MspInit+0x4c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	603b      	str	r3, [r7, #0]
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_MspInit+0x4c>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	4a08      	ldr	r2, [pc, #32]	; (8001188 <HAL_MspInit+0x4c>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116c:	6413      	str	r3, [r2, #64]	; 0x40
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_MspInit+0x4c>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800117a:	2007      	movs	r0, #7
 800117c:	f001 f946 	bl	800240c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40023800 	.word	0x40023800

0800118c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08c      	sub	sp, #48	; 0x30
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a62      	ldr	r2, [pc, #392]	; (8001334 <HAL_CAN_MspInit+0x1a8>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d155      	bne.n	800125a <HAL_CAN_MspInit+0xce>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80011ae:	4b62      	ldr	r3, [pc, #392]	; (8001338 <HAL_CAN_MspInit+0x1ac>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	3301      	adds	r3, #1
 80011b4:	4a60      	ldr	r2, [pc, #384]	; (8001338 <HAL_CAN_MspInit+0x1ac>)
 80011b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80011b8:	4b5f      	ldr	r3, [pc, #380]	; (8001338 <HAL_CAN_MspInit+0x1ac>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d10d      	bne.n	80011dc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	4b5d      	ldr	r3, [pc, #372]	; (800133c <HAL_CAN_MspInit+0x1b0>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	4a5c      	ldr	r2, [pc, #368]	; (800133c <HAL_CAN_MspInit+0x1b0>)
 80011ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011ce:	6413      	str	r3, [r2, #64]	; 0x40
 80011d0:	4b5a      	ldr	r3, [pc, #360]	; (800133c <HAL_CAN_MspInit+0x1b0>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d8:	61bb      	str	r3, [r7, #24]
 80011da:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	4b56      	ldr	r3, [pc, #344]	; (800133c <HAL_CAN_MspInit+0x1b0>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	4a55      	ldr	r2, [pc, #340]	; (800133c <HAL_CAN_MspInit+0x1b0>)
 80011e6:	f043 0308 	orr.w	r3, r3, #8
 80011ea:	6313      	str	r3, [r2, #48]	; 0x30
 80011ec:	4b53      	ldr	r3, [pc, #332]	; (800133c <HAL_CAN_MspInit+0x1b0>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	f003 0308 	and.w	r3, r3, #8
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011f8:	2303      	movs	r3, #3
 80011fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001208:	2309      	movs	r3, #9
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	4619      	mov	r1, r3
 8001212:	484b      	ldr	r0, [pc, #300]	; (8001340 <HAL_CAN_MspInit+0x1b4>)
 8001214:	f001 f93c 	bl	8002490 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001218:	2200      	movs	r2, #0
 800121a:	2100      	movs	r1, #0
 800121c:	2013      	movs	r0, #19
 800121e:	f001 f900 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001222:	2013      	movs	r0, #19
 8001224:	f001 f919 	bl	800245a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	2014      	movs	r0, #20
 800122e:	f001 f8f8 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001232:	2014      	movs	r0, #20
 8001234:	f001 f911 	bl	800245a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	2100      	movs	r1, #0
 800123c:	2015      	movs	r0, #21
 800123e:	f001 f8f0 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001242:	2015      	movs	r0, #21
 8001244:	f001 f909 	bl	800245a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	2100      	movs	r1, #0
 800124c:	2016      	movs	r0, #22
 800124e:	f001 f8e8 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001252:	2016      	movs	r0, #22
 8001254:	f001 f901 	bl	800245a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001258:	e068      	b.n	800132c <HAL_CAN_MspInit+0x1a0>
  else if(hcan->Instance==CAN2)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a39      	ldr	r2, [pc, #228]	; (8001344 <HAL_CAN_MspInit+0x1b8>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d163      	bne.n	800132c <HAL_CAN_MspInit+0x1a0>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	4b34      	ldr	r3, [pc, #208]	; (800133c <HAL_CAN_MspInit+0x1b0>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	4a33      	ldr	r2, [pc, #204]	; (800133c <HAL_CAN_MspInit+0x1b0>)
 800126e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001272:	6413      	str	r3, [r2, #64]	; 0x40
 8001274:	4b31      	ldr	r3, [pc, #196]	; (800133c <HAL_CAN_MspInit+0x1b0>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001280:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <HAL_CAN_MspInit+0x1ac>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	4a2c      	ldr	r2, [pc, #176]	; (8001338 <HAL_CAN_MspInit+0x1ac>)
 8001288:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800128a:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <HAL_CAN_MspInit+0x1ac>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d10d      	bne.n	80012ae <HAL_CAN_MspInit+0x122>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b29      	ldr	r3, [pc, #164]	; (800133c <HAL_CAN_MspInit+0x1b0>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	4a28      	ldr	r2, [pc, #160]	; (800133c <HAL_CAN_MspInit+0x1b0>)
 800129c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012a0:	6413      	str	r3, [r2, #64]	; 0x40
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <HAL_CAN_MspInit+0x1b0>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <HAL_CAN_MspInit+0x1b0>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a21      	ldr	r2, [pc, #132]	; (800133c <HAL_CAN_MspInit+0x1b0>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b1f      	ldr	r3, [pc, #124]	; (800133c <HAL_CAN_MspInit+0x1b0>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80012ca:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80012ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80012dc:	2309      	movs	r3, #9
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	4619      	mov	r1, r3
 80012e6:	4818      	ldr	r0, [pc, #96]	; (8001348 <HAL_CAN_MspInit+0x1bc>)
 80012e8:	f001 f8d2 	bl	8002490 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	203f      	movs	r0, #63	; 0x3f
 80012f2:	f001 f896 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80012f6:	203f      	movs	r0, #63	; 0x3f
 80012f8:	f001 f8af 	bl	800245a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2100      	movs	r1, #0
 8001300:	2040      	movs	r0, #64	; 0x40
 8001302:	f001 f88e 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001306:	2040      	movs	r0, #64	; 0x40
 8001308:	f001 f8a7 	bl	800245a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	2041      	movs	r0, #65	; 0x41
 8001312:	f001 f886 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001316:	2041      	movs	r0, #65	; 0x41
 8001318:	f001 f89f 	bl	800245a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 800131c:	2200      	movs	r2, #0
 800131e:	2100      	movs	r1, #0
 8001320:	2042      	movs	r0, #66	; 0x42
 8001322:	f001 f87e 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 8001326:	2042      	movs	r0, #66	; 0x42
 8001328:	f001 f897 	bl	800245a <HAL_NVIC_EnableIRQ>
}
 800132c:	bf00      	nop
 800132e:	3730      	adds	r7, #48	; 0x30
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40006400 	.word	0x40006400
 8001338:	20000354 	.word	0x20000354
 800133c:	40023800 	.word	0x40023800
 8001340:	40020c00 	.word	0x40020c00
 8001344:	40006800 	.word	0x40006800
 8001348:	40020400 	.word	0x40020400

0800134c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a19      	ldr	r2, [pc, #100]	; (80013d0 <HAL_I2C_MspInit+0x84>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d12c      	bne.n	80013c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <HAL_I2C_MspInit+0x88>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <HAL_I2C_MspInit+0x88>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_I2C_MspInit+0x88>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800138a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800138e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001390:	2312      	movs	r3, #18
 8001392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001394:	2301      	movs	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800139c:	2304      	movs	r3, #4
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	480c      	ldr	r0, [pc, #48]	; (80013d8 <HAL_I2C_MspInit+0x8c>)
 80013a8:	f001 f872 	bl	8002490 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_I2C_MspInit+0x88>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <HAL_I2C_MspInit+0x88>)
 80013b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013ba:	6413      	str	r3, [r2, #64]	; 0x40
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_I2C_MspInit+0x88>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40005400 	.word	0x40005400
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020400 	.word	0x40020400

080013dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a19      	ldr	r2, [pc, #100]	; (8001460 <HAL_SPI_MspInit+0x84>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d12b      	bne.n	8001456 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <HAL_SPI_MspInit+0x88>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	4a17      	ldr	r2, [pc, #92]	; (8001464 <HAL_SPI_MspInit+0x88>)
 8001408:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800140c:	6453      	str	r3, [r2, #68]	; 0x44
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <HAL_SPI_MspInit+0x88>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <HAL_SPI_MspInit+0x88>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a10      	ldr	r2, [pc, #64]	; (8001464 <HAL_SPI_MspInit+0x88>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_SPI_MspInit+0x88>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001436:	23e0      	movs	r3, #224	; 0xe0
 8001438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001446:	2305      	movs	r3, #5
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <HAL_SPI_MspInit+0x8c>)
 8001452:	f001 f81d 	bl	8002490 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001456:	bf00      	nop
 8001458:	3728      	adds	r7, #40	; 0x28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40013000 	.word	0x40013000
 8001464:	40023800 	.word	0x40023800
 8001468:	40020000 	.word	0x40020000

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <NMI_Handler+0x4>

08001472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <HardFault_Handler+0x4>

08001478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <MemManage_Handler+0x4>

0800147e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <BusFault_Handler+0x4>

08001484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <UsageFault_Handler+0x4>

0800148a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b8:	f000 f92a 	bl	8001710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}

080014c0 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <WWDG_IRQHandler+0x10>)
 80014c6:	f003 f964 	bl	8004792 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000c50 	.word	0x20000c50

080014d4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <CAN1_TX_IRQHandler+0x10>)
 80014da:	f000 fcb5 	bl	8001e48 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000cc0 	.word	0x20000cc0

080014e8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <CAN1_RX0_IRQHandler+0x10>)
 80014ee:	f000 fcab 	bl	8001e48 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000cc0 	.word	0x20000cc0

080014fc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <CAN1_RX1_IRQHandler+0x10>)
 8001502:	f000 fca1 	bl	8001e48 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000cc0 	.word	0x20000cc0

08001510 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <CAN1_SCE_IRQHandler+0x10>)
 8001516:	f000 fc97 	bl	8001e48 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000cc0 	.word	0x20000cc0

08001524 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <CAN2_TX_IRQHandler+0x10>)
 800152a:	f000 fc8d 	bl	8001e48 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000c28 	.word	0x20000c28

08001538 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <CAN2_RX0_IRQHandler+0x10>)
 800153e:	f000 fc83 	bl	8001e48 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000c28 	.word	0x20000c28

0800154c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <CAN2_RX1_IRQHandler+0x10>)
 8001552:	f000 fc79 	bl	8001e48 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000c28 	.word	0x20000c28

08001560 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <CAN2_SCE_IRQHandler+0x10>)
 8001566:	f000 fc6f 	bl	8001e48 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000c28 	.word	0x20000c28

08001574 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <OTG_FS_IRQHandler+0x10>)
 800157a:	f001 fbed 	bl	8002d58 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200021bc 	.word	0x200021bc

08001588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001590:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <_sbrk+0x5c>)
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <_sbrk+0x60>)
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <_sbrk+0x64>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <_sbrk+0x68>)
 80015a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d207      	bcs.n	80015c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b8:	f006 fe46 	bl	8008248 <__errno>
 80015bc:	4603      	mov	r3, r0
 80015be:	220c      	movs	r2, #12
 80015c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	e009      	b.n	80015dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <_sbrk+0x64>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	4a05      	ldr	r2, [pc, #20]	; (80015ec <_sbrk+0x64>)
 80015d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20020000 	.word	0x20020000
 80015e8:	00004000 	.word	0x00004000
 80015ec:	20000358 	.word	0x20000358
 80015f0:	200025d8 	.word	0x200025d8

080015f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <SystemInit+0x20>)
 80015fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fe:	4a05      	ldr	r2, [pc, #20]	; (8001614 <SystemInit+0x20>)
 8001600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001650 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800161c:	480d      	ldr	r0, [pc, #52]	; (8001654 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800161e:	490e      	ldr	r1, [pc, #56]	; (8001658 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001620:	4a0e      	ldr	r2, [pc, #56]	; (800165c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001624:	e002      	b.n	800162c <LoopCopyDataInit>

08001626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162a:	3304      	adds	r3, #4

0800162c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800162c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001630:	d3f9      	bcc.n	8001626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001632:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001634:	4c0b      	ldr	r4, [pc, #44]	; (8001664 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001638:	e001      	b.n	800163e <LoopFillZerobss>

0800163a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800163c:	3204      	adds	r2, #4

0800163e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001640:	d3fb      	bcc.n	800163a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001642:	f7ff ffd7 	bl	80015f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001646:	f006 fe05 	bl	8008254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164a:	f7ff fa8d 	bl	8000b68 <main>
  bx  lr    
 800164e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001650:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001658:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 800165c:	08008c80 	.word	0x08008c80
  ldr r2, =_sbss
 8001660:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8001664:	200025d4 	.word	0x200025d4

08001668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001668:	e7fe      	b.n	8001668 <ADC_IRQHandler>
	...

0800166c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0d      	ldr	r2, [pc, #52]	; (80016ac <HAL_Init+0x40>)
 8001676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_Init+0x40>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <HAL_Init+0x40>)
 8001682:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001686:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <HAL_Init+0x40>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_Init+0x40>)
 800168e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001692:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001694:	2003      	movs	r0, #3
 8001696:	f000 feb9 	bl	800240c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169a:	2000      	movs	r0, #0
 800169c:	f000 f808 	bl	80016b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a0:	f7ff fd4c 	bl	800113c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023c00 	.word	0x40023c00

080016b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x54>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x58>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 fed1 	bl	8002476 <HAL_SYSTICK_Config>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e00e      	b.n	80016fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b0f      	cmp	r3, #15
 80016e2:	d80a      	bhi.n	80016fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e4:	2200      	movs	r2, #0
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f000 fe99 	bl	8002422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <HAL_InitTick+0x5c>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e000      	b.n	80016fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200000a4 	.word	0x200000a4
 8001708:	200000ac 	.word	0x200000ac
 800170c:	200000a8 	.word	0x200000a8

08001710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x20>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x24>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4413      	add	r3, r2
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <HAL_IncTick+0x24>)
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	200000ac 	.word	0x200000ac
 8001734:	20000ce8 	.word	0x20000ce8

08001738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return uwTick;
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <HAL_GetTick+0x14>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20000ce8 	.word	0x20000ce8

08001750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff ffee 	bl	8001738 <HAL_GetTick>
 800175c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001768:	d005      	beq.n	8001776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_Delay+0x44>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001776:	bf00      	nop
 8001778:	f7ff ffde 	bl	8001738 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d8f7      	bhi.n	8001778 <HAL_Delay+0x28>
  {
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200000ac 	.word	0x200000ac

08001798 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0ed      	b.n	8001986 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d102      	bne.n	80017bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff fce8 	bl	800118c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0201 	orr.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017cc:	f7ff ffb4 	bl	8001738 <HAL_GetTick>
 80017d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017d2:	e012      	b.n	80017fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017d4:	f7ff ffb0 	bl	8001738 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b0a      	cmp	r3, #10
 80017e0:	d90b      	bls.n	80017fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2205      	movs	r2, #5
 80017f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e0c5      	b.n	8001986 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0e5      	beq.n	80017d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 0202 	bic.w	r2, r2, #2
 8001816:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001818:	f7ff ff8e 	bl	8001738 <HAL_GetTick>
 800181c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800181e:	e012      	b.n	8001846 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001820:	f7ff ff8a 	bl	8001738 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b0a      	cmp	r3, #10
 800182c:	d90b      	bls.n	8001846 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2205      	movs	r2, #5
 800183e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e09f      	b.n	8001986 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1e5      	bne.n	8001820 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	7e1b      	ldrb	r3, [r3, #24]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d108      	bne.n	800186e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	e007      	b.n	800187e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800187c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	7e5b      	ldrb	r3, [r3, #25]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d108      	bne.n	8001898 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	e007      	b.n	80018a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7e9b      	ldrb	r3, [r3, #26]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d108      	bne.n	80018c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 0220 	orr.w	r2, r2, #32
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	e007      	b.n	80018d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0220 	bic.w	r2, r2, #32
 80018d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	7edb      	ldrb	r3, [r3, #27]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d108      	bne.n	80018ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0210 	bic.w	r2, r2, #16
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	e007      	b.n	80018fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0210 	orr.w	r2, r2, #16
 80018fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7f1b      	ldrb	r3, [r3, #28]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d108      	bne.n	8001916 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0208 	orr.w	r2, r2, #8
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	e007      	b.n	8001926 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0208 	bic.w	r2, r2, #8
 8001924:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	7f5b      	ldrb	r3, [r3, #29]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d108      	bne.n	8001940 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f042 0204 	orr.w	r2, r2, #4
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	e007      	b.n	8001950 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0204 	bic.w	r2, r2, #4
 800194e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	ea42 0103 	orr.w	r1, r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	1e5a      	subs	r2, r3, #1
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001990:	b480      	push	{r7}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80019a8:	7cfb      	ldrb	r3, [r7, #19]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d003      	beq.n	80019b6 <HAL_CAN_ConfigFilter+0x26>
 80019ae:	7cfb      	ldrb	r3, [r7, #19]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	f040 80be 	bne.w	8001b32 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80019b6:	4b65      	ldr	r3, [pc, #404]	; (8001b4c <HAL_CAN_ConfigFilter+0x1bc>)
 80019b8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019c0:	f043 0201 	orr.w	r2, r3, #1
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	431a      	orrs	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	2201      	movs	r2, #1
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	401a      	ands	r2, r3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d123      	bne.n	8001a60 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	401a      	ands	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a3a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	3248      	adds	r2, #72	; 0x48
 8001a40:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a54:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a56:	6979      	ldr	r1, [r7, #20]
 8001a58:	3348      	adds	r3, #72	; 0x48
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	440b      	add	r3, r1
 8001a5e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d122      	bne.n	8001aae <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	431a      	orrs	r2, r3
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a88:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	3248      	adds	r2, #72	; 0x48
 8001a8e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001aa2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001aa4:	6979      	ldr	r1, [r7, #20]
 8001aa6:	3348      	adds	r3, #72	; 0x48
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	440b      	add	r3, r1
 8001aac:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d109      	bne.n	8001aca <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	401a      	ands	r2, r3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001ac8:	e007      	b.n	8001ada <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d109      	bne.n	8001af6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	43db      	mvns	r3, r3
 8001aec:	401a      	ands	r2, r3
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001af4:	e007      	b.n	8001b06 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	431a      	orrs	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d107      	bne.n	8001b1e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	431a      	orrs	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b24:	f023 0201 	bic.w	r2, r3, #1
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e006      	b.n	8001b40 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
  }
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	371c      	adds	r7, #28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	40006400 	.word	0x40006400

08001b50 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d12e      	bne.n	8001bc2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0201 	bic.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b7c:	f7ff fddc 	bl	8001738 <HAL_GetTick>
 8001b80:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b82:	e012      	b.n	8001baa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b84:	f7ff fdd8 	bl	8001738 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b0a      	cmp	r3, #10
 8001b90:	d90b      	bls.n	8001baa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2205      	movs	r2, #5
 8001ba2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e012      	b.n	8001bd0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1e5      	bne.n	8001b84 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e006      	b.n	8001bd0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
  }
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bec:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bee:	7dfb      	ldrb	r3, [r7, #23]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d003      	beq.n	8001bfc <HAL_CAN_GetRxMessage+0x24>
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	f040 80f3 	bne.w	8001de2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10e      	bne.n	8001c20 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d116      	bne.n	8001c3e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0e7      	b.n	8001df0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d107      	bne.n	8001c3e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e0d8      	b.n	8001df0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	331b      	adds	r3, #27
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	4413      	add	r3, r2
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0204 	and.w	r2, r3, #4
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10c      	bne.n	8001c76 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	331b      	adds	r3, #27
 8001c64:	011b      	lsls	r3, r3, #4
 8001c66:	4413      	add	r3, r2
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	0d5b      	lsrs	r3, r3, #21
 8001c6c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	e00b      	b.n	8001c8e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	331b      	adds	r3, #27
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	4413      	add	r3, r2
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	08db      	lsrs	r3, r3, #3
 8001c86:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	331b      	adds	r3, #27
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	4413      	add	r3, r2
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0202 	and.w	r2, r3, #2
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	331b      	adds	r3, #27
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	4413      	add	r3, r2
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 020f 	and.w	r2, r3, #15
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	331b      	adds	r3, #27
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3304      	adds	r3, #4
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	331b      	adds	r3, #27
 8001cdc:	011b      	lsls	r3, r3, #4
 8001cde:	4413      	add	r3, r2
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	0c1b      	lsrs	r3, r3, #16
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	0a1a      	lsrs	r2, r3, #8
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	3301      	adds	r3, #1
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	4413      	add	r3, r2
 8001d26:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	0c1a      	lsrs	r2, r3, #16
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	3302      	adds	r3, #2
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	0e1a      	lsrs	r2, r3, #24
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	3303      	adds	r3, #3
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	3304      	adds	r3, #4
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0a1a      	lsrs	r2, r3, #8
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	3305      	adds	r3, #5
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	0c1a      	lsrs	r2, r3, #16
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	3306      	adds	r3, #6
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	0e1a      	lsrs	r2, r3, #24
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	3307      	adds	r3, #7
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d108      	bne.n	8001dce <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0220 	orr.w	r2, r2, #32
 8001dca:	60da      	str	r2, [r3, #12]
 8001dcc:	e007      	b.n	8001dde <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f042 0220 	orr.w	r2, r2, #32
 8001ddc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e006      	b.n	8001df0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
  }
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	371c      	adds	r7, #28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e0c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d002      	beq.n	8001e1a <HAL_CAN_ActivateNotification+0x1e>
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d109      	bne.n	8001e2e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6959      	ldr	r1, [r3, #20]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e006      	b.n	8001e3c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
  }
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d07c      	beq.n	8001f88 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d023      	beq.n	8001ee0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7fe fd9c 	bl	80009e8 <HAL_CAN_TxMailbox0CompleteCallback>
 8001eb0:	e016      	b.n	8001ee0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d004      	beq.n	8001ec6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec4:	e00c      	b.n	8001ee0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d004      	beq.n	8001eda <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed8:	e002      	b.n	8001ee0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f96b 	bl	80021b6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d024      	beq.n	8001f34 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ef2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7fe fdb2 	bl	8000a68 <HAL_CAN_TxMailbox1CompleteCallback>
 8001f04:	e016      	b.n	8001f34 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d004      	beq.n	8001f1a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
 8001f18:	e00c      	b.n	8001f34 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d004      	beq.n	8001f2e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f2c:	e002      	b.n	8001f34 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f94b 	bl	80021ca <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d024      	beq.n	8001f88 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f46:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7fe fdc8 	bl	8000ae8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001f58:	e016      	b.n	8001f88 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d004      	beq.n	8001f6e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6c:	e00c      	b.n	8001f88 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d004      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f80:	e002      	b.n	8001f88 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f92b 	bl	80021de <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00c      	beq.n	8001fac <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d007      	beq.n	8001fac <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2210      	movs	r2, #16
 8001faa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00b      	beq.n	8001fce <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d006      	beq.n	8001fce <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2208      	movs	r2, #8
 8001fc6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f912 	bl	80021f2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d009      	beq.n	8001fec <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7fe fabe 	bl	8000568 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00c      	beq.n	8002010 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	f003 0310 	and.w	r3, r3, #16
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d007      	beq.n	8002010 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002006:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2210      	movs	r2, #16
 800200e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	f003 0320 	and.w	r3, r3, #32
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00b      	beq.n	8002032 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d006      	beq.n	8002032 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2208      	movs	r2, #8
 800202a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f8f4 	bl	800221a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002032:	6a3b      	ldr	r3, [r7, #32]
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	2b00      	cmp	r3, #0
 800203a:	d009      	beq.n	8002050 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8db 	bl	8002206 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00b      	beq.n	8002072 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b00      	cmp	r3, #0
 8002062:	d006      	beq.n	8002072 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2210      	movs	r2, #16
 800206a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f8de 	bl	800222e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00b      	beq.n	8002094 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d006      	beq.n	8002094 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2208      	movs	r2, #8
 800208c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f8d7 	bl	8002242 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d07b      	beq.n	8002196 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d072      	beq.n	800218e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d008      	beq.n	80020c4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d008      	beq.n	80020e0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	f043 0302 	orr.w	r3, r3, #2
 80020de:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d008      	beq.n	80020fc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020fc:	6a3b      	ldr	r3, [r7, #32]
 80020fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002102:	2b00      	cmp	r3, #0
 8002104:	d043      	beq.n	800218e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800210c:	2b00      	cmp	r3, #0
 800210e:	d03e      	beq.n	800218e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002116:	2b60      	cmp	r3, #96	; 0x60
 8002118:	d02b      	beq.n	8002172 <HAL_CAN_IRQHandler+0x32a>
 800211a:	2b60      	cmp	r3, #96	; 0x60
 800211c:	d82e      	bhi.n	800217c <HAL_CAN_IRQHandler+0x334>
 800211e:	2b50      	cmp	r3, #80	; 0x50
 8002120:	d022      	beq.n	8002168 <HAL_CAN_IRQHandler+0x320>
 8002122:	2b50      	cmp	r3, #80	; 0x50
 8002124:	d82a      	bhi.n	800217c <HAL_CAN_IRQHandler+0x334>
 8002126:	2b40      	cmp	r3, #64	; 0x40
 8002128:	d019      	beq.n	800215e <HAL_CAN_IRQHandler+0x316>
 800212a:	2b40      	cmp	r3, #64	; 0x40
 800212c:	d826      	bhi.n	800217c <HAL_CAN_IRQHandler+0x334>
 800212e:	2b30      	cmp	r3, #48	; 0x30
 8002130:	d010      	beq.n	8002154 <HAL_CAN_IRQHandler+0x30c>
 8002132:	2b30      	cmp	r3, #48	; 0x30
 8002134:	d822      	bhi.n	800217c <HAL_CAN_IRQHandler+0x334>
 8002136:	2b10      	cmp	r3, #16
 8002138:	d002      	beq.n	8002140 <HAL_CAN_IRQHandler+0x2f8>
 800213a:	2b20      	cmp	r3, #32
 800213c:	d005      	beq.n	800214a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800213e:	e01d      	b.n	800217c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	f043 0308 	orr.w	r3, r3, #8
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002148:	e019      	b.n	800217e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	f043 0310 	orr.w	r3, r3, #16
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002152:	e014      	b.n	800217e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	f043 0320 	orr.w	r3, r3, #32
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800215c:	e00f      	b.n	800217e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002166:	e00a      	b.n	800217e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002170:	e005      	b.n	800217e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800217a:	e000      	b.n	800217e <HAL_CAN_IRQHandler+0x336>
            break;
 800217c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699a      	ldr	r2, [r3, #24]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800218c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2204      	movs	r2, #4
 8002194:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f854 	bl	8002256 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80021ae:	bf00      	nop
 80021b0:	3728      	adds	r7, #40	; 0x28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002288:	4013      	ands	r3, r2
 800228a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800229c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229e:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	60d3      	str	r3, [r2, #12]
}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <__NVIC_GetPriorityGrouping+0x18>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	0a1b      	lsrs	r3, r3, #8
 80022be:	f003 0307 	and.w	r3, r3, #7
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	db0b      	blt.n	80022fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	f003 021f 	and.w	r2, r3, #31
 80022e8:	4907      	ldr	r1, [pc, #28]	; (8002308 <__NVIC_EnableIRQ+0x38>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	2001      	movs	r0, #1
 80022f2:	fa00 f202 	lsl.w	r2, r0, r2
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000e100 	.word	0xe000e100

0800230c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	6039      	str	r1, [r7, #0]
 8002316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231c:	2b00      	cmp	r3, #0
 800231e:	db0a      	blt.n	8002336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	490c      	ldr	r1, [pc, #48]	; (8002358 <__NVIC_SetPriority+0x4c>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	0112      	lsls	r2, r2, #4
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	440b      	add	r3, r1
 8002330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002334:	e00a      	b.n	800234c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4908      	ldr	r1, [pc, #32]	; (800235c <__NVIC_SetPriority+0x50>)
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3b04      	subs	r3, #4
 8002344:	0112      	lsls	r2, r2, #4
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	440b      	add	r3, r1
 800234a:	761a      	strb	r2, [r3, #24]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000e100 	.word	0xe000e100
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	; 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f1c3 0307 	rsb	r3, r3, #7
 800237a:	2b04      	cmp	r3, #4
 800237c:	bf28      	it	cs
 800237e:	2304      	movcs	r3, #4
 8002380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3304      	adds	r3, #4
 8002386:	2b06      	cmp	r3, #6
 8002388:	d902      	bls.n	8002390 <NVIC_EncodePriority+0x30>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3b03      	subs	r3, #3
 800238e:	e000      	b.n	8002392 <NVIC_EncodePriority+0x32>
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	f04f 32ff 	mov.w	r2, #4294967295
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43da      	mvns	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	401a      	ands	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	43d9      	mvns	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	4313      	orrs	r3, r2
         );
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3724      	adds	r7, #36	; 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d8:	d301      	bcc.n	80023de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023da:	2301      	movs	r3, #1
 80023dc:	e00f      	b.n	80023fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <SysTick_Config+0x40>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e6:	210f      	movs	r1, #15
 80023e8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ec:	f7ff ff8e 	bl	800230c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <SysTick_Config+0x40>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f6:	4b04      	ldr	r3, [pc, #16]	; (8002408 <SysTick_Config+0x40>)
 80023f8:	2207      	movs	r2, #7
 80023fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	e000e010 	.word	0xe000e010

0800240c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff ff29 	bl	800226c <__NVIC_SetPriorityGrouping>
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002422:	b580      	push	{r7, lr}
 8002424:	b086      	sub	sp, #24
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002434:	f7ff ff3e 	bl	80022b4 <__NVIC_GetPriorityGrouping>
 8002438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	6978      	ldr	r0, [r7, #20]
 8002440:	f7ff ff8e 	bl	8002360 <NVIC_EncodePriority>
 8002444:	4602      	mov	r2, r0
 8002446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff5d 	bl	800230c <__NVIC_SetPriority>
}
 8002452:	bf00      	nop
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	4603      	mov	r3, r0
 8002462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff31 	bl	80022d0 <__NVIC_EnableIRQ>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ffa2 	bl	80023c8 <SysTick_Config>
 8002484:	4603      	mov	r3, r0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002490:	b480      	push	{r7}
 8002492:	b089      	sub	sp, #36	; 0x24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	e16b      	b.n	8002784 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024ac:	2201      	movs	r2, #1
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	f040 815a 	bne.w	800277e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d005      	beq.n	80024e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d130      	bne.n	8002544 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	2203      	movs	r2, #3
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002518:	2201      	movs	r2, #1
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	f003 0201 	and.w	r2, r3, #1
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	2b03      	cmp	r3, #3
 800254e:	d017      	beq.n	8002580 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	2203      	movs	r2, #3
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d123      	bne.n	80025d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	08da      	lsrs	r2, r3, #3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3208      	adds	r2, #8
 8002594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	220f      	movs	r2, #15
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	08da      	lsrs	r2, r3, #3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3208      	adds	r2, #8
 80025ce:	69b9      	ldr	r1, [r7, #24]
 80025d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	2203      	movs	r2, #3
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0203 	and.w	r2, r3, #3
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 80b4 	beq.w	800277e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	4b60      	ldr	r3, [pc, #384]	; (800279c <HAL_GPIO_Init+0x30c>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	4a5f      	ldr	r2, [pc, #380]	; (800279c <HAL_GPIO_Init+0x30c>)
 8002620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002624:	6453      	str	r3, [r2, #68]	; 0x44
 8002626:	4b5d      	ldr	r3, [pc, #372]	; (800279c <HAL_GPIO_Init+0x30c>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002632:	4a5b      	ldr	r2, [pc, #364]	; (80027a0 <HAL_GPIO_Init+0x310>)
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	089b      	lsrs	r3, r3, #2
 8002638:	3302      	adds	r3, #2
 800263a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	220f      	movs	r2, #15
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a52      	ldr	r2, [pc, #328]	; (80027a4 <HAL_GPIO_Init+0x314>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d02b      	beq.n	80026b6 <HAL_GPIO_Init+0x226>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a51      	ldr	r2, [pc, #324]	; (80027a8 <HAL_GPIO_Init+0x318>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d025      	beq.n	80026b2 <HAL_GPIO_Init+0x222>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a50      	ldr	r2, [pc, #320]	; (80027ac <HAL_GPIO_Init+0x31c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d01f      	beq.n	80026ae <HAL_GPIO_Init+0x21e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4f      	ldr	r2, [pc, #316]	; (80027b0 <HAL_GPIO_Init+0x320>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d019      	beq.n	80026aa <HAL_GPIO_Init+0x21a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4e      	ldr	r2, [pc, #312]	; (80027b4 <HAL_GPIO_Init+0x324>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d013      	beq.n	80026a6 <HAL_GPIO_Init+0x216>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4d      	ldr	r2, [pc, #308]	; (80027b8 <HAL_GPIO_Init+0x328>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00d      	beq.n	80026a2 <HAL_GPIO_Init+0x212>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4c      	ldr	r2, [pc, #304]	; (80027bc <HAL_GPIO_Init+0x32c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d007      	beq.n	800269e <HAL_GPIO_Init+0x20e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4b      	ldr	r2, [pc, #300]	; (80027c0 <HAL_GPIO_Init+0x330>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d101      	bne.n	800269a <HAL_GPIO_Init+0x20a>
 8002696:	2307      	movs	r3, #7
 8002698:	e00e      	b.n	80026b8 <HAL_GPIO_Init+0x228>
 800269a:	2308      	movs	r3, #8
 800269c:	e00c      	b.n	80026b8 <HAL_GPIO_Init+0x228>
 800269e:	2306      	movs	r3, #6
 80026a0:	e00a      	b.n	80026b8 <HAL_GPIO_Init+0x228>
 80026a2:	2305      	movs	r3, #5
 80026a4:	e008      	b.n	80026b8 <HAL_GPIO_Init+0x228>
 80026a6:	2304      	movs	r3, #4
 80026a8:	e006      	b.n	80026b8 <HAL_GPIO_Init+0x228>
 80026aa:	2303      	movs	r3, #3
 80026ac:	e004      	b.n	80026b8 <HAL_GPIO_Init+0x228>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e002      	b.n	80026b8 <HAL_GPIO_Init+0x228>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_GPIO_Init+0x228>
 80026b6:	2300      	movs	r3, #0
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	f002 0203 	and.w	r2, r2, #3
 80026be:	0092      	lsls	r2, r2, #2
 80026c0:	4093      	lsls	r3, r2
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026c8:	4935      	ldr	r1, [pc, #212]	; (80027a0 <HAL_GPIO_Init+0x310>)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	089b      	lsrs	r3, r3, #2
 80026ce:	3302      	adds	r3, #2
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026d6:	4b3b      	ldr	r3, [pc, #236]	; (80027c4 <HAL_GPIO_Init+0x334>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026fa:	4a32      	ldr	r2, [pc, #200]	; (80027c4 <HAL_GPIO_Init+0x334>)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002700:	4b30      	ldr	r3, [pc, #192]	; (80027c4 <HAL_GPIO_Init+0x334>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002724:	4a27      	ldr	r2, [pc, #156]	; (80027c4 <HAL_GPIO_Init+0x334>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800272a:	4b26      	ldr	r3, [pc, #152]	; (80027c4 <HAL_GPIO_Init+0x334>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800274e:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <HAL_GPIO_Init+0x334>)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002754:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <HAL_GPIO_Init+0x334>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002778:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <HAL_GPIO_Init+0x334>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3301      	adds	r3, #1
 8002782:	61fb      	str	r3, [r7, #28]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	2b0f      	cmp	r3, #15
 8002788:	f67f ae90 	bls.w	80024ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800278c:	bf00      	nop
 800278e:	bf00      	nop
 8002790:	3724      	adds	r7, #36	; 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800
 80027a0:	40013800 	.word	0x40013800
 80027a4:	40020000 	.word	0x40020000
 80027a8:	40020400 	.word	0x40020400
 80027ac:	40020800 	.word	0x40020800
 80027b0:	40020c00 	.word	0x40020c00
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40021400 	.word	0x40021400
 80027bc:	40021800 	.word	0x40021800
 80027c0:	40021c00 	.word	0x40021c00
 80027c4:	40013c00 	.word	0x40013c00

080027c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	807b      	strh	r3, [r7, #2]
 80027d4:	4613      	mov	r3, r2
 80027d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027d8:	787b      	ldrb	r3, [r7, #1]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027de:	887a      	ldrh	r2, [r7, #2]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027e4:	e003      	b.n	80027ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027e6:	887b      	ldrh	r3, [r7, #2]
 80027e8:	041a      	lsls	r2, r3, #16
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	619a      	str	r2, [r3, #24]
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b085      	sub	sp, #20
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	460b      	mov	r3, r1
 8002804:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800280c:	887a      	ldrh	r2, [r7, #2]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4013      	ands	r3, r2
 8002812:	041a      	lsls	r2, r3, #16
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	43d9      	mvns	r1, r3
 8002818:	887b      	ldrh	r3, [r7, #2]
 800281a:	400b      	ands	r3, r1
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	619a      	str	r2, [r3, #24]
}
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
	...

08002830 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e12b      	b.n	8002a9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7fe fd78 	bl	800134c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2224      	movs	r2, #36	; 0x24
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0201 	bic.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002882:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002892:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002894:	f001 fee0 	bl	8004658 <HAL_RCC_GetPCLK1Freq>
 8002898:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4a81      	ldr	r2, [pc, #516]	; (8002aa4 <HAL_I2C_Init+0x274>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d807      	bhi.n	80028b4 <HAL_I2C_Init+0x84>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4a80      	ldr	r2, [pc, #512]	; (8002aa8 <HAL_I2C_Init+0x278>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	bf94      	ite	ls
 80028ac:	2301      	movls	r3, #1
 80028ae:	2300      	movhi	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	e006      	b.n	80028c2 <HAL_I2C_Init+0x92>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4a7d      	ldr	r2, [pc, #500]	; (8002aac <HAL_I2C_Init+0x27c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	bf94      	ite	ls
 80028bc:	2301      	movls	r3, #1
 80028be:	2300      	movhi	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e0e7      	b.n	8002a9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4a78      	ldr	r2, [pc, #480]	; (8002ab0 <HAL_I2C_Init+0x280>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	0c9b      	lsrs	r3, r3, #18
 80028d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4a6a      	ldr	r2, [pc, #424]	; (8002aa4 <HAL_I2C_Init+0x274>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d802      	bhi.n	8002904 <HAL_I2C_Init+0xd4>
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	3301      	adds	r3, #1
 8002902:	e009      	b.n	8002918 <HAL_I2C_Init+0xe8>
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800290a:	fb02 f303 	mul.w	r3, r2, r3
 800290e:	4a69      	ldr	r2, [pc, #420]	; (8002ab4 <HAL_I2C_Init+0x284>)
 8002910:	fba2 2303 	umull	r2, r3, r2, r3
 8002914:	099b      	lsrs	r3, r3, #6
 8002916:	3301      	adds	r3, #1
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	430b      	orrs	r3, r1
 800291e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800292a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	495c      	ldr	r1, [pc, #368]	; (8002aa4 <HAL_I2C_Init+0x274>)
 8002934:	428b      	cmp	r3, r1
 8002936:	d819      	bhi.n	800296c <HAL_I2C_Init+0x13c>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1e59      	subs	r1, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	fbb1 f3f3 	udiv	r3, r1, r3
 8002946:	1c59      	adds	r1, r3, #1
 8002948:	f640 73fc 	movw	r3, #4092	; 0xffc
 800294c:	400b      	ands	r3, r1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_I2C_Init+0x138>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1e59      	subs	r1, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002960:	3301      	adds	r3, #1
 8002962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002966:	e051      	b.n	8002a0c <HAL_I2C_Init+0x1dc>
 8002968:	2304      	movs	r3, #4
 800296a:	e04f      	b.n	8002a0c <HAL_I2C_Init+0x1dc>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d111      	bne.n	8002998 <HAL_I2C_Init+0x168>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1e58      	subs	r0, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	440b      	add	r3, r1
 8002982:	fbb0 f3f3 	udiv	r3, r0, r3
 8002986:	3301      	adds	r3, #1
 8002988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf0c      	ite	eq
 8002990:	2301      	moveq	r3, #1
 8002992:	2300      	movne	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	e012      	b.n	80029be <HAL_I2C_Init+0x18e>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1e58      	subs	r0, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6859      	ldr	r1, [r3, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	0099      	lsls	r1, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ae:	3301      	adds	r3, #1
 80029b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	bf0c      	ite	eq
 80029b8:	2301      	moveq	r3, #1
 80029ba:	2300      	movne	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_I2C_Init+0x196>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e022      	b.n	8002a0c <HAL_I2C_Init+0x1dc>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10e      	bne.n	80029ec <HAL_I2C_Init+0x1bc>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1e58      	subs	r0, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6859      	ldr	r1, [r3, #4]
 80029d6:	460b      	mov	r3, r1
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	440b      	add	r3, r1
 80029dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e0:	3301      	adds	r3, #1
 80029e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ea:	e00f      	b.n	8002a0c <HAL_I2C_Init+0x1dc>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1e58      	subs	r0, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6859      	ldr	r1, [r3, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	0099      	lsls	r1, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a02:	3301      	adds	r3, #1
 8002a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	6809      	ldr	r1, [r1, #0]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69da      	ldr	r2, [r3, #28]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6911      	ldr	r1, [r2, #16]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68d2      	ldr	r2, [r2, #12]
 8002a46:	4311      	orrs	r1, r2
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	000186a0 	.word	0x000186a0
 8002aa8:	001e847f 	.word	0x001e847f
 8002aac:	003d08ff 	.word	0x003d08ff
 8002ab0:	431bde83 	.word	0x431bde83
 8002ab4:	10624dd3 	.word	0x10624dd3

08002ab8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aba:	b08f      	sub	sp, #60	; 0x3c
 8002abc:	af0a      	add	r7, sp, #40	; 0x28
 8002abe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e10f      	b.n	8002cea <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d106      	bne.n	8002aea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f005 f88d 	bl	8007c04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2203      	movs	r2, #3
 8002aee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d102      	bne.n	8002b04 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f001 ff80 	bl	8004a0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	687e      	ldr	r6, [r7, #4]
 8002b16:	466d      	mov	r5, sp
 8002b18:	f106 0410 	add.w	r4, r6, #16
 8002b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b28:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b2c:	1d33      	adds	r3, r6, #4
 8002b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b30:	6838      	ldr	r0, [r7, #0]
 8002b32:	f001 fe57 	bl	80047e4 <USB_CoreInit>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0d0      	b.n	8002cea <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f001 ff6e 	bl	8004a30 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b54:	2300      	movs	r3, #0
 8002b56:	73fb      	strb	r3, [r7, #15]
 8002b58:	e04a      	b.n	8002bf0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b5a:	7bfa      	ldrb	r2, [r7, #15]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	333d      	adds	r3, #61	; 0x3d
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	1a9b      	subs	r3, r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	333c      	adds	r3, #60	; 0x3c
 8002b7e:	7bfa      	ldrb	r2, [r7, #15]
 8002b80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b82:	7bfa      	ldrb	r2, [r7, #15]
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	b298      	uxth	r0, r3
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	1a9b      	subs	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	3342      	adds	r3, #66	; 0x42
 8002b96:	4602      	mov	r2, r0
 8002b98:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b9a:	7bfa      	ldrb	r2, [r7, #15]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	333f      	adds	r3, #63	; 0x3f
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	3344      	adds	r3, #68	; 0x44
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	3348      	adds	r3, #72	; 0x48
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	1a9b      	subs	r3, r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	3350      	adds	r3, #80	; 0x50
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	3301      	adds	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
 8002bf0:	7bfa      	ldrb	r2, [r7, #15]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d3af      	bcc.n	8002b5a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	73fb      	strb	r3, [r7, #15]
 8002bfe:	e044      	b.n	8002c8a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	1a9b      	subs	r3, r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	3301      	adds	r3, #1
 8002c88:	73fb      	strb	r3, [r7, #15]
 8002c8a:	7bfa      	ldrb	r2, [r7, #15]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d3b5      	bcc.n	8002c00 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	687e      	ldr	r6, [r7, #4]
 8002c9c:	466d      	mov	r5, sp
 8002c9e:	f106 0410 	add.w	r4, r6, #16
 8002ca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ca4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ca6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ca8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002caa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cae:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cb2:	1d33      	adds	r3, r6, #4
 8002cb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cb6:	6838      	ldr	r0, [r7, #0]
 8002cb8:	f001 ff06 	bl	8004ac8 <USB_DevInit>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e00d      	b.n	8002cea <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f002 ff82 	bl	8005bec <USB_DevDisconnect>

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cf2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_PCD_Start+0x1c>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e020      	b.n	8002d50 <HAL_PCD_Start+0x5e>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d109      	bne.n	8002d32 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d005      	beq.n	8002d32 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f001 fe58 	bl	80049ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f002 ff32 	bl	8005baa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b08d      	sub	sp, #52	; 0x34
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f002 fff0 	bl	8005d54 <USB_GetMode>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f040 839d 	bne.w	80034b6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f002 ff54 	bl	8005c2e <USB_ReadInterrupts>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 8393 	beq.w	80034b4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f002 ff4b 	bl	8005c2e <USB_ReadInterrupts>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d107      	bne.n	8002db2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695a      	ldr	r2, [r3, #20]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f002 0202 	and.w	r2, r2, #2
 8002db0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f002 ff39 	bl	8005c2e <USB_ReadInterrupts>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b10      	cmp	r3, #16
 8002dc4:	d161      	bne.n	8002e8a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	699a      	ldr	r2, [r3, #24]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0210 	bic.w	r2, r2, #16
 8002dd4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	f003 020f 	and.w	r2, r3, #15
 8002de2:	4613      	mov	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	1a9b      	subs	r3, r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4413      	add	r3, r2
 8002df2:	3304      	adds	r3, #4
 8002df4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	0c5b      	lsrs	r3, r3, #17
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d124      	bne.n	8002e4c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d035      	beq.n	8002e7a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	6a38      	ldr	r0, [r7, #32]
 8002e22:	f002 fd70 	bl	8005906 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e32:	441a      	add	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	699a      	ldr	r2, [r3, #24]
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e44:	441a      	add	r2, r3
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	619a      	str	r2, [r3, #24]
 8002e4a:	e016      	b.n	8002e7a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	0c5b      	lsrs	r3, r3, #17
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	2b06      	cmp	r3, #6
 8002e56:	d110      	bne.n	8002e7a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e5e:	2208      	movs	r2, #8
 8002e60:	4619      	mov	r1, r3
 8002e62:	6a38      	ldr	r0, [r7, #32]
 8002e64:	f002 fd4f 	bl	8005906 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	699a      	ldr	r2, [r3, #24]
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	091b      	lsrs	r3, r3, #4
 8002e70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e74:	441a      	add	r2, r3
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699a      	ldr	r2, [r3, #24]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0210 	orr.w	r2, r2, #16
 8002e88:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f002 fecd 	bl	8005c2e <USB_ReadInterrupts>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e9a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e9e:	d16e      	bne.n	8002f7e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f002 fed3 	bl	8005c54 <USB_ReadDevAllOutEpInterrupt>
 8002eae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002eb0:	e062      	b.n	8002f78 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d057      	beq.n	8002f6c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f002 fef8 	bl	8005cbc <USB_ReadDevOutEPInterrupt>
 8002ecc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00c      	beq.n	8002ef2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	015a      	lsls	r2, r3, #5
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	4413      	add	r3, r2
 8002ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002eea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fdb1 	bl	8003a54 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00c      	beq.n	8002f16 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2308      	movs	r3, #8
 8002f0c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 feab 	bl	8003c6c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2310      	movs	r3, #16
 8002f30:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2320      	movs	r3, #32
 8002f4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d009      	beq.n	8002f6c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f64:	461a      	mov	r2, r3
 8002f66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f6a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	3301      	adds	r3, #1
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d199      	bne.n	8002eb2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f002 fe53 	bl	8005c2e <USB_ReadInterrupts>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f92:	f040 80c0 	bne.w	8003116 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f002 fe74 	bl	8005c88 <USB_ReadDevAllInEpInterrupt>
 8002fa0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002fa6:	e0b2      	b.n	800310e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 80a7 	beq.w	8003102 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f002 fe9a 	bl	8005cf8 <USB_ReadDevInEPInterrupt>
 8002fc4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d057      	beq.n	8003080 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69f9      	ldr	r1, [r7, #28]
 8002fec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003000:	461a      	mov	r2, r3
 8003002:	2301      	movs	r3, #1
 8003004:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d132      	bne.n	8003074 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	1a9b      	subs	r3, r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	3348      	adds	r3, #72	; 0x48
 800301e:	6819      	ldr	r1, [r3, #0]
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003024:	4613      	mov	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4403      	add	r3, r0
 800302e:	3344      	adds	r3, #68	; 0x44
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4419      	add	r1, r3
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003038:	4613      	mov	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4403      	add	r3, r0
 8003042:	3348      	adds	r3, #72	; 0x48
 8003044:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	2b00      	cmp	r3, #0
 800304a:	d113      	bne.n	8003074 <HAL_PCD_IRQHandler+0x31c>
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003050:	4613      	mov	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	3350      	adds	r3, #80	; 0x50
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d108      	bne.n	8003074 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800306c:	461a      	mov	r2, r3
 800306e:	2101      	movs	r1, #1
 8003070:	f002 fea2 	bl	8005db8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	b2db      	uxtb	r3, r3
 8003078:	4619      	mov	r1, r3
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f004 fe51 	bl	8007d22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d008      	beq.n	800309c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	4413      	add	r3, r2
 8003092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003096:	461a      	mov	r2, r3
 8003098:	2308      	movs	r3, #8
 800309a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d008      	beq.n	80030b8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b2:	461a      	mov	r2, r3
 80030b4:	2310      	movs	r3, #16
 80030b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d008      	beq.n	80030d4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ce:	461a      	mov	r2, r3
 80030d0:	2340      	movs	r3, #64	; 0x40
 80030d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d008      	beq.n	80030f0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	015a      	lsls	r2, r3, #5
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ea:	461a      	mov	r2, r3
 80030ec:	2302      	movs	r3, #2
 80030ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80030fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fc1b 	bl	8003938 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	3301      	adds	r3, #1
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310a:	085b      	lsrs	r3, r3, #1
 800310c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800310e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003110:	2b00      	cmp	r3, #0
 8003112:	f47f af49 	bne.w	8002fa8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f002 fd87 	bl	8005c2e <USB_ReadInterrupts>
 8003120:	4603      	mov	r3, r0
 8003122:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003126:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800312a:	d122      	bne.n	8003172 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	69fa      	ldr	r2, [r7, #28]
 8003136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800313a:	f023 0301 	bic.w	r3, r3, #1
 800313e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003146:	2b01      	cmp	r3, #1
 8003148:	d108      	bne.n	800315c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003152:	2100      	movs	r1, #0
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fe27 	bl	8003da8 <HAL_PCDEx_LPM_Callback>
 800315a:	e002      	b.n	8003162 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f004 fe57 	bl	8007e10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003170:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f002 fd59 	bl	8005c2e <USB_ReadInterrupts>
 800317c:	4603      	mov	r3, r0
 800317e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003186:	d112      	bne.n	80031ae <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b01      	cmp	r3, #1
 8003196:	d102      	bne.n	800319e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f004 fe13 	bl	8007dc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695a      	ldr	r2, [r3, #20]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80031ac:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f002 fd3b 	bl	8005c2e <USB_ReadInterrupts>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c2:	f040 80c7 	bne.w	8003354 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	69fa      	ldr	r2, [r7, #28]
 80031d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2110      	movs	r1, #16
 80031e0:	4618      	mov	r0, r3
 80031e2:	f001 fdd5 	bl	8004d90 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031e6:	2300      	movs	r3, #0
 80031e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ea:	e056      	b.n	800329a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80031ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f8:	461a      	mov	r2, r3
 80031fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031fe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	4413      	add	r3, r2
 8003208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003210:	0151      	lsls	r1, r2, #5
 8003212:	69fa      	ldr	r2, [r7, #28]
 8003214:	440a      	add	r2, r1
 8003216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800321a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800321e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	4413      	add	r3, r2
 8003228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003230:	0151      	lsls	r1, r2, #5
 8003232:	69fa      	ldr	r2, [r7, #28]
 8003234:	440a      	add	r2, r1
 8003236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800323a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800323e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	4413      	add	r3, r2
 8003248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324c:	461a      	mov	r2, r3
 800324e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003252:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	4413      	add	r3, r2
 800325c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003264:	0151      	lsls	r1, r2, #5
 8003266:	69fa      	ldr	r2, [r7, #28]
 8003268:	440a      	add	r2, r1
 800326a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800326e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003272:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	4413      	add	r3, r2
 800327c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003284:	0151      	lsls	r1, r2, #5
 8003286:	69fa      	ldr	r2, [r7, #28]
 8003288:	440a      	add	r2, r1
 800328a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800328e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003292:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003296:	3301      	adds	r3, #1
 8003298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d3a3      	bcc.n	80031ec <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	69fa      	ldr	r2, [r7, #28]
 80032ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032b2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80032b6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d016      	beq.n	80032ee <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ca:	69fa      	ldr	r2, [r7, #28]
 80032cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032d0:	f043 030b 	orr.w	r3, r3, #11
 80032d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e0:	69fa      	ldr	r2, [r7, #28]
 80032e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032e6:	f043 030b 	orr.w	r3, r3, #11
 80032ea:	6453      	str	r3, [r2, #68]	; 0x44
 80032ec:	e015      	b.n	800331a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003300:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003304:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	69fa      	ldr	r2, [r7, #28]
 8003310:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003314:	f043 030b 	orr.w	r3, r3, #11
 8003318:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003328:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800332c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800333e:	461a      	mov	r2, r3
 8003340:	f002 fd3a 	bl	8005db8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695a      	ldr	r2, [r3, #20]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003352:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f002 fc68 	bl	8005c2e <USB_ReadInterrupts>
 800335e:	4603      	mov	r3, r0
 8003360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003368:	d124      	bne.n	80033b4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f002 fcfe 	bl	8005d70 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f001 fd66 	bl	8004e4a <USB_GetDevSpeed>
 800337e:	4603      	mov	r3, r0
 8003380:	461a      	mov	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681c      	ldr	r4, [r3, #0]
 800338a:	f001 f959 	bl	8004640 <HAL_RCC_GetHCLKFreq>
 800338e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003394:	b2db      	uxtb	r3, r3
 8003396:	461a      	mov	r2, r3
 8003398:	4620      	mov	r0, r4
 800339a:	f001 fa85 	bl	80048a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f004 fce7 	bl	8007d72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695a      	ldr	r2, [r3, #20]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80033b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f002 fc38 	bl	8005c2e <USB_ReadInterrupts>
 80033be:	4603      	mov	r3, r0
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d10a      	bne.n	80033de <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f004 fcc4 	bl	8007d56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695a      	ldr	r2, [r3, #20]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f002 0208 	and.w	r2, r2, #8
 80033dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f002 fc23 	bl	8005c2e <USB_ReadInterrupts>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033f2:	d10f      	bne.n	8003414 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	4619      	mov	r1, r3
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f004 fd26 	bl	8007e50 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695a      	ldr	r2, [r3, #20]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003412:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f002 fc08 	bl	8005c2e <USB_ReadInterrupts>
 800341e:	4603      	mov	r3, r0
 8003420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003424:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003428:	d10f      	bne.n	800344a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	b2db      	uxtb	r3, r3
 8003432:	4619      	mov	r1, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f004 fcf9 	bl	8007e2c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695a      	ldr	r2, [r3, #20]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003448:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f002 fbed 	bl	8005c2e <USB_ReadInterrupts>
 8003454:	4603      	mov	r3, r0
 8003456:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800345a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345e:	d10a      	bne.n	8003476 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f004 fd07 	bl	8007e74 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695a      	ldr	r2, [r3, #20]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003474:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f002 fbd7 	bl	8005c2e <USB_ReadInterrupts>
 8003480:	4603      	mov	r3, r0
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b04      	cmp	r3, #4
 8003488:	d115      	bne.n	80034b6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f004 fcf7 	bl	8007e90 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6859      	ldr	r1, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	605a      	str	r2, [r3, #4]
 80034b2:	e000      	b.n	80034b6 <HAL_PCD_IRQHandler+0x75e>
      return;
 80034b4:	bf00      	nop
    }
  }
}
 80034b6:	3734      	adds	r7, #52	; 0x34
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd90      	pop	{r4, r7, pc}

080034bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_PCD_SetAddress+0x1a>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e013      	b.n	80034fe <HAL_PCD_SetAddress+0x42>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	78fa      	ldrb	r2, [r7, #3]
 80034e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	4611      	mov	r1, r2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f002 fb35 	bl	8005b5e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b084      	sub	sp, #16
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	4608      	mov	r0, r1
 8003510:	4611      	mov	r1, r2
 8003512:	461a      	mov	r2, r3
 8003514:	4603      	mov	r3, r0
 8003516:	70fb      	strb	r3, [r7, #3]
 8003518:	460b      	mov	r3, r1
 800351a:	803b      	strh	r3, [r7, #0]
 800351c:	4613      	mov	r3, r2
 800351e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003528:	2b00      	cmp	r3, #0
 800352a:	da0f      	bge.n	800354c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	f003 020f 	and.w	r2, r3, #15
 8003532:	4613      	mov	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	3338      	adds	r3, #56	; 0x38
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	4413      	add	r3, r2
 8003540:	3304      	adds	r3, #4
 8003542:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	705a      	strb	r2, [r3, #1]
 800354a:	e00f      	b.n	800356c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800354c:	78fb      	ldrb	r3, [r7, #3]
 800354e:	f003 020f 	and.w	r2, r3, #15
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	4413      	add	r3, r2
 8003562:	3304      	adds	r3, #4
 8003564:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	b2da      	uxtb	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003578:	883a      	ldrh	r2, [r7, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	78ba      	ldrb	r2, [r7, #2]
 8003582:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	785b      	ldrb	r3, [r3, #1]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d004      	beq.n	8003596 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003596:	78bb      	ldrb	r3, [r7, #2]
 8003598:	2b02      	cmp	r3, #2
 800359a:	d102      	bne.n	80035a2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_PCD_EP_Open+0xaa>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e00e      	b.n	80035ce <HAL_PCD_EP_Open+0xc8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68f9      	ldr	r1, [r7, #12]
 80035be:	4618      	mov	r0, r3
 80035c0:	f001 fc68 	bl	8004e94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80035cc:	7afb      	ldrb	r3, [r7, #11]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	460b      	mov	r3, r1
 80035e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	da0f      	bge.n	800360a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ea:	78fb      	ldrb	r3, [r7, #3]
 80035ec:	f003 020f 	and.w	r2, r3, #15
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	3338      	adds	r3, #56	; 0x38
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	4413      	add	r3, r2
 80035fe:	3304      	adds	r3, #4
 8003600:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	705a      	strb	r2, [r3, #1]
 8003608:	e00f      	b.n	800362a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800360a:	78fb      	ldrb	r3, [r7, #3]
 800360c:	f003 020f 	and.w	r2, r3, #15
 8003610:	4613      	mov	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	4413      	add	r3, r2
 8003620:	3304      	adds	r3, #4
 8003622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800362a:	78fb      	ldrb	r3, [r7, #3]
 800362c:	f003 030f 	and.w	r3, r3, #15
 8003630:	b2da      	uxtb	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_PCD_EP_Close+0x6e>
 8003640:	2302      	movs	r3, #2
 8003642:	e00e      	b.n	8003662 <HAL_PCD_EP_Close+0x8c>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68f9      	ldr	r1, [r7, #12]
 8003652:	4618      	mov	r0, r3
 8003654:	f001 fca6 	bl	8004fa4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b086      	sub	sp, #24
 800366e:	af00      	add	r7, sp, #0
 8003670:	60f8      	str	r0, [r7, #12]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
 8003676:	460b      	mov	r3, r1
 8003678:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800367a:	7afb      	ldrb	r3, [r7, #11]
 800367c:	f003 020f 	and.w	r2, r3, #15
 8003680:	4613      	mov	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	3304      	adds	r3, #4
 8003692:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2200      	movs	r2, #0
 80036a4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2200      	movs	r2, #0
 80036aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036ac:	7afb      	ldrb	r3, [r7, #11]
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d102      	bne.n	80036c6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036c6:	7afb      	ldrb	r3, [r7, #11]
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d109      	bne.n	80036e4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	6979      	ldr	r1, [r7, #20]
 80036de:	f001 ff81 	bl	80055e4 <USB_EP0StartXfer>
 80036e2:	e008      	b.n	80036f6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	6979      	ldr	r1, [r7, #20]
 80036f2:	f001 fd33 	bl	800515c <USB_EPStartXfer>
  }

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	f003 020f 	and.w	r2, r3, #15
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003722:	681b      	ldr	r3, [r3, #0]
}
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	607a      	str	r2, [r7, #4]
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	460b      	mov	r3, r1
 800373e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003740:	7afb      	ldrb	r3, [r7, #11]
 8003742:	f003 020f 	and.w	r2, r3, #15
 8003746:	4613      	mov	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	3338      	adds	r3, #56	; 0x38
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4413      	add	r3, r2
 8003754:	3304      	adds	r3, #4
 8003756:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2200      	movs	r2, #0
 8003768:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2201      	movs	r2, #1
 800376e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003770:	7afb      	ldrb	r3, [r7, #11]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	b2da      	uxtb	r2, r3
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d102      	bne.n	800378a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800378a:	7afb      	ldrb	r3, [r7, #11]
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	2b00      	cmp	r3, #0
 8003792:	d109      	bne.n	80037a8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	461a      	mov	r2, r3
 80037a0:	6979      	ldr	r1, [r7, #20]
 80037a2:	f001 ff1f 	bl	80055e4 <USB_EP0StartXfer>
 80037a6:	e008      	b.n	80037ba <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	461a      	mov	r2, r3
 80037b4:	6979      	ldr	r1, [r7, #20]
 80037b6:	f001 fcd1 	bl	800515c <USB_EPStartXfer>
  }

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	f003 020f 	and.w	r2, r3, #15
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d901      	bls.n	80037e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e050      	b.n	8003884 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	da0f      	bge.n	800380a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	f003 020f 	and.w	r2, r3, #15
 80037f0:	4613      	mov	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	3338      	adds	r3, #56	; 0x38
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	4413      	add	r3, r2
 80037fe:	3304      	adds	r3, #4
 8003800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2201      	movs	r2, #1
 8003806:	705a      	strb	r2, [r3, #1]
 8003808:	e00d      	b.n	8003826 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800380a:	78fa      	ldrb	r2, [r7, #3]
 800380c:	4613      	mov	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	1a9b      	subs	r3, r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	4413      	add	r3, r2
 800381c:	3304      	adds	r3, #4
 800381e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2201      	movs	r2, #1
 800382a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	b2da      	uxtb	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_PCD_EP_SetStall+0x82>
 8003842:	2302      	movs	r3, #2
 8003844:	e01e      	b.n	8003884 <HAL_PCD_EP_SetStall+0xc0>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68f9      	ldr	r1, [r7, #12]
 8003854:	4618      	mov	r0, r3
 8003856:	f002 f8ae 	bl	80059b6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800385a:	78fb      	ldrb	r3, [r7, #3]
 800385c:	f003 030f 	and.w	r3, r3, #15
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10a      	bne.n	800387a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6818      	ldr	r0, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	b2d9      	uxtb	r1, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003874:	461a      	mov	r2, r3
 8003876:	f002 fa9f 	bl	8005db8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	460b      	mov	r3, r1
 8003896:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	f003 020f 	and.w	r2, r3, #15
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d901      	bls.n	80038aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e042      	b.n	8003930 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	da0f      	bge.n	80038d2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	f003 020f 	and.w	r2, r3, #15
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	3338      	adds	r3, #56	; 0x38
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	4413      	add	r3, r2
 80038c6:	3304      	adds	r3, #4
 80038c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	705a      	strb	r2, [r3, #1]
 80038d0:	e00f      	b.n	80038f2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038d2:	78fb      	ldrb	r3, [r7, #3]
 80038d4:	f003 020f 	and.w	r2, r3, #15
 80038d8:	4613      	mov	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	4413      	add	r3, r2
 80038e8:	3304      	adds	r3, #4
 80038ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_PCD_EP_ClrStall+0x86>
 800390e:	2302      	movs	r3, #2
 8003910:	e00e      	b.n	8003930 <HAL_PCD_EP_ClrStall+0xa4>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68f9      	ldr	r1, [r7, #12]
 8003920:	4618      	mov	r0, r3
 8003922:	f002 f8b6 	bl	8005a92 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08a      	sub	sp, #40	; 0x28
 800393c:	af02      	add	r7, sp, #8
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	4613      	mov	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	1a9b      	subs	r3, r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	3338      	adds	r3, #56	; 0x38
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	4413      	add	r3, r2
 800395c:	3304      	adds	r3, #4
 800395e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	699a      	ldr	r2, [r3, #24]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	429a      	cmp	r2, r3
 800396a:	d901      	bls.n	8003970 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e06c      	b.n	8003a4a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	695a      	ldr	r2, [r3, #20]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	69fa      	ldr	r2, [r7, #28]
 8003982:	429a      	cmp	r2, r3
 8003984:	d902      	bls.n	800398c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	3303      	adds	r3, #3
 8003990:	089b      	lsrs	r3, r3, #2
 8003992:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003994:	e02b      	b.n	80039ee <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d902      	bls.n	80039b2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	3303      	adds	r3, #3
 80039b6:	089b      	lsrs	r3, r3, #2
 80039b8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	68d9      	ldr	r1, [r3, #12]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	4603      	mov	r3, r0
 80039d0:	6978      	ldr	r0, [r7, #20]
 80039d2:	f001 ff5a 	bl	800588a <USB_WritePacket>

    ep->xfer_buff  += len;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	441a      	add	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	441a      	add	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d809      	bhi.n	8003a18 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	699a      	ldr	r2, [r3, #24]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d203      	bcs.n	8003a18 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1be      	bne.n	8003996 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	695a      	ldr	r2, [r3, #20]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d811      	bhi.n	8003a48 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	6939      	ldr	r1, [r7, #16]
 8003a40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a44:	4013      	ands	r3, r2
 8003a46:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3720      	adds	r7, #32
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	333c      	adds	r3, #60	; 0x3c
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	f040 80a0 	bne.w	8003bcc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d015      	beq.n	8003ac2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4a72      	ldr	r2, [pc, #456]	; (8003c64 <PCD_EP_OutXfrComplete_int+0x210>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	f240 80dd 	bls.w	8003c5a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 80d7 	beq.w	8003c5a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab8:	461a      	mov	r2, r3
 8003aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003abe:	6093      	str	r3, [r2, #8]
 8003ac0:	e0cb      	b.n	8003c5a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d009      	beq.n	8003ae0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2320      	movs	r3, #32
 8003adc:	6093      	str	r3, [r2, #8]
 8003ade:	e0bc      	b.n	8003c5a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f040 80b7 	bne.w	8003c5a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4a5d      	ldr	r2, [pc, #372]	; (8003c64 <PCD_EP_OutXfrComplete_int+0x210>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d90f      	bls.n	8003b14 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00a      	beq.n	8003b14 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b10:	6093      	str	r3, [r2, #8]
 8003b12:	e0a2      	b.n	8003c5a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	1a9b      	subs	r3, r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003b26:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	0159      	lsls	r1, r3, #5
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	440b      	add	r3, r1
 8003b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003b3a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	4613      	mov	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	1a9b      	subs	r3, r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4403      	add	r3, r0
 8003b4a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003b4e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	4613      	mov	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	1a9b      	subs	r3, r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b62:	6819      	ldr	r1, [r3, #0]
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4403      	add	r3, r0
 8003b72:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4419      	add	r1, r3
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	1a9b      	subs	r3, r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4403      	add	r3, r0
 8003b88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b8c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d114      	bne.n	8003bbe <PCD_EP_OutXfrComplete_int+0x16a>
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d108      	bne.n	8003bbe <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	2101      	movs	r1, #1
 8003bba:	f002 f8fd 	bl	8005db8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f004 f891 	bl	8007cec <HAL_PCD_DataOutStageCallback>
 8003bca:	e046      	b.n	8003c5a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4a26      	ldr	r2, [pc, #152]	; (8003c68 <PCD_EP_OutXfrComplete_int+0x214>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d124      	bne.n	8003c1e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bea:	461a      	mov	r2, r3
 8003bec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bf0:	6093      	str	r3, [r2, #8]
 8003bf2:	e032      	b.n	8003c5a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d008      	beq.n	8003c10 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	2320      	movs	r3, #32
 8003c0e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	4619      	mov	r1, r3
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f004 f868 	bl	8007cec <HAL_PCD_DataOutStageCallback>
 8003c1c:	e01d      	b.n	8003c5a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d114      	bne.n	8003c4e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d108      	bne.n	8003c4e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c46:	461a      	mov	r2, r3
 8003c48:	2100      	movs	r1, #0
 8003c4a:	f002 f8b5 	bl	8005db8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	4619      	mov	r1, r3
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f004 f849 	bl	8007cec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	4f54300a 	.word	0x4f54300a
 8003c68:	4f54310a 	.word	0x4f54310a

08003c6c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	333c      	adds	r3, #60	; 0x3c
 8003c84:	3304      	adds	r3, #4
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4a15      	ldr	r2, [pc, #84]	; (8003cf4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d90e      	bls.n	8003cc0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d009      	beq.n	8003cc0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cbe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f004 f801 	bl	8007cc8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4a0a      	ldr	r2, [pc, #40]	; (8003cf4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d90c      	bls.n	8003ce8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d108      	bne.n	8003ce8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	f002 f868 	bl	8005db8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	4f54300a 	.word	0x4f54300a

08003cf8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	70fb      	strb	r3, [r7, #3]
 8003d04:	4613      	mov	r3, r2
 8003d06:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d107      	bne.n	8003d26 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d16:	883b      	ldrh	r3, [r7, #0]
 8003d18:	0419      	lsls	r1, r3, #16
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	629a      	str	r2, [r3, #40]	; 0x28
 8003d24:	e028      	b.n	8003d78 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	4413      	add	r3, r2
 8003d32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d34:	2300      	movs	r3, #0
 8003d36:	73fb      	strb	r3, [r7, #15]
 8003d38:	e00d      	b.n	8003d56 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
 8003d40:	3340      	adds	r3, #64	; 0x40
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	0c1b      	lsrs	r3, r3, #16
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	3301      	adds	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
 8003d56:	7bfa      	ldrb	r2, [r7, #15]
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d3ec      	bcc.n	8003d3a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d60:	883b      	ldrh	r3, [r7, #0]
 8003d62:	0418      	lsls	r0, r3, #16
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6819      	ldr	r1, [r3, #0]
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	4302      	orrs	r2, r0
 8003d70:	3340      	adds	r3, #64	; 0x40
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	887a      	ldrh	r2, [r7, #2]
 8003d98:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e264      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d075      	beq.n	8003eca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dde:	4ba3      	ldr	r3, [pc, #652]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d00c      	beq.n	8003e04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dea:	4ba0      	ldr	r3, [pc, #640]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d112      	bne.n	8003e1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003df6:	4b9d      	ldr	r3, [pc, #628]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e02:	d10b      	bne.n	8003e1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e04:	4b99      	ldr	r3, [pc, #612]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d05b      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x108>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d157      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e23f      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e24:	d106      	bne.n	8003e34 <HAL_RCC_OscConfig+0x74>
 8003e26:	4b91      	ldr	r3, [pc, #580]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a90      	ldr	r2, [pc, #576]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e01d      	b.n	8003e70 <HAL_RCC_OscConfig+0xb0>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e3c:	d10c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x98>
 8003e3e:	4b8b      	ldr	r3, [pc, #556]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a8a      	ldr	r2, [pc, #552]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	4b88      	ldr	r3, [pc, #544]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a87      	ldr	r2, [pc, #540]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e00b      	b.n	8003e70 <HAL_RCC_OscConfig+0xb0>
 8003e58:	4b84      	ldr	r3, [pc, #528]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a83      	ldr	r2, [pc, #524]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	4b81      	ldr	r3, [pc, #516]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a80      	ldr	r2, [pc, #512]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d013      	beq.n	8003ea0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e78:	f7fd fc5e 	bl	8001738 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e80:	f7fd fc5a 	bl	8001738 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b64      	cmp	r3, #100	; 0x64
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e204      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e92:	4b76      	ldr	r3, [pc, #472]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0xc0>
 8003e9e:	e014      	b.n	8003eca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea0:	f7fd fc4a 	bl	8001738 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea8:	f7fd fc46 	bl	8001738 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b64      	cmp	r3, #100	; 0x64
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e1f0      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eba:	4b6c      	ldr	r3, [pc, #432]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0xe8>
 8003ec6:	e000      	b.n	8003eca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d063      	beq.n	8003f9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ed6:	4b65      	ldr	r3, [pc, #404]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00b      	beq.n	8003efa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee2:	4b62      	ldr	r3, [pc, #392]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d11c      	bne.n	8003f28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eee:	4b5f      	ldr	r3, [pc, #380]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d116      	bne.n	8003f28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efa:	4b5c      	ldr	r3, [pc, #368]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_RCC_OscConfig+0x152>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d001      	beq.n	8003f12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e1c4      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f12:	4b56      	ldr	r3, [pc, #344]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4952      	ldr	r1, [pc, #328]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f26:	e03a      	b.n	8003f9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d020      	beq.n	8003f72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f30:	4b4f      	ldr	r3, [pc, #316]	; (8004070 <HAL_RCC_OscConfig+0x2b0>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f36:	f7fd fbff 	bl	8001738 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f3e:	f7fd fbfb 	bl	8001738 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e1a5      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f50:	4b46      	ldr	r3, [pc, #280]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f0      	beq.n	8003f3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5c:	4b43      	ldr	r3, [pc, #268]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4940      	ldr	r1, [pc, #256]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	600b      	str	r3, [r1, #0]
 8003f70:	e015      	b.n	8003f9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f72:	4b3f      	ldr	r3, [pc, #252]	; (8004070 <HAL_RCC_OscConfig+0x2b0>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fd fbde 	bl	8001738 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f80:	f7fd fbda 	bl	8001738 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e184      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f92:	4b36      	ldr	r3, [pc, #216]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d030      	beq.n	800400c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d016      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fb2:	4b30      	ldr	r3, [pc, #192]	; (8004074 <HAL_RCC_OscConfig+0x2b4>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb8:	f7fd fbbe 	bl	8001738 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fc0:	f7fd fbba 	bl	8001738 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e164      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd2:	4b26      	ldr	r3, [pc, #152]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x200>
 8003fde:	e015      	b.n	800400c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fe0:	4b24      	ldr	r3, [pc, #144]	; (8004074 <HAL_RCC_OscConfig+0x2b4>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe6:	f7fd fba7 	bl	8001738 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fee:	f7fd fba3 	bl	8001738 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e14d      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004000:	4b1a      	ldr	r3, [pc, #104]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8004002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1f0      	bne.n	8003fee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80a0 	beq.w	800415a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401a:	2300      	movs	r3, #0
 800401c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800401e:	4b13      	ldr	r3, [pc, #76]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10f      	bne.n	800404a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	4b0f      	ldr	r3, [pc, #60]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	4a0e      	ldr	r2, [pc, #56]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8004034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004038:	6413      	str	r3, [r2, #64]	; 0x40
 800403a:	4b0c      	ldr	r3, [pc, #48]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004046:	2301      	movs	r3, #1
 8004048:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404a:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_RCC_OscConfig+0x2b8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d121      	bne.n	800409a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004056:	4b08      	ldr	r3, [pc, #32]	; (8004078 <HAL_RCC_OscConfig+0x2b8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a07      	ldr	r2, [pc, #28]	; (8004078 <HAL_RCC_OscConfig+0x2b8>)
 800405c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004062:	f7fd fb69 	bl	8001738 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004068:	e011      	b.n	800408e <HAL_RCC_OscConfig+0x2ce>
 800406a:	bf00      	nop
 800406c:	40023800 	.word	0x40023800
 8004070:	42470000 	.word	0x42470000
 8004074:	42470e80 	.word	0x42470e80
 8004078:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407c:	f7fd fb5c 	bl	8001738 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e106      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800408e:	4b85      	ldr	r3, [pc, #532]	; (80042a4 <HAL_RCC_OscConfig+0x4e4>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0f0      	beq.n	800407c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d106      	bne.n	80040b0 <HAL_RCC_OscConfig+0x2f0>
 80040a2:	4b81      	ldr	r3, [pc, #516]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80040a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a6:	4a80      	ldr	r2, [pc, #512]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	6713      	str	r3, [r2, #112]	; 0x70
 80040ae:	e01c      	b.n	80040ea <HAL_RCC_OscConfig+0x32a>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b05      	cmp	r3, #5
 80040b6:	d10c      	bne.n	80040d2 <HAL_RCC_OscConfig+0x312>
 80040b8:	4b7b      	ldr	r3, [pc, #492]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80040ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040bc:	4a7a      	ldr	r2, [pc, #488]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80040be:	f043 0304 	orr.w	r3, r3, #4
 80040c2:	6713      	str	r3, [r2, #112]	; 0x70
 80040c4:	4b78      	ldr	r3, [pc, #480]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80040c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c8:	4a77      	ldr	r2, [pc, #476]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	6713      	str	r3, [r2, #112]	; 0x70
 80040d0:	e00b      	b.n	80040ea <HAL_RCC_OscConfig+0x32a>
 80040d2:	4b75      	ldr	r3, [pc, #468]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80040d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d6:	4a74      	ldr	r2, [pc, #464]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80040d8:	f023 0301 	bic.w	r3, r3, #1
 80040dc:	6713      	str	r3, [r2, #112]	; 0x70
 80040de:	4b72      	ldr	r3, [pc, #456]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80040e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e2:	4a71      	ldr	r2, [pc, #452]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80040e4:	f023 0304 	bic.w	r3, r3, #4
 80040e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d015      	beq.n	800411e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f2:	f7fd fb21 	bl	8001738 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f8:	e00a      	b.n	8004110 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040fa:	f7fd fb1d 	bl	8001738 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	f241 3288 	movw	r2, #5000	; 0x1388
 8004108:	4293      	cmp	r3, r2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e0c5      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004110:	4b65      	ldr	r3, [pc, #404]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 8004112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0ee      	beq.n	80040fa <HAL_RCC_OscConfig+0x33a>
 800411c:	e014      	b.n	8004148 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800411e:	f7fd fb0b 	bl	8001738 <HAL_GetTick>
 8004122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004124:	e00a      	b.n	800413c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004126:	f7fd fb07 	bl	8001738 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	f241 3288 	movw	r2, #5000	; 0x1388
 8004134:	4293      	cmp	r3, r2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e0af      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800413c:	4b5a      	ldr	r3, [pc, #360]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 800413e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1ee      	bne.n	8004126 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004148:	7dfb      	ldrb	r3, [r7, #23]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d105      	bne.n	800415a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800414e:	4b56      	ldr	r3, [pc, #344]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	4a55      	ldr	r2, [pc, #340]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 8004154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004158:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 809b 	beq.w	800429a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004164:	4b50      	ldr	r3, [pc, #320]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 030c 	and.w	r3, r3, #12
 800416c:	2b08      	cmp	r3, #8
 800416e:	d05c      	beq.n	800422a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d141      	bne.n	80041fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004178:	4b4c      	ldr	r3, [pc, #304]	; (80042ac <HAL_RCC_OscConfig+0x4ec>)
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417e:	f7fd fadb 	bl	8001738 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004186:	f7fd fad7 	bl	8001738 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e081      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004198:	4b43      	ldr	r3, [pc, #268]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1f0      	bne.n	8004186 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69da      	ldr	r2, [r3, #28]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	019b      	lsls	r3, r3, #6
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ba:	085b      	lsrs	r3, r3, #1
 80041bc:	3b01      	subs	r3, #1
 80041be:	041b      	lsls	r3, r3, #16
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c6:	061b      	lsls	r3, r3, #24
 80041c8:	4937      	ldr	r1, [pc, #220]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ce:	4b37      	ldr	r3, [pc, #220]	; (80042ac <HAL_RCC_OscConfig+0x4ec>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d4:	f7fd fab0 	bl	8001738 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041dc:	f7fd faac 	bl	8001738 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e056      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ee:	4b2e      	ldr	r3, [pc, #184]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0x41c>
 80041fa:	e04e      	b.n	800429a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fc:	4b2b      	ldr	r3, [pc, #172]	; (80042ac <HAL_RCC_OscConfig+0x4ec>)
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004202:	f7fd fa99 	bl	8001738 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800420a:	f7fd fa95 	bl	8001738 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e03f      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421c:	4b22      	ldr	r3, [pc, #136]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1f0      	bne.n	800420a <HAL_RCC_OscConfig+0x44a>
 8004228:	e037      	b.n	800429a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e032      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004236:	4b1c      	ldr	r3, [pc, #112]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d028      	beq.n	8004296 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800424e:	429a      	cmp	r2, r3
 8004250:	d121      	bne.n	8004296 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425c:	429a      	cmp	r2, r3
 800425e:	d11a      	bne.n	8004296 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004266:	4013      	ands	r3, r2
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800426c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800426e:	4293      	cmp	r3, r2
 8004270:	d111      	bne.n	8004296 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	085b      	lsrs	r3, r3, #1
 800427e:	3b01      	subs	r3, #1
 8004280:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004282:	429a      	cmp	r2, r3
 8004284:	d107      	bne.n	8004296 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d001      	beq.n	800429a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40007000 	.word	0x40007000
 80042a8:	40023800 	.word	0x40023800
 80042ac:	42470060 	.word	0x42470060

080042b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0cc      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042c4:	4b68      	ldr	r3, [pc, #416]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d90c      	bls.n	80042ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b65      	ldr	r3, [pc, #404]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042da:	4b63      	ldr	r3, [pc, #396]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d001      	beq.n	80042ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0b8      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d020      	beq.n	800433a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004304:	4b59      	ldr	r3, [pc, #356]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	4a58      	ldr	r2, [pc, #352]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800430e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800431c:	4b53      	ldr	r3, [pc, #332]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	4a52      	ldr	r2, [pc, #328]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004326:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004328:	4b50      	ldr	r3, [pc, #320]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	494d      	ldr	r1, [pc, #308]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	4313      	orrs	r3, r2
 8004338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d044      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d107      	bne.n	800435e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	4b47      	ldr	r3, [pc, #284]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d119      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e07f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d003      	beq.n	800436e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800436a:	2b03      	cmp	r3, #3
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436e:	4b3f      	ldr	r3, [pc, #252]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e06f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437e:	4b3b      	ldr	r3, [pc, #236]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e067      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800438e:	4b37      	ldr	r3, [pc, #220]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f023 0203 	bic.w	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4934      	ldr	r1, [pc, #208]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043a0:	f7fd f9ca 	bl	8001738 <HAL_GetTick>
 80043a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	e00a      	b.n	80043be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a8:	f7fd f9c6 	bl	8001738 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e04f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	4b2b      	ldr	r3, [pc, #172]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 020c 	and.w	r2, r3, #12
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d1eb      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043d0:	4b25      	ldr	r3, [pc, #148]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d20c      	bcs.n	80043f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043de:	4b22      	ldr	r3, [pc, #136]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e6:	4b20      	ldr	r3, [pc, #128]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d001      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e032      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004404:	4b19      	ldr	r3, [pc, #100]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4916      	ldr	r1, [pc, #88]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004422:	4b12      	ldr	r3, [pc, #72]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	490e      	ldr	r1, [pc, #56]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004436:	f000 f821 	bl	800447c <HAL_RCC_GetSysClockFreq>
 800443a:	4602      	mov	r2, r0
 800443c:	4b0b      	ldr	r3, [pc, #44]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	490a      	ldr	r1, [pc, #40]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 8004448:	5ccb      	ldrb	r3, [r1, r3]
 800444a:	fa22 f303 	lsr.w	r3, r2, r3
 800444e:	4a09      	ldr	r2, [pc, #36]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004452:	4b09      	ldr	r3, [pc, #36]	; (8004478 <HAL_RCC_ClockConfig+0x1c8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fd f92a 	bl	80016b0 <HAL_InitTick>

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40023c00 	.word	0x40023c00
 800446c:	40023800 	.word	0x40023800
 8004470:	08008c24 	.word	0x08008c24
 8004474:	200000a4 	.word	0x200000a4
 8004478:	200000a8 	.word	0x200000a8

0800447c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800447c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	607b      	str	r3, [r7, #4]
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	2300      	movs	r3, #0
 800448e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004494:	4b67      	ldr	r3, [pc, #412]	; (8004634 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 030c 	and.w	r3, r3, #12
 800449c:	2b08      	cmp	r3, #8
 800449e:	d00d      	beq.n	80044bc <HAL_RCC_GetSysClockFreq+0x40>
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	f200 80bd 	bhi.w	8004620 <HAL_RCC_GetSysClockFreq+0x1a4>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_RCC_GetSysClockFreq+0x34>
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d003      	beq.n	80044b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ae:	e0b7      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044b0:	4b61      	ldr	r3, [pc, #388]	; (8004638 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044b2:	60bb      	str	r3, [r7, #8]
       break;
 80044b4:	e0b7      	b.n	8004626 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044b6:	4b61      	ldr	r3, [pc, #388]	; (800463c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80044b8:	60bb      	str	r3, [r7, #8]
      break;
 80044ba:	e0b4      	b.n	8004626 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044bc:	4b5d      	ldr	r3, [pc, #372]	; (8004634 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044c6:	4b5b      	ldr	r3, [pc, #364]	; (8004634 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d04d      	beq.n	800456e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d2:	4b58      	ldr	r3, [pc, #352]	; (8004634 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	099b      	lsrs	r3, r3, #6
 80044d8:	461a      	mov	r2, r3
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044e2:	f04f 0100 	mov.w	r1, #0
 80044e6:	ea02 0800 	and.w	r8, r2, r0
 80044ea:	ea03 0901 	and.w	r9, r3, r1
 80044ee:	4640      	mov	r0, r8
 80044f0:	4649      	mov	r1, r9
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	014b      	lsls	r3, r1, #5
 80044fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004500:	0142      	lsls	r2, r0, #5
 8004502:	4610      	mov	r0, r2
 8004504:	4619      	mov	r1, r3
 8004506:	ebb0 0008 	subs.w	r0, r0, r8
 800450a:	eb61 0109 	sbc.w	r1, r1, r9
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	018b      	lsls	r3, r1, #6
 8004518:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800451c:	0182      	lsls	r2, r0, #6
 800451e:	1a12      	subs	r2, r2, r0
 8004520:	eb63 0301 	sbc.w	r3, r3, r1
 8004524:	f04f 0000 	mov.w	r0, #0
 8004528:	f04f 0100 	mov.w	r1, #0
 800452c:	00d9      	lsls	r1, r3, #3
 800452e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004532:	00d0      	lsls	r0, r2, #3
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	eb12 0208 	adds.w	r2, r2, r8
 800453c:	eb43 0309 	adc.w	r3, r3, r9
 8004540:	f04f 0000 	mov.w	r0, #0
 8004544:	f04f 0100 	mov.w	r1, #0
 8004548:	0259      	lsls	r1, r3, #9
 800454a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800454e:	0250      	lsls	r0, r2, #9
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	4610      	mov	r0, r2
 8004556:	4619      	mov	r1, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	461a      	mov	r2, r3
 800455c:	f04f 0300 	mov.w	r3, #0
 8004560:	f7fb fe86 	bl	8000270 <__aeabi_uldivmod>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	4613      	mov	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	e04a      	b.n	8004604 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800456e:	4b31      	ldr	r3, [pc, #196]	; (8004634 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	099b      	lsrs	r3, r3, #6
 8004574:	461a      	mov	r2, r3
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800457e:	f04f 0100 	mov.w	r1, #0
 8004582:	ea02 0400 	and.w	r4, r2, r0
 8004586:	ea03 0501 	and.w	r5, r3, r1
 800458a:	4620      	mov	r0, r4
 800458c:	4629      	mov	r1, r5
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	014b      	lsls	r3, r1, #5
 8004598:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800459c:	0142      	lsls	r2, r0, #5
 800459e:	4610      	mov	r0, r2
 80045a0:	4619      	mov	r1, r3
 80045a2:	1b00      	subs	r0, r0, r4
 80045a4:	eb61 0105 	sbc.w	r1, r1, r5
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	f04f 0300 	mov.w	r3, #0
 80045b0:	018b      	lsls	r3, r1, #6
 80045b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045b6:	0182      	lsls	r2, r0, #6
 80045b8:	1a12      	subs	r2, r2, r0
 80045ba:	eb63 0301 	sbc.w	r3, r3, r1
 80045be:	f04f 0000 	mov.w	r0, #0
 80045c2:	f04f 0100 	mov.w	r1, #0
 80045c6:	00d9      	lsls	r1, r3, #3
 80045c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045cc:	00d0      	lsls	r0, r2, #3
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	1912      	adds	r2, r2, r4
 80045d4:	eb45 0303 	adc.w	r3, r5, r3
 80045d8:	f04f 0000 	mov.w	r0, #0
 80045dc:	f04f 0100 	mov.w	r1, #0
 80045e0:	0299      	lsls	r1, r3, #10
 80045e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80045e6:	0290      	lsls	r0, r2, #10
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4610      	mov	r0, r2
 80045ee:	4619      	mov	r1, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	461a      	mov	r2, r3
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	f7fb fe3a 	bl	8000270 <__aeabi_uldivmod>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4613      	mov	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004604:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	0c1b      	lsrs	r3, r3, #16
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	3301      	adds	r3, #1
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	fbb2 f3f3 	udiv	r3, r2, r3
 800461c:	60bb      	str	r3, [r7, #8]
      break;
 800461e:	e002      	b.n	8004626 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004620:	4b05      	ldr	r3, [pc, #20]	; (8004638 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004622:	60bb      	str	r3, [r7, #8]
      break;
 8004624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004626:	68bb      	ldr	r3, [r7, #8]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004632:	bf00      	nop
 8004634:	40023800 	.word	0x40023800
 8004638:	00f42400 	.word	0x00f42400
 800463c:	007a1200 	.word	0x007a1200

08004640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004644:	4b03      	ldr	r3, [pc, #12]	; (8004654 <HAL_RCC_GetHCLKFreq+0x14>)
 8004646:	681b      	ldr	r3, [r3, #0]
}
 8004648:	4618      	mov	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	200000a4 	.word	0x200000a4

08004658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800465c:	f7ff fff0 	bl	8004640 <HAL_RCC_GetHCLKFreq>
 8004660:	4602      	mov	r2, r0
 8004662:	4b05      	ldr	r3, [pc, #20]	; (8004678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	0a9b      	lsrs	r3, r3, #10
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	4903      	ldr	r1, [pc, #12]	; (800467c <HAL_RCC_GetPCLK1Freq+0x24>)
 800466e:	5ccb      	ldrb	r3, [r1, r3]
 8004670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004674:	4618      	mov	r0, r3
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40023800 	.word	0x40023800
 800467c:	08008c34 	.word	0x08008c34

08004680 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e07b      	b.n	800478a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	2b00      	cmp	r3, #0
 8004698:	d108      	bne.n	80046ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046a2:	d009      	beq.n	80046b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	61da      	str	r2, [r3, #28]
 80046aa:	e005      	b.n	80046b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fc fe82 	bl	80013dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473c:	ea42 0103 	orr.w	r1, r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004744:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	0c1b      	lsrs	r3, r3, #16
 8004756:	f003 0104 	and.w	r1, r3, #4
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	f003 0210 	and.w	r2, r3, #16
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004778:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047a8:	d10e      	bne.n	80047c8 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d107      	bne.n	80047c8 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f06f 0201 	mvn.w	r2, #1
 80047c0:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f804 	bl	80047d0 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 80047c8:	bf00      	nop
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047e4:	b084      	sub	sp, #16
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b084      	sub	sp, #16
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	f107 001c 	add.w	r0, r7, #28
 80047f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d122      	bne.n	8004842 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004800:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004826:	2b01      	cmp	r3, #1
 8004828:	d105      	bne.n	8004836 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f001 fb1c 	bl	8005e74 <USB_CoreReset>
 800483c:	4603      	mov	r3, r0
 800483e:	73fb      	strb	r3, [r7, #15]
 8004840:	e01a      	b.n	8004878 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f001 fb10 	bl	8005e74 <USB_CoreReset>
 8004854:	4603      	mov	r3, r0
 8004856:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004862:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	639a      	str	r2, [r3, #56]	; 0x38
 800486a:	e005      	b.n	8004878 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004870:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487a:	2b01      	cmp	r3, #1
 800487c:	d10b      	bne.n	8004896 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f043 0206 	orr.w	r2, r3, #6
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f043 0220 	orr.w	r2, r3, #32
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004896:	7bfb      	ldrb	r3, [r7, #15]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048a2:	b004      	add	sp, #16
 80048a4:	4770      	bx	lr
	...

080048a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	4613      	mov	r3, r2
 80048b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80048b6:	79fb      	ldrb	r3, [r7, #7]
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d165      	bne.n	8004988 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4a41      	ldr	r2, [pc, #260]	; (80049c4 <USB_SetTurnaroundTime+0x11c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d906      	bls.n	80048d2 <USB_SetTurnaroundTime+0x2a>
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4a40      	ldr	r2, [pc, #256]	; (80049c8 <USB_SetTurnaroundTime+0x120>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d202      	bcs.n	80048d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80048cc:	230f      	movs	r3, #15
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	e062      	b.n	8004998 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4a3c      	ldr	r2, [pc, #240]	; (80049c8 <USB_SetTurnaroundTime+0x120>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d306      	bcc.n	80048e8 <USB_SetTurnaroundTime+0x40>
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	4a3b      	ldr	r2, [pc, #236]	; (80049cc <USB_SetTurnaroundTime+0x124>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d202      	bcs.n	80048e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80048e2:	230e      	movs	r3, #14
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	e057      	b.n	8004998 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4a38      	ldr	r2, [pc, #224]	; (80049cc <USB_SetTurnaroundTime+0x124>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d306      	bcc.n	80048fe <USB_SetTurnaroundTime+0x56>
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4a37      	ldr	r2, [pc, #220]	; (80049d0 <USB_SetTurnaroundTime+0x128>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d202      	bcs.n	80048fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80048f8:	230d      	movs	r3, #13
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	e04c      	b.n	8004998 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	4a33      	ldr	r2, [pc, #204]	; (80049d0 <USB_SetTurnaroundTime+0x128>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d306      	bcc.n	8004914 <USB_SetTurnaroundTime+0x6c>
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	4a32      	ldr	r2, [pc, #200]	; (80049d4 <USB_SetTurnaroundTime+0x12c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d802      	bhi.n	8004914 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800490e:	230c      	movs	r3, #12
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	e041      	b.n	8004998 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	4a2f      	ldr	r2, [pc, #188]	; (80049d4 <USB_SetTurnaroundTime+0x12c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d906      	bls.n	800492a <USB_SetTurnaroundTime+0x82>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	4a2e      	ldr	r2, [pc, #184]	; (80049d8 <USB_SetTurnaroundTime+0x130>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d802      	bhi.n	800492a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004924:	230b      	movs	r3, #11
 8004926:	617b      	str	r3, [r7, #20]
 8004928:	e036      	b.n	8004998 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	4a2a      	ldr	r2, [pc, #168]	; (80049d8 <USB_SetTurnaroundTime+0x130>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d906      	bls.n	8004940 <USB_SetTurnaroundTime+0x98>
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	4a29      	ldr	r2, [pc, #164]	; (80049dc <USB_SetTurnaroundTime+0x134>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d802      	bhi.n	8004940 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800493a:	230a      	movs	r3, #10
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	e02b      	b.n	8004998 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4a26      	ldr	r2, [pc, #152]	; (80049dc <USB_SetTurnaroundTime+0x134>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d906      	bls.n	8004956 <USB_SetTurnaroundTime+0xae>
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4a25      	ldr	r2, [pc, #148]	; (80049e0 <USB_SetTurnaroundTime+0x138>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d202      	bcs.n	8004956 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004950:	2309      	movs	r3, #9
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	e020      	b.n	8004998 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	4a21      	ldr	r2, [pc, #132]	; (80049e0 <USB_SetTurnaroundTime+0x138>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d306      	bcc.n	800496c <USB_SetTurnaroundTime+0xc4>
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	4a20      	ldr	r2, [pc, #128]	; (80049e4 <USB_SetTurnaroundTime+0x13c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d802      	bhi.n	800496c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004966:	2308      	movs	r3, #8
 8004968:	617b      	str	r3, [r7, #20]
 800496a:	e015      	b.n	8004998 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4a1d      	ldr	r2, [pc, #116]	; (80049e4 <USB_SetTurnaroundTime+0x13c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d906      	bls.n	8004982 <USB_SetTurnaroundTime+0xda>
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	4a1c      	ldr	r2, [pc, #112]	; (80049e8 <USB_SetTurnaroundTime+0x140>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d202      	bcs.n	8004982 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800497c:	2307      	movs	r3, #7
 800497e:	617b      	str	r3, [r7, #20]
 8004980:	e00a      	b.n	8004998 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004982:	2306      	movs	r3, #6
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	e007      	b.n	8004998 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004988:	79fb      	ldrb	r3, [r7, #7]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d102      	bne.n	8004994 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800498e:	2309      	movs	r3, #9
 8004990:	617b      	str	r3, [r7, #20]
 8004992:	e001      	b.n	8004998 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004994:	2309      	movs	r3, #9
 8004996:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	029b      	lsls	r3, r3, #10
 80049ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80049b0:	431a      	orrs	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	371c      	adds	r7, #28
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	00d8acbf 	.word	0x00d8acbf
 80049c8:	00e4e1c0 	.word	0x00e4e1c0
 80049cc:	00f42400 	.word	0x00f42400
 80049d0:	01067380 	.word	0x01067380
 80049d4:	011a499f 	.word	0x011a499f
 80049d8:	01312cff 	.word	0x01312cff
 80049dc:	014ca43f 	.word	0x014ca43f
 80049e0:	016e3600 	.word	0x016e3600
 80049e4:	01a6ab1f 	.word	0x01a6ab1f
 80049e8:	01e84800 	.word	0x01e84800

080049ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f043 0201 	orr.w	r2, r3, #1
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f023 0201 	bic.w	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a4c:	78fb      	ldrb	r3, [r7, #3]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d115      	bne.n	8004a7e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a5e:	2001      	movs	r0, #1
 8004a60:	f7fc fe76 	bl	8001750 <HAL_Delay>
      ms++;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	3301      	adds	r3, #1
 8004a68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f001 f972 	bl	8005d54 <USB_GetMode>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d01e      	beq.n	8004ab4 <USB_SetCurrentMode+0x84>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b31      	cmp	r3, #49	; 0x31
 8004a7a:	d9f0      	bls.n	8004a5e <USB_SetCurrentMode+0x2e>
 8004a7c:	e01a      	b.n	8004ab4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a7e:	78fb      	ldrb	r3, [r7, #3]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d115      	bne.n	8004ab0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a90:	2001      	movs	r0, #1
 8004a92:	f7fc fe5d 	bl	8001750 <HAL_Delay>
      ms++;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f001 f959 	bl	8005d54 <USB_GetMode>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d005      	beq.n	8004ab4 <USB_SetCurrentMode+0x84>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b31      	cmp	r3, #49	; 0x31
 8004aac:	d9f0      	bls.n	8004a90 <USB_SetCurrentMode+0x60>
 8004aae:	e001      	b.n	8004ab4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e005      	b.n	8004ac0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2b32      	cmp	r3, #50	; 0x32
 8004ab8:	d101      	bne.n	8004abe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e000      	b.n	8004ac0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ac8:	b084      	sub	sp, #16
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b086      	sub	sp, #24
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ad6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	613b      	str	r3, [r7, #16]
 8004ae6:	e009      	b.n	8004afc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	3340      	adds	r3, #64	; 0x40
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	2200      	movs	r2, #0
 8004af4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	3301      	adds	r3, #1
 8004afa:	613b      	str	r3, [r7, #16]
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	2b0e      	cmp	r3, #14
 8004b00:	d9f2      	bls.n	8004ae8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d11c      	bne.n	8004b42 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b16:	f043 0302 	orr.w	r3, r3, #2
 8004b1a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	639a      	str	r2, [r3, #56]	; 0x38
 8004b40:	e00b      	b.n	8004b5a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b60:	461a      	mov	r2, r3
 8004b62:	2300      	movs	r3, #0
 8004b64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b74:	461a      	mov	r2, r3
 8004b76:	680b      	ldr	r3, [r1, #0]
 8004b78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d10c      	bne.n	8004b9a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d104      	bne.n	8004b90 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b86:	2100      	movs	r1, #0
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f945 	bl	8004e18 <USB_SetDevSpeed>
 8004b8e:	e008      	b.n	8004ba2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b90:	2101      	movs	r1, #1
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f940 	bl	8004e18 <USB_SetDevSpeed>
 8004b98:	e003      	b.n	8004ba2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b9a:	2103      	movs	r1, #3
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f93b 	bl	8004e18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ba2:	2110      	movs	r1, #16
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f8f3 	bl	8004d90 <USB_FlushTxFifo>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f90f 	bl	8004dd8 <USB_FlushRxFifo>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bca:	461a      	mov	r2, r3
 8004bcc:	2300      	movs	r3, #0
 8004bce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	2300      	movs	r3, #0
 8004bda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be2:	461a      	mov	r2, r3
 8004be4:	2300      	movs	r3, #0
 8004be6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004be8:	2300      	movs	r3, #0
 8004bea:	613b      	str	r3, [r7, #16]
 8004bec:	e043      	b.n	8004c76 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c04:	d118      	bne.n	8004c38 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10a      	bne.n	8004c22 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c18:	461a      	mov	r2, r3
 8004c1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c1e:	6013      	str	r3, [r2, #0]
 8004c20:	e013      	b.n	8004c4a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	e008      	b.n	8004c4a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c44:	461a      	mov	r2, r3
 8004c46:	2300      	movs	r3, #0
 8004c48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c56:	461a      	mov	r2, r3
 8004c58:	2300      	movs	r3, #0
 8004c5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c68:	461a      	mov	r2, r3
 8004c6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	3301      	adds	r3, #1
 8004c74:	613b      	str	r3, [r7, #16]
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d3b7      	bcc.n	8004bee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c7e:	2300      	movs	r3, #0
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	e043      	b.n	8004d0c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c9a:	d118      	bne.n	8004cce <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10a      	bne.n	8004cb8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	e013      	b.n	8004ce0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	e008      	b.n	8004ce0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cda:	461a      	mov	r2, r3
 8004cdc:	2300      	movs	r3, #0
 8004cde:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cec:	461a      	mov	r2, r3
 8004cee:	2300      	movs	r3, #0
 8004cf0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	613b      	str	r3, [r7, #16]
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d3b7      	bcc.n	8004c84 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d26:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d34:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d105      	bne.n	8004d48 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	f043 0210 	orr.w	r2, r3, #16
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699a      	ldr	r2, [r3, #24]
 8004d4c:	4b0f      	ldr	r3, [pc, #60]	; (8004d8c <USB_DevInit+0x2c4>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d005      	beq.n	8004d66 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	f043 0208 	orr.w	r2, r3, #8
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d107      	bne.n	8004d7c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d74:	f043 0304 	orr.w	r3, r3, #4
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d88:	b004      	add	sp, #16
 8004d8a:	4770      	bx	lr
 8004d8c:	803c3800 	.word	0x803c3800

08004d90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	019b      	lsls	r3, r3, #6
 8004da2:	f043 0220 	orr.w	r2, r3, #32
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	3301      	adds	r3, #1
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	4a08      	ldr	r2, [pc, #32]	; (8004dd4 <USB_FlushTxFifo+0x44>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d901      	bls.n	8004dba <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e006      	b.n	8004dc8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f003 0320 	and.w	r3, r3, #32
 8004dc2:	2b20      	cmp	r3, #32
 8004dc4:	d0f1      	beq.n	8004daa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	00030d40 	.word	0x00030d40

08004dd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2210      	movs	r2, #16
 8004de8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3301      	adds	r3, #1
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	4a08      	ldr	r2, [pc, #32]	; (8004e14 <USB_FlushRxFifo+0x3c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d901      	bls.n	8004dfa <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e006      	b.n	8004e08 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f003 0310 	and.w	r3, r3, #16
 8004e02:	2b10      	cmp	r3, #16
 8004e04:	d0f1      	beq.n	8004dea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	00030d40 	.word	0x00030d40

08004e18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	460b      	mov	r3, r1
 8004e22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	68f9      	ldr	r1, [r7, #12]
 8004e34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b087      	sub	sp, #28
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 0306 	and.w	r3, r3, #6
 8004e62:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d102      	bne.n	8004e70 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	75fb      	strb	r3, [r7, #23]
 8004e6e:	e00a      	b.n	8004e86 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d002      	beq.n	8004e7c <USB_GetDevSpeed+0x32>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b06      	cmp	r3, #6
 8004e7a:	d102      	bne.n	8004e82 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	75fb      	strb	r3, [r7, #23]
 8004e80:	e001      	b.n	8004e86 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004e82:	230f      	movs	r3, #15
 8004e84:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	785b      	ldrb	r3, [r3, #1]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d13a      	bne.n	8004f26 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	68f9      	ldr	r1, [r7, #12]
 8004eca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d155      	bne.n	8004f94 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	78db      	ldrb	r3, [r3, #3]
 8004f02:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f04:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	059b      	lsls	r3, r3, #22
 8004f0a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	0151      	lsls	r1, r2, #5
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	440a      	add	r2, r1
 8004f16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	e036      	b.n	8004f94 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2c:	69da      	ldr	r2, [r3, #28]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	2101      	movs	r1, #1
 8004f38:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3c:	041b      	lsls	r3, r3, #16
 8004f3e:	68f9      	ldr	r1, [r7, #12]
 8004f40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f44:	4313      	orrs	r3, r2
 8004f46:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d11a      	bne.n	8004f94 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	78db      	ldrb	r3, [r3, #3]
 8004f78:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f7a:	430b      	orrs	r3, r1
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	0151      	lsls	r1, r2, #5
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	440a      	add	r2, r1
 8004f86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f92:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
	...

08004fa4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	785b      	ldrb	r3, [r3, #1]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d161      	bne.n	8005084 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fd6:	d11f      	bne.n	8005018 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	0151      	lsls	r1, r2, #5
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	440a      	add	r2, r1
 8004fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ff6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	0151      	lsls	r1, r2, #5
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	440a      	add	r2, r1
 800500e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005012:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005016:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	f003 030f 	and.w	r3, r3, #15
 8005028:	2101      	movs	r1, #1
 800502a:	fa01 f303 	lsl.w	r3, r1, r3
 800502e:	b29b      	uxth	r3, r3
 8005030:	43db      	mvns	r3, r3
 8005032:	68f9      	ldr	r1, [r7, #12]
 8005034:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005038:	4013      	ands	r3, r2
 800503a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005042:	69da      	ldr	r2, [r3, #28]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	f003 030f 	and.w	r3, r3, #15
 800504c:	2101      	movs	r1, #1
 800504e:	fa01 f303 	lsl.w	r3, r1, r3
 8005052:	b29b      	uxth	r3, r3
 8005054:	43db      	mvns	r3, r3
 8005056:	68f9      	ldr	r1, [r7, #12]
 8005058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800505c:	4013      	ands	r3, r2
 800505e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	0159      	lsls	r1, r3, #5
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	440b      	add	r3, r1
 8005076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507a:	4619      	mov	r1, r3
 800507c:	4b35      	ldr	r3, [pc, #212]	; (8005154 <USB_DeactivateEndpoint+0x1b0>)
 800507e:	4013      	ands	r3, r2
 8005080:	600b      	str	r3, [r1, #0]
 8005082:	e060      	b.n	8005146 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005096:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800509a:	d11f      	bne.n	80050dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	0151      	lsls	r1, r2, #5
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	440a      	add	r2, r1
 80050b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	0151      	lsls	r1, r2, #5
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	440a      	add	r2, r1
 80050d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	f003 030f 	and.w	r3, r3, #15
 80050ec:	2101      	movs	r1, #1
 80050ee:	fa01 f303 	lsl.w	r3, r1, r3
 80050f2:	041b      	lsls	r3, r3, #16
 80050f4:	43db      	mvns	r3, r3
 80050f6:	68f9      	ldr	r1, [r7, #12]
 80050f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050fc:	4013      	ands	r3, r2
 80050fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005106:	69da      	ldr	r2, [r3, #28]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	2101      	movs	r1, #1
 8005112:	fa01 f303 	lsl.w	r3, r1, r3
 8005116:	041b      	lsls	r3, r3, #16
 8005118:	43db      	mvns	r3, r3
 800511a:	68f9      	ldr	r1, [r7, #12]
 800511c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005120:	4013      	ands	r3, r2
 8005122:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	0159      	lsls	r1, r3, #5
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	440b      	add	r3, r1
 800513a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513e:	4619      	mov	r1, r3
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <USB_DeactivateEndpoint+0x1b4>)
 8005142:	4013      	ands	r3, r2
 8005144:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	ec337800 	.word	0xec337800
 8005158:	eff37800 	.word	0xeff37800

0800515c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08a      	sub	sp, #40	; 0x28
 8005160:	af02      	add	r7, sp, #8
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	4613      	mov	r3, r2
 8005168:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	785b      	ldrb	r3, [r3, #1]
 8005178:	2b01      	cmp	r3, #1
 800517a:	f040 815c 	bne.w	8005436 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d132      	bne.n	80051ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	0151      	lsls	r1, r2, #5
 8005198:	69fa      	ldr	r2, [r7, #28]
 800519a:	440a      	add	r2, r1
 800519c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	0151      	lsls	r1, r2, #5
 80051bc:	69fa      	ldr	r2, [r7, #28]
 80051be:	440a      	add	r2, r1
 80051c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	0151      	lsls	r1, r2, #5
 80051dc:	69fa      	ldr	r2, [r7, #28]
 80051de:	440a      	add	r2, r1
 80051e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e4:	0cdb      	lsrs	r3, r3, #19
 80051e6:	04db      	lsls	r3, r3, #19
 80051e8:	6113      	str	r3, [r2, #16]
 80051ea:	e074      	b.n	80052d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	0151      	lsls	r1, r2, #5
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	440a      	add	r2, r1
 8005202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005206:	0cdb      	lsrs	r3, r3, #19
 8005208:	04db      	lsls	r3, r3, #19
 800520a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	0151      	lsls	r1, r2, #5
 800521e:	69fa      	ldr	r2, [r7, #28]
 8005220:	440a      	add	r2, r1
 8005222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005226:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800522a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800522e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	6959      	ldr	r1, [r3, #20]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	440b      	add	r3, r1
 8005248:	1e59      	subs	r1, r3, #1
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005252:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005254:	4b9d      	ldr	r3, [pc, #628]	; (80054cc <USB_EPStartXfer+0x370>)
 8005256:	400b      	ands	r3, r1
 8005258:	69b9      	ldr	r1, [r7, #24]
 800525a:	0148      	lsls	r0, r1, #5
 800525c:	69f9      	ldr	r1, [r7, #28]
 800525e:	4401      	add	r1, r0
 8005260:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005264:	4313      	orrs	r3, r2
 8005266:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005274:	691a      	ldr	r2, [r3, #16]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800527e:	69b9      	ldr	r1, [r7, #24]
 8005280:	0148      	lsls	r0, r1, #5
 8005282:	69f9      	ldr	r1, [r7, #28]
 8005284:	4401      	add	r1, r0
 8005286:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800528a:	4313      	orrs	r3, r2
 800528c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	78db      	ldrb	r3, [r3, #3]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d11f      	bne.n	80052d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	0151      	lsls	r1, r2, #5
 80052a8:	69fa      	ldr	r2, [r7, #28]
 80052aa:	440a      	add	r2, r1
 80052ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80052b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	0151      	lsls	r1, r2, #5
 80052c8:	69fa      	ldr	r2, [r7, #28]
 80052ca:	440a      	add	r2, r1
 80052cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80052d6:	79fb      	ldrb	r3, [r7, #7]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d14b      	bne.n	8005374 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d009      	beq.n	80052f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f0:	461a      	mov	r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	78db      	ldrb	r3, [r3, #3]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d128      	bne.n	8005352 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530c:	2b00      	cmp	r3, #0
 800530e:	d110      	bne.n	8005332 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	0151      	lsls	r1, r2, #5
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	440a      	add	r2, r1
 8005326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800532a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	e00f      	b.n	8005352 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	0151      	lsls	r1, r2, #5
 8005344:	69fa      	ldr	r2, [r7, #28]
 8005346:	440a      	add	r2, r1
 8005348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800534c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005350:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	0151      	lsls	r1, r2, #5
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	440a      	add	r2, r1
 8005368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800536c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	e12f      	b.n	80055d4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	0151      	lsls	r1, r2, #5
 8005386:	69fa      	ldr	r2, [r7, #28]
 8005388:	440a      	add	r2, r1
 800538a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800538e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005392:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	78db      	ldrb	r3, [r3, #3]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d015      	beq.n	80053c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 8117 	beq.w	80055d4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	2101      	movs	r1, #1
 80053b8:	fa01 f303 	lsl.w	r3, r1, r3
 80053bc:	69f9      	ldr	r1, [r7, #28]
 80053be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053c2:	4313      	orrs	r3, r2
 80053c4:	634b      	str	r3, [r1, #52]	; 0x34
 80053c6:	e105      	b.n	80055d4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d110      	bne.n	80053fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	0151      	lsls	r1, r2, #5
 80053ea:	69fa      	ldr	r2, [r7, #28]
 80053ec:	440a      	add	r2, r1
 80053ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	e00f      	b.n	800541a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	0151      	lsls	r1, r2, #5
 800540c:	69fa      	ldr	r2, [r7, #28]
 800540e:	440a      	add	r2, r1
 8005410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005418:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	68d9      	ldr	r1, [r3, #12]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	781a      	ldrb	r2, [r3, #0]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	b298      	uxth	r0, r3
 8005428:	79fb      	ldrb	r3, [r7, #7]
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	4603      	mov	r3, r0
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 fa2b 	bl	800588a <USB_WritePacket>
 8005434:	e0ce      	b.n	80055d4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	4413      	add	r3, r2
 800543e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	0151      	lsls	r1, r2, #5
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	440a      	add	r2, r1
 800544c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005450:	0cdb      	lsrs	r3, r3, #19
 8005452:	04db      	lsls	r3, r3, #19
 8005454:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	0151      	lsls	r1, r2, #5
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	440a      	add	r2, r1
 800546c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005470:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005474:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005478:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d126      	bne.n	80054d0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005498:	69b9      	ldr	r1, [r7, #24]
 800549a:	0148      	lsls	r0, r1, #5
 800549c:	69f9      	ldr	r1, [r7, #28]
 800549e:	4401      	add	r1, r0
 80054a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054a4:	4313      	orrs	r3, r2
 80054a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	0151      	lsls	r1, r2, #5
 80054ba:	69fa      	ldr	r2, [r7, #28]
 80054bc:	440a      	add	r2, r1
 80054be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054c6:	6113      	str	r3, [r2, #16]
 80054c8:	e036      	b.n	8005538 <USB_EPStartXfer+0x3dc>
 80054ca:	bf00      	nop
 80054cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	695a      	ldr	r2, [r3, #20]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	4413      	add	r3, r2
 80054da:	1e5a      	subs	r2, r3, #1
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f2:	691a      	ldr	r2, [r3, #16]
 80054f4:	8afb      	ldrh	r3, [r7, #22]
 80054f6:	04d9      	lsls	r1, r3, #19
 80054f8:	4b39      	ldr	r3, [pc, #228]	; (80055e0 <USB_EPStartXfer+0x484>)
 80054fa:	400b      	ands	r3, r1
 80054fc:	69b9      	ldr	r1, [r7, #24]
 80054fe:	0148      	lsls	r0, r1, #5
 8005500:	69f9      	ldr	r1, [r7, #28]
 8005502:	4401      	add	r1, r0
 8005504:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005508:	4313      	orrs	r3, r2
 800550a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005518:	691a      	ldr	r2, [r3, #16]
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	8af9      	ldrh	r1, [r7, #22]
 8005520:	fb01 f303 	mul.w	r3, r1, r3
 8005524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005528:	69b9      	ldr	r1, [r7, #24]
 800552a:	0148      	lsls	r0, r1, #5
 800552c:	69f9      	ldr	r1, [r7, #28]
 800552e:	4401      	add	r1, r0
 8005530:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005534:	4313      	orrs	r3, r2
 8005536:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005538:	79fb      	ldrb	r3, [r7, #7]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d10d      	bne.n	800555a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d009      	beq.n	800555a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	68d9      	ldr	r1, [r3, #12]
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005556:	460a      	mov	r2, r1
 8005558:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	78db      	ldrb	r3, [r3, #3]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d128      	bne.n	80055b4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556e:	2b00      	cmp	r3, #0
 8005570:	d110      	bne.n	8005594 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	0151      	lsls	r1, r2, #5
 8005584:	69fa      	ldr	r2, [r7, #28]
 8005586:	440a      	add	r2, r1
 8005588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800558c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	e00f      	b.n	80055b4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	0151      	lsls	r1, r2, #5
 80055a6:	69fa      	ldr	r2, [r7, #28]
 80055a8:	440a      	add	r2, r1
 80055aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	0151      	lsls	r1, r2, #5
 80055c6:	69fa      	ldr	r2, [r7, #28]
 80055c8:	440a      	add	r2, r1
 80055ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3720      	adds	r7, #32
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	1ff80000 	.word	0x1ff80000

080055e4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	4613      	mov	r3, r2
 80055f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	785b      	ldrb	r3, [r3, #1]
 8005600:	2b01      	cmp	r3, #1
 8005602:	f040 80cd 	bne.w	80057a0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d132      	bne.n	8005674 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	0151      	lsls	r1, r2, #5
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	440a      	add	r2, r1
 8005624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005628:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800562c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005630:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	0151      	lsls	r1, r2, #5
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	440a      	add	r2, r1
 8005648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800564c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005650:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	0151      	lsls	r1, r2, #5
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	440a      	add	r2, r1
 8005668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566c:	0cdb      	lsrs	r3, r3, #19
 800566e:	04db      	lsls	r3, r3, #19
 8005670:	6113      	str	r3, [r2, #16]
 8005672:	e04e      	b.n	8005712 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	0151      	lsls	r1, r2, #5
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	440a      	add	r2, r1
 800568a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800568e:	0cdb      	lsrs	r3, r3, #19
 8005690:	04db      	lsls	r3, r3, #19
 8005692:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	4413      	add	r3, r2
 800569c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	0151      	lsls	r1, r2, #5
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	440a      	add	r2, r1
 80056aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056b6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	695a      	ldr	r2, [r3, #20]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d903      	bls.n	80056cc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	0151      	lsls	r1, r2, #5
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	440a      	add	r2, r1
 80056e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f8:	691a      	ldr	r2, [r3, #16]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005702:	6939      	ldr	r1, [r7, #16]
 8005704:	0148      	lsls	r0, r1, #5
 8005706:	6979      	ldr	r1, [r7, #20]
 8005708:	4401      	add	r1, r0
 800570a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800570e:	4313      	orrs	r3, r2
 8005710:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005712:	79fb      	ldrb	r3, [r7, #7]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d11e      	bne.n	8005756 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d009      	beq.n	8005734 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572c:	461a      	mov	r2, r3
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	0151      	lsls	r1, r2, #5
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	440a      	add	r2, r1
 800574a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800574e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	e092      	b.n	800587c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	0151      	lsls	r1, r2, #5
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	440a      	add	r2, r1
 800576c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005770:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005774:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d07e      	beq.n	800587c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	2101      	movs	r1, #1
 8005790:	fa01 f303 	lsl.w	r3, r1, r3
 8005794:	6979      	ldr	r1, [r7, #20]
 8005796:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800579a:	4313      	orrs	r3, r2
 800579c:	634b      	str	r3, [r1, #52]	; 0x34
 800579e:	e06d      	b.n	800587c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	0151      	lsls	r1, r2, #5
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	440a      	add	r2, r1
 80057b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ba:	0cdb      	lsrs	r3, r3, #19
 80057bc:	04db      	lsls	r3, r3, #19
 80057be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	0151      	lsls	r1, r2, #5
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	440a      	add	r2, r1
 80057d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057e2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	0151      	lsls	r1, r2, #5
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	440a      	add	r2, r1
 800580a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800580e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005812:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005820:	691a      	ldr	r2, [r3, #16]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800582a:	6939      	ldr	r1, [r7, #16]
 800582c:	0148      	lsls	r0, r1, #5
 800582e:	6979      	ldr	r1, [r7, #20]
 8005830:	4401      	add	r1, r0
 8005832:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005836:	4313      	orrs	r3, r2
 8005838:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800583a:	79fb      	ldrb	r3, [r7, #7]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d10d      	bne.n	800585c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d009      	beq.n	800585c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	68d9      	ldr	r1, [r3, #12]
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005858:	460a      	mov	r2, r1
 800585a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	0151      	lsls	r1, r2, #5
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	440a      	add	r2, r1
 8005872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005876:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800587a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800588a:	b480      	push	{r7}
 800588c:	b089      	sub	sp, #36	; 0x24
 800588e:	af00      	add	r7, sp, #0
 8005890:	60f8      	str	r0, [r7, #12]
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	4611      	mov	r1, r2
 8005896:	461a      	mov	r2, r3
 8005898:	460b      	mov	r3, r1
 800589a:	71fb      	strb	r3, [r7, #7]
 800589c:	4613      	mov	r3, r2
 800589e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80058a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d123      	bne.n	80058f8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80058b0:	88bb      	ldrh	r3, [r7, #4]
 80058b2:	3303      	adds	r3, #3
 80058b4:	089b      	lsrs	r3, r3, #2
 80058b6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80058b8:	2300      	movs	r3, #0
 80058ba:	61bb      	str	r3, [r7, #24]
 80058bc:	e018      	b.n	80058f0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	031a      	lsls	r2, r3, #12
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ca:	461a      	mov	r2, r3
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	3301      	adds	r3, #1
 80058d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	3301      	adds	r3, #1
 80058dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	3301      	adds	r3, #1
 80058e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	3301      	adds	r3, #1
 80058e8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	3301      	adds	r3, #1
 80058ee:	61bb      	str	r3, [r7, #24]
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d3e2      	bcc.n	80058be <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3724      	adds	r7, #36	; 0x24
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005906:	b480      	push	{r7}
 8005908:	b08b      	sub	sp, #44	; 0x2c
 800590a:	af00      	add	r7, sp, #0
 800590c:	60f8      	str	r0, [r7, #12]
 800590e:	60b9      	str	r1, [r7, #8]
 8005910:	4613      	mov	r3, r2
 8005912:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800591c:	88fb      	ldrh	r3, [r7, #6]
 800591e:	089b      	lsrs	r3, r3, #2
 8005920:	b29b      	uxth	r3, r3
 8005922:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005924:	88fb      	ldrh	r3, [r7, #6]
 8005926:	f003 0303 	and.w	r3, r3, #3
 800592a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800592c:	2300      	movs	r3, #0
 800592e:	623b      	str	r3, [r7, #32]
 8005930:	e014      	b.n	800595c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	601a      	str	r2, [r3, #0]
    pDest++;
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	3301      	adds	r3, #1
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	3301      	adds	r3, #1
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	3301      	adds	r3, #1
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	3301      	adds	r3, #1
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	3301      	adds	r3, #1
 800595a:	623b      	str	r3, [r7, #32]
 800595c:	6a3a      	ldr	r2, [r7, #32]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	429a      	cmp	r2, r3
 8005962:	d3e6      	bcc.n	8005932 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005964:	8bfb      	ldrh	r3, [r7, #30]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d01e      	beq.n	80059a8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005974:	461a      	mov	r2, r3
 8005976:	f107 0310 	add.w	r3, r7, #16
 800597a:	6812      	ldr	r2, [r2, #0]
 800597c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	b2db      	uxtb	r3, r3
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	fa22 f303 	lsr.w	r3, r2, r3
 800598a:	b2da      	uxtb	r2, r3
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	701a      	strb	r2, [r3, #0]
      i++;
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	3301      	adds	r3, #1
 8005994:	623b      	str	r3, [r7, #32]
      pDest++;
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	3301      	adds	r3, #1
 800599a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800599c:	8bfb      	ldrh	r3, [r7, #30]
 800599e:	3b01      	subs	r3, #1
 80059a0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80059a2:	8bfb      	ldrh	r3, [r7, #30]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1ea      	bne.n	800597e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	372c      	adds	r7, #44	; 0x2c
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b085      	sub	sp, #20
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	785b      	ldrb	r3, [r3, #1]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d12c      	bne.n	8005a2c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	db12      	blt.n	8005a0a <USB_EPSetStall+0x54>
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00f      	beq.n	8005a0a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	0151      	lsls	r1, r2, #5
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	440a      	add	r2, r1
 8005a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a08:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	0151      	lsls	r1, r2, #5
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	440a      	add	r2, r1
 8005a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a28:	6013      	str	r3, [r2, #0]
 8005a2a:	e02b      	b.n	8005a84 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	db12      	blt.n	8005a64 <USB_EPSetStall+0xae>
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00f      	beq.n	8005a64 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	0151      	lsls	r1, r2, #5
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	440a      	add	r2, r1
 8005a5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a62:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	0151      	lsls	r1, r2, #5
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	440a      	add	r2, r1
 8005a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b085      	sub	sp, #20
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	785b      	ldrb	r3, [r3, #1]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d128      	bne.n	8005b00 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	0151      	lsls	r1, r2, #5
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	440a      	add	r2, r1
 8005ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005acc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	78db      	ldrb	r3, [r3, #3]
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	d003      	beq.n	8005ade <USB_EPClearStall+0x4c>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	78db      	ldrb	r3, [r3, #3]
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d138      	bne.n	8005b50 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	0151      	lsls	r1, r2, #5
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	440a      	add	r2, r1
 8005af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	e027      	b.n	8005b50 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	0151      	lsls	r1, r2, #5
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	440a      	add	r2, r1
 8005b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b1e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	78db      	ldrb	r3, [r3, #3]
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d003      	beq.n	8005b30 <USB_EPClearStall+0x9e>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	78db      	ldrb	r3, [r3, #3]
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d10f      	bne.n	8005b50 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	0151      	lsls	r1, r2, #5
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	440a      	add	r2, r1
 8005b46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b4e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b085      	sub	sp, #20
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	460b      	mov	r3, r1
 8005b68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b7c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b80:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	78fb      	ldrb	r3, [r7, #3]
 8005b8c:	011b      	lsls	r3, r3, #4
 8005b8e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005b92:	68f9      	ldr	r1, [r7, #12]
 8005b94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b085      	sub	sp, #20
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005bc4:	f023 0303 	bic.w	r3, r3, #3
 8005bc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bd8:	f023 0302 	bic.w	r3, r3, #2
 8005bdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c06:	f023 0303 	bic.w	r3, r3, #3
 8005c0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c1a:	f043 0302 	orr.w	r3, r3, #2
 8005c1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b085      	sub	sp, #20
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4013      	ands	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c46:	68fb      	ldr	r3, [r7, #12]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3714      	adds	r7, #20
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	4013      	ands	r3, r2
 8005c76:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	0c1b      	lsrs	r3, r3, #16
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	b29b      	uxth	r3, r3
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005ccc:	78fb      	ldrb	r3, [r7, #3]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cea:	68bb      	ldr	r3, [r7, #8]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3714      	adds	r7, #20
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b087      	sub	sp, #28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005d1c:	78fb      	ldrb	r3, [r7, #3]
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	fa22 f303 	lsr.w	r3, r2, r3
 8005d28:	01db      	lsls	r3, r3, #7
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005d32:	78fb      	ldrb	r3, [r7, #3]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4013      	ands	r3, r2
 8005d44:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d46:	68bb      	ldr	r3, [r7, #8]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	371c      	adds	r7, #28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	f003 0301 	and.w	r3, r3, #1
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d8a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005d8e:	f023 0307 	bic.w	r3, r3, #7
 8005d92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005da6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
	...

08005db8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	333c      	adds	r3, #60	; 0x3c
 8005dce:	3304      	adds	r3, #4
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	4a26      	ldr	r2, [pc, #152]	; (8005e70 <USB_EP0_OutStart+0xb8>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d90a      	bls.n	8005df2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005de8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dec:	d101      	bne.n	8005df2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	e037      	b.n	8005e62 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df8:	461a      	mov	r2, r3
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e20:	f043 0318 	orr.w	r3, r3, #24
 8005e24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e34:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005e38:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005e3a:	7afb      	ldrb	r3, [r7, #11]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d10f      	bne.n	8005e60 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e46:	461a      	mov	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e5a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005e5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	4f54300a 	.word	0x4f54300a

08005e74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	3301      	adds	r3, #1
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	4a13      	ldr	r2, [pc, #76]	; (8005ed4 <USB_CoreReset+0x60>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d901      	bls.n	8005e90 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e01a      	b.n	8005ec6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	daf3      	bge.n	8005e80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	f043 0201 	orr.w	r2, r3, #1
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	4a09      	ldr	r2, [pc, #36]	; (8005ed4 <USB_CoreReset+0x60>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d901      	bls.n	8005eb8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e006      	b.n	8005ec6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d0f1      	beq.n	8005ea8 <USB_CoreReset+0x34>

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	00030d40 	.word	0x00030d40

08005ed8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005ee4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005ee8:	f002 f96a 	bl	80081c0 <USBD_static_malloc>
 8005eec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d105      	bne.n	8005f00 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005efc:	2302      	movs	r3, #2
 8005efe:	e066      	b.n	8005fce <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	7c1b      	ldrb	r3, [r3, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d119      	bne.n	8005f44 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f14:	2202      	movs	r2, #2
 8005f16:	2181      	movs	r1, #129	; 0x81
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f002 f82e 	bl	8007f7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f28:	2202      	movs	r2, #2
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f002 f824 	bl	8007f7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2210      	movs	r2, #16
 8005f3e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005f42:	e016      	b.n	8005f72 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f44:	2340      	movs	r3, #64	; 0x40
 8005f46:	2202      	movs	r2, #2
 8005f48:	2181      	movs	r1, #129	; 0x81
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f002 f815 	bl	8007f7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f56:	2340      	movs	r3, #64	; 0x40
 8005f58:	2202      	movs	r2, #2
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f002 f80c 	bl	8007f7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2210      	movs	r2, #16
 8005f6e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f72:	2308      	movs	r3, #8
 8005f74:	2203      	movs	r2, #3
 8005f76:	2182      	movs	r1, #130	; 0x82
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f001 fffe 	bl	8007f7a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	7c1b      	ldrb	r3, [r3, #16]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d109      	bne.n	8005fbc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f002 f8cf 	bl	8008158 <USBD_LL_PrepareReceive>
 8005fba:	e007      	b.n	8005fcc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fc2:	2340      	movs	r3, #64	; 0x40
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f002 f8c6 	bl	8008158 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b082      	sub	sp, #8
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	460b      	mov	r3, r1
 8005fe0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005fe2:	2181      	movs	r1, #129	; 0x81
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f001 ffee 	bl	8007fc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f001 ffe7 	bl	8007fc6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006000:	2182      	movs	r1, #130	; 0x82
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f001 ffdf 	bl	8007fc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00e      	beq.n	8006040 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006032:	4618      	mov	r0, r3
 8006034:	f002 f8d2 	bl	80081dc <USBD_static_free>
    pdev->pClassData = NULL;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800605c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006062:	2300      	movs	r3, #0
 8006064:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006070:	2303      	movs	r3, #3
 8006072:	e0af      	b.n	80061d4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800607c:	2b00      	cmp	r3, #0
 800607e:	d03f      	beq.n	8006100 <USBD_CDC_Setup+0xb4>
 8006080:	2b20      	cmp	r3, #32
 8006082:	f040 809f 	bne.w	80061c4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	88db      	ldrh	r3, [r3, #6]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d02e      	beq.n	80060ec <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	b25b      	sxtb	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	da16      	bge.n	80060c6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80060a4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	88d2      	ldrh	r2, [r2, #6]
 80060aa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	88db      	ldrh	r3, [r3, #6]
 80060b0:	2b07      	cmp	r3, #7
 80060b2:	bf28      	it	cs
 80060b4:	2307      	movcs	r3, #7
 80060b6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	89fa      	ldrh	r2, [r7, #14]
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f001 fb19 	bl	80076f6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80060c4:	e085      	b.n	80061d2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	785a      	ldrb	r2, [r3, #1]
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	88db      	ldrh	r3, [r3, #6]
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80060dc:	6939      	ldr	r1, [r7, #16]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	88db      	ldrh	r3, [r3, #6]
 80060e2:	461a      	mov	r2, r3
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f001 fb32 	bl	800774e <USBD_CtlPrepareRx>
      break;
 80060ea:	e072      	b.n	80061d2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	7850      	ldrb	r0, [r2, #1]
 80060f8:	2200      	movs	r2, #0
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	4798      	blx	r3
      break;
 80060fe:	e068      	b.n	80061d2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	785b      	ldrb	r3, [r3, #1]
 8006104:	2b0b      	cmp	r3, #11
 8006106:	d852      	bhi.n	80061ae <USBD_CDC_Setup+0x162>
 8006108:	a201      	add	r2, pc, #4	; (adr r2, 8006110 <USBD_CDC_Setup+0xc4>)
 800610a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610e:	bf00      	nop
 8006110:	08006141 	.word	0x08006141
 8006114:	080061bd 	.word	0x080061bd
 8006118:	080061af 	.word	0x080061af
 800611c:	080061af 	.word	0x080061af
 8006120:	080061af 	.word	0x080061af
 8006124:	080061af 	.word	0x080061af
 8006128:	080061af 	.word	0x080061af
 800612c:	080061af 	.word	0x080061af
 8006130:	080061af 	.word	0x080061af
 8006134:	080061af 	.word	0x080061af
 8006138:	0800616b 	.word	0x0800616b
 800613c:	08006195 	.word	0x08006195
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b03      	cmp	r3, #3
 800614a:	d107      	bne.n	800615c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800614c:	f107 030a 	add.w	r3, r7, #10
 8006150:	2202      	movs	r2, #2
 8006152:	4619      	mov	r1, r3
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f001 face 	bl	80076f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800615a:	e032      	b.n	80061c2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800615c:	6839      	ldr	r1, [r7, #0]
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f001 fa58 	bl	8007614 <USBD_CtlError>
            ret = USBD_FAIL;
 8006164:	2303      	movs	r3, #3
 8006166:	75fb      	strb	r3, [r7, #23]
          break;
 8006168:	e02b      	b.n	80061c2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b03      	cmp	r3, #3
 8006174:	d107      	bne.n	8006186 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006176:	f107 030d 	add.w	r3, r7, #13
 800617a:	2201      	movs	r2, #1
 800617c:	4619      	mov	r1, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f001 fab9 	bl	80076f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006184:	e01d      	b.n	80061c2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006186:	6839      	ldr	r1, [r7, #0]
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f001 fa43 	bl	8007614 <USBD_CtlError>
            ret = USBD_FAIL;
 800618e:	2303      	movs	r3, #3
 8006190:	75fb      	strb	r3, [r7, #23]
          break;
 8006192:	e016      	b.n	80061c2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b03      	cmp	r3, #3
 800619e:	d00f      	beq.n	80061c0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80061a0:	6839      	ldr	r1, [r7, #0]
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f001 fa36 	bl	8007614 <USBD_CtlError>
            ret = USBD_FAIL;
 80061a8:	2303      	movs	r3, #3
 80061aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80061ac:	e008      	b.n	80061c0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80061ae:	6839      	ldr	r1, [r7, #0]
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f001 fa2f 	bl	8007614 <USBD_CtlError>
          ret = USBD_FAIL;
 80061b6:	2303      	movs	r3, #3
 80061b8:	75fb      	strb	r3, [r7, #23]
          break;
 80061ba:	e002      	b.n	80061c2 <USBD_CDC_Setup+0x176>
          break;
 80061bc:	bf00      	nop
 80061be:	e008      	b.n	80061d2 <USBD_CDC_Setup+0x186>
          break;
 80061c0:	bf00      	nop
      }
      break;
 80061c2:	e006      	b.n	80061d2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f001 fa24 	bl	8007614 <USBD_CtlError>
      ret = USBD_FAIL;
 80061cc:	2303      	movs	r3, #3
 80061ce:	75fb      	strb	r3, [r7, #23]
      break;
 80061d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80061d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	460b      	mov	r3, r1
 80061e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80061ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e04f      	b.n	800629e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006204:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006206:	78fa      	ldrb	r2, [r7, #3]
 8006208:	6879      	ldr	r1, [r7, #4]
 800620a:	4613      	mov	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	440b      	add	r3, r1
 8006214:	3318      	adds	r3, #24
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d029      	beq.n	8006270 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800621c:	78fa      	ldrb	r2, [r7, #3]
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	440b      	add	r3, r1
 800622a:	3318      	adds	r3, #24
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	78f9      	ldrb	r1, [r7, #3]
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	460b      	mov	r3, r1
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	1a5b      	subs	r3, r3, r1
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4403      	add	r3, r0
 800623c:	3344      	adds	r3, #68	; 0x44
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	fbb2 f1f3 	udiv	r1, r2, r3
 8006244:	fb03 f301 	mul.w	r3, r3, r1
 8006248:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800624a:	2b00      	cmp	r3, #0
 800624c:	d110      	bne.n	8006270 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800624e:	78fa      	ldrb	r2, [r7, #3]
 8006250:	6879      	ldr	r1, [r7, #4]
 8006252:	4613      	mov	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	440b      	add	r3, r1
 800625c:	3318      	adds	r3, #24
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006262:	78f9      	ldrb	r1, [r7, #3]
 8006264:	2300      	movs	r3, #0
 8006266:	2200      	movs	r2, #0
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f001 ff54 	bl	8008116 <USBD_LL_Transmit>
 800626e:	e015      	b.n	800629c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2200      	movs	r2, #0
 8006274:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00b      	beq.n	800629c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006298:	78fa      	ldrb	r2, [r7, #3]
 800629a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	460b      	mov	r3, r1
 80062b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e015      	b.n	80062f4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80062c8:	78fb      	ldrb	r3, [r7, #3]
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f001 ff64 	bl	800819a <USBD_LL_GetRxDataSize>
 80062d2:	4602      	mov	r2, r0
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80062ee:	4611      	mov	r1, r2
 80062f0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800630a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006312:	2303      	movs	r3, #3
 8006314:	e01b      	b.n	800634e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d015      	beq.n	800634c <USBD_CDC_EP0_RxReady+0x50>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006326:	2bff      	cmp	r3, #255	; 0xff
 8006328:	d010      	beq.n	800634c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006338:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006340:	b292      	uxth	r2, r2
 8006342:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	22ff      	movs	r2, #255	; 0xff
 8006348:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2243      	movs	r2, #67	; 0x43
 8006364:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006366:	4b03      	ldr	r3, [pc, #12]	; (8006374 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006368:	4618      	mov	r0, r3
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	20000138 	.word	0x20000138

08006378 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2243      	movs	r2, #67	; 0x43
 8006384:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006386:	4b03      	ldr	r3, [pc, #12]	; (8006394 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006388:	4618      	mov	r0, r3
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	200000f4 	.word	0x200000f4

08006398 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2243      	movs	r2, #67	; 0x43
 80063a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80063a6:	4b03      	ldr	r3, [pc, #12]	; (80063b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr
 80063b4:	2000017c 	.word	0x2000017c

080063b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	220a      	movs	r2, #10
 80063c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80063c6:	4b03      	ldr	r3, [pc, #12]	; (80063d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	200000b0 	.word	0x200000b0

080063d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e004      	b.n	80063f6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006402:	b480      	push	{r7}
 8006404:	b087      	sub	sp, #28
 8006406:	af00      	add	r7, sp, #0
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006414:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800641c:	2303      	movs	r3, #3
 800641e:	e008      	b.n	8006432 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	371c      	adds	r7, #28
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800643e:	b480      	push	{r7}
 8006440:	b085      	sub	sp, #20
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800644e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006456:	2303      	movs	r3, #3
 8006458:	e004      	b.n	8006464 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800647e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006480:	2301      	movs	r3, #1
 8006482:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800648e:	2303      	movs	r3, #3
 8006490:	e01a      	b.n	80064c8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006498:	2b00      	cmp	r3, #0
 800649a:	d114      	bne.n	80064c6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2201      	movs	r2, #1
 80064a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80064ba:	2181      	movs	r1, #129	; 0x81
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f001 fe2a 	bl	8008116 <USBD_LL_Transmit>

    ret = USBD_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80064c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e016      	b.n	800651c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	7c1b      	ldrb	r3, [r3, #16]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d109      	bne.n	800650a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006500:	2101      	movs	r1, #1
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 fe28 	bl	8008158 <USBD_LL_PrepareReceive>
 8006508:	e007      	b.n	800651a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006510:	2340      	movs	r3, #64	; 0x40
 8006512:	2101      	movs	r1, #1
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f001 fe1f 	bl	8008158 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	4613      	mov	r3, r2
 8006530:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006538:	2303      	movs	r3, #3
 800653a:	e01f      	b.n	800657c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	79fa      	ldrb	r2, [r7, #7]
 800656e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f001 fc9b 	bl	8007eac <USBD_LL_Init>
 8006576:	4603      	mov	r3, r0
 8006578:	75fb      	strb	r3, [r7, #23]

  return ret;
 800657a:	7dfb      	ldrb	r3, [r7, #23]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006598:	2303      	movs	r3, #3
 800659a:	e016      	b.n	80065ca <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00b      	beq.n	80065c8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b8:	f107 020e 	add.w	r2, r7, #14
 80065bc:	4610      	mov	r0, r2
 80065be:	4798      	blx	r3
 80065c0:	4602      	mov	r2, r0
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b082      	sub	sp, #8
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f001 fcb2 	bl	8007f44 <USBD_LL_Start>
 80065e0:	4603      	mov	r3, r0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b083      	sub	sp, #12
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800660c:	2303      	movs	r3, #3
 800660e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006616:	2b00      	cmp	r3, #0
 8006618:	d009      	beq.n	800662e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	78fa      	ldrb	r2, [r7, #3]
 8006624:	4611      	mov	r1, r2
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	4798      	blx	r3
 800662a:	4603      	mov	r3, r0
 800662c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800662e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	460b      	mov	r3, r1
 8006642:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800664a:	2b00      	cmp	r3, #0
 800664c:	d007      	beq.n	800665e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	78fa      	ldrb	r2, [r7, #3]
 8006658:	4611      	mov	r1, r2
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	4798      	blx	r3
  }

  return USBD_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	4618      	mov	r0, r3
 800667c:	f000 ff90 	bl	80075a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800668e:	461a      	mov	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800669c:	f003 031f 	and.w	r3, r3, #31
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d01a      	beq.n	80066da <USBD_LL_SetupStage+0x72>
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d822      	bhi.n	80066ee <USBD_LL_SetupStage+0x86>
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <USBD_LL_SetupStage+0x4a>
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d00a      	beq.n	80066c6 <USBD_LL_SetupStage+0x5e>
 80066b0:	e01d      	b.n	80066ee <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066b8:	4619      	mov	r1, r3
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fa62 	bl	8006b84 <USBD_StdDevReq>
 80066c0:	4603      	mov	r3, r0
 80066c2:	73fb      	strb	r3, [r7, #15]
      break;
 80066c4:	e020      	b.n	8006708 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 fac6 	bl	8006c60 <USBD_StdItfReq>
 80066d4:	4603      	mov	r3, r0
 80066d6:	73fb      	strb	r3, [r7, #15]
      break;
 80066d8:	e016      	b.n	8006708 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066e0:	4619      	mov	r1, r3
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fb05 	bl	8006cf2 <USBD_StdEPReq>
 80066e8:	4603      	mov	r3, r0
 80066ea:	73fb      	strb	r3, [r7, #15]
      break;
 80066ec:	e00c      	b.n	8006708 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80066f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	4619      	mov	r1, r3
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f001 fc81 	bl	8008004 <USBD_LL_StallEP>
 8006702:	4603      	mov	r3, r0
 8006704:	73fb      	strb	r3, [r7, #15]
      break;
 8006706:	bf00      	nop
  }

  return ret;
 8006708:	7bfb      	ldrb	r3, [r7, #15]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b086      	sub	sp, #24
 8006716:	af00      	add	r7, sp, #0
 8006718:	60f8      	str	r0, [r7, #12]
 800671a:	460b      	mov	r3, r1
 800671c:	607a      	str	r2, [r7, #4]
 800671e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006720:	7afb      	ldrb	r3, [r7, #11]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d138      	bne.n	8006798 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800672c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006734:	2b03      	cmp	r3, #3
 8006736:	d14a      	bne.n	80067ce <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	689a      	ldr	r2, [r3, #8]
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	429a      	cmp	r2, r3
 8006742:	d913      	bls.n	800676c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	1ad2      	subs	r2, r2, r3
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	68da      	ldr	r2, [r3, #12]
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	4293      	cmp	r3, r2
 800675c:	bf28      	it	cs
 800675e:	4613      	movcs	r3, r2
 8006760:	461a      	mov	r2, r3
 8006762:	6879      	ldr	r1, [r7, #4]
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f001 f80f 	bl	8007788 <USBD_CtlContinueRx>
 800676a:	e030      	b.n	80067ce <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b03      	cmp	r3, #3
 8006776:	d10b      	bne.n	8006790 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d005      	beq.n	8006790 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f001 f80a 	bl	80077aa <USBD_CtlSendStatus>
 8006796:	e01a      	b.n	80067ce <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b03      	cmp	r3, #3
 80067a2:	d114      	bne.n	80067ce <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00e      	beq.n	80067ce <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	7afa      	ldrb	r2, [r7, #11]
 80067ba:	4611      	mov	r1, r2
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	4798      	blx	r3
 80067c0:	4603      	mov	r3, r0
 80067c2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80067c4:	7dfb      	ldrb	r3, [r7, #23]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80067ca:	7dfb      	ldrb	r3, [r7, #23]
 80067cc:	e000      	b.n	80067d0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	460b      	mov	r3, r1
 80067e2:	607a      	str	r2, [r7, #4]
 80067e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80067e6:	7afb      	ldrb	r3, [r7, #11]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d16b      	bne.n	80068c4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3314      	adds	r3, #20
 80067f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d156      	bne.n	80068aa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	429a      	cmp	r2, r3
 8006806:	d914      	bls.n	8006832 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	689a      	ldr	r2, [r3, #8]
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	1ad2      	subs	r2, r2, r3
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	461a      	mov	r2, r3
 800681c:	6879      	ldr	r1, [r7, #4]
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 ff84 	bl	800772c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006824:	2300      	movs	r3, #0
 8006826:	2200      	movs	r2, #0
 8006828:	2100      	movs	r1, #0
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f001 fc94 	bl	8008158 <USBD_LL_PrepareReceive>
 8006830:	e03b      	b.n	80068aa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	429a      	cmp	r2, r3
 800683c:	d11c      	bne.n	8006878 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006846:	429a      	cmp	r2, r3
 8006848:	d316      	bcc.n	8006878 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006854:	429a      	cmp	r2, r3
 8006856:	d20f      	bcs.n	8006878 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006858:	2200      	movs	r2, #0
 800685a:	2100      	movs	r1, #0
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 ff65 	bl	800772c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800686a:	2300      	movs	r3, #0
 800686c:	2200      	movs	r2, #0
 800686e:	2100      	movs	r1, #0
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f001 fc71 	bl	8008158 <USBD_LL_PrepareReceive>
 8006876:	e018      	b.n	80068aa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b03      	cmp	r3, #3
 8006882:	d10b      	bne.n	800689c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d005      	beq.n	800689c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800689c:	2180      	movs	r1, #128	; 0x80
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f001 fbb0 	bl	8008004 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 ff93 	bl	80077d0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d122      	bne.n	80068fa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f7ff fe98 	bl	80065ea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80068c2:	e01a      	b.n	80068fa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b03      	cmp	r3, #3
 80068ce:	d114      	bne.n	80068fa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00e      	beq.n	80068fa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	7afa      	ldrb	r2, [r7, #11]
 80068e6:	4611      	mov	r1, r2
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	4798      	blx	r3
 80068ec:	4603      	mov	r3, r0
 80068ee:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80068f0:	7dfb      	ldrb	r3, [r7, #23]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80068f6:	7dfb      	ldrb	r3, [r7, #23]
 80068f8:	e000      	b.n	80068fc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3718      	adds	r7, #24
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006930:	2b00      	cmp	r3, #0
 8006932:	d101      	bne.n	8006938 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006934:	2303      	movs	r3, #3
 8006936:	e02f      	b.n	8006998 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00f      	beq.n	8006962 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d009      	beq.n	8006962 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	6852      	ldr	r2, [r2, #4]
 800695a:	b2d2      	uxtb	r2, r2
 800695c:	4611      	mov	r1, r2
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006962:	2340      	movs	r3, #64	; 0x40
 8006964:	2200      	movs	r2, #0
 8006966:	2100      	movs	r1, #0
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f001 fb06 	bl	8007f7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2240      	movs	r2, #64	; 0x40
 800697a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800697e:	2340      	movs	r3, #64	; 0x40
 8006980:	2200      	movs	r2, #0
 8006982:	2180      	movs	r1, #128	; 0x80
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 faf8 	bl	8007f7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2240      	movs	r2, #64	; 0x40
 8006994:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	460b      	mov	r3, r1
 80069aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	78fa      	ldrb	r2, [r7, #3]
 80069b0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2204      	movs	r2, #4
 80069da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b04      	cmp	r3, #4
 80069fe:	d106      	bne.n	8006a0e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d101      	bne.n	8006a32 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e012      	b.n	8006a58 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	d10b      	bne.n	8006a56 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d005      	beq.n	8006a56 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e014      	b.n	8006aa4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d10d      	bne.n	8006aa2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d007      	beq.n	8006aa2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	78fa      	ldrb	r2, [r7, #3]
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e014      	b.n	8006af0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d10d      	bne.n	8006aee <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d007      	beq.n	8006aee <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae6:	78fa      	ldrb	r2, [r7, #3]
 8006ae8:	4611      	mov	r1, r2
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b082      	sub	sp, #8
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d009      	beq.n	8006b3c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	6852      	ldr	r2, [r2, #4]
 8006b34:	b2d2      	uxtb	r2, r2
 8006b36:	4611      	mov	r1, r2
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	4798      	blx	r3
  }

  return USBD_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b087      	sub	sp, #28
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006b64:	8a3b      	ldrh	r3, [r7, #16]
 8006b66:	021b      	lsls	r3, r3, #8
 8006b68:	b21a      	sxth	r2, r3
 8006b6a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	b21b      	sxth	r3, r3
 8006b72:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006b74:	89fb      	ldrh	r3, [r7, #14]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	371c      	adds	r7, #28
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
	...

08006b84 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b9a:	2b40      	cmp	r3, #64	; 0x40
 8006b9c:	d005      	beq.n	8006baa <USBD_StdDevReq+0x26>
 8006b9e:	2b40      	cmp	r3, #64	; 0x40
 8006ba0:	d853      	bhi.n	8006c4a <USBD_StdDevReq+0xc6>
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00b      	beq.n	8006bbe <USBD_StdDevReq+0x3a>
 8006ba6:	2b20      	cmp	r3, #32
 8006ba8:	d14f      	bne.n	8006c4a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	4798      	blx	r3
 8006bb8:	4603      	mov	r3, r0
 8006bba:	73fb      	strb	r3, [r7, #15]
      break;
 8006bbc:	e04a      	b.n	8006c54 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	785b      	ldrb	r3, [r3, #1]
 8006bc2:	2b09      	cmp	r3, #9
 8006bc4:	d83b      	bhi.n	8006c3e <USBD_StdDevReq+0xba>
 8006bc6:	a201      	add	r2, pc, #4	; (adr r2, 8006bcc <USBD_StdDevReq+0x48>)
 8006bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bcc:	08006c21 	.word	0x08006c21
 8006bd0:	08006c35 	.word	0x08006c35
 8006bd4:	08006c3f 	.word	0x08006c3f
 8006bd8:	08006c2b 	.word	0x08006c2b
 8006bdc:	08006c3f 	.word	0x08006c3f
 8006be0:	08006bff 	.word	0x08006bff
 8006be4:	08006bf5 	.word	0x08006bf5
 8006be8:	08006c3f 	.word	0x08006c3f
 8006bec:	08006c17 	.word	0x08006c17
 8006bf0:	08006c09 	.word	0x08006c09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f9de 	bl	8006fb8 <USBD_GetDescriptor>
          break;
 8006bfc:	e024      	b.n	8006c48 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fb43 	bl	800728c <USBD_SetAddress>
          break;
 8006c06:	e01f      	b.n	8006c48 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fb82 	bl	8007314 <USBD_SetConfig>
 8006c10:	4603      	mov	r3, r0
 8006c12:	73fb      	strb	r3, [r7, #15]
          break;
 8006c14:	e018      	b.n	8006c48 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fc21 	bl	8007460 <USBD_GetConfig>
          break;
 8006c1e:	e013      	b.n	8006c48 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006c20:	6839      	ldr	r1, [r7, #0]
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fc52 	bl	80074cc <USBD_GetStatus>
          break;
 8006c28:	e00e      	b.n	8006c48 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006c2a:	6839      	ldr	r1, [r7, #0]
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fc81 	bl	8007534 <USBD_SetFeature>
          break;
 8006c32:	e009      	b.n	8006c48 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006c34:	6839      	ldr	r1, [r7, #0]
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fc90 	bl	800755c <USBD_ClrFeature>
          break;
 8006c3c:	e004      	b.n	8006c48 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fce7 	bl	8007614 <USBD_CtlError>
          break;
 8006c46:	bf00      	nop
      }
      break;
 8006c48:	e004      	b.n	8006c54 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006c4a:	6839      	ldr	r1, [r7, #0]
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 fce1 	bl	8007614 <USBD_CtlError>
      break;
 8006c52:	bf00      	nop
  }

  return ret;
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop

08006c60 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c76:	2b40      	cmp	r3, #64	; 0x40
 8006c78:	d005      	beq.n	8006c86 <USBD_StdItfReq+0x26>
 8006c7a:	2b40      	cmp	r3, #64	; 0x40
 8006c7c:	d82f      	bhi.n	8006cde <USBD_StdItfReq+0x7e>
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d001      	beq.n	8006c86 <USBD_StdItfReq+0x26>
 8006c82:	2b20      	cmp	r3, #32
 8006c84:	d12b      	bne.n	8006cde <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d81d      	bhi.n	8006cd0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	889b      	ldrh	r3, [r3, #4]
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d813      	bhi.n	8006cc6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	4798      	blx	r3
 8006cac:	4603      	mov	r3, r0
 8006cae:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	88db      	ldrh	r3, [r3, #6]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d110      	bne.n	8006cda <USBD_StdItfReq+0x7a>
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10d      	bne.n	8006cda <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fd73 	bl	80077aa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006cc4:	e009      	b.n	8006cda <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fca3 	bl	8007614 <USBD_CtlError>
          break;
 8006cce:	e004      	b.n	8006cda <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fc9e 	bl	8007614 <USBD_CtlError>
          break;
 8006cd8:	e000      	b.n	8006cdc <USBD_StdItfReq+0x7c>
          break;
 8006cda:	bf00      	nop
      }
      break;
 8006cdc:	e004      	b.n	8006ce8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fc97 	bl	8007614 <USBD_CtlError>
      break;
 8006ce6:	bf00      	nop
  }

  return ret;
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b084      	sub	sp, #16
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	889b      	ldrh	r3, [r3, #4]
 8006d04:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d0e:	2b40      	cmp	r3, #64	; 0x40
 8006d10:	d007      	beq.n	8006d22 <USBD_StdEPReq+0x30>
 8006d12:	2b40      	cmp	r3, #64	; 0x40
 8006d14:	f200 8145 	bhi.w	8006fa2 <USBD_StdEPReq+0x2b0>
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00c      	beq.n	8006d36 <USBD_StdEPReq+0x44>
 8006d1c:	2b20      	cmp	r3, #32
 8006d1e:	f040 8140 	bne.w	8006fa2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	4798      	blx	r3
 8006d30:	4603      	mov	r3, r0
 8006d32:	73fb      	strb	r3, [r7, #15]
      break;
 8006d34:	e13a      	b.n	8006fac <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	785b      	ldrb	r3, [r3, #1]
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	d007      	beq.n	8006d4e <USBD_StdEPReq+0x5c>
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	f300 8129 	bgt.w	8006f96 <USBD_StdEPReq+0x2a4>
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d07f      	beq.n	8006e48 <USBD_StdEPReq+0x156>
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d03c      	beq.n	8006dc6 <USBD_StdEPReq+0xd4>
 8006d4c:	e123      	b.n	8006f96 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d002      	beq.n	8006d60 <USBD_StdEPReq+0x6e>
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	d016      	beq.n	8006d8c <USBD_StdEPReq+0x9a>
 8006d5e:	e02c      	b.n	8006dba <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d60:	7bbb      	ldrb	r3, [r7, #14]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00d      	beq.n	8006d82 <USBD_StdEPReq+0x90>
 8006d66:	7bbb      	ldrb	r3, [r7, #14]
 8006d68:	2b80      	cmp	r3, #128	; 0x80
 8006d6a:	d00a      	beq.n	8006d82 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d6c:	7bbb      	ldrb	r3, [r7, #14]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f001 f947 	bl	8008004 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d76:	2180      	movs	r1, #128	; 0x80
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f001 f943 	bl	8008004 <USBD_LL_StallEP>
 8006d7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d80:	e020      	b.n	8006dc4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fc45 	bl	8007614 <USBD_CtlError>
              break;
 8006d8a:	e01b      	b.n	8006dc4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	885b      	ldrh	r3, [r3, #2]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10e      	bne.n	8006db2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d94:	7bbb      	ldrb	r3, [r7, #14]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00b      	beq.n	8006db2 <USBD_StdEPReq+0xc0>
 8006d9a:	7bbb      	ldrb	r3, [r7, #14]
 8006d9c:	2b80      	cmp	r3, #128	; 0x80
 8006d9e:	d008      	beq.n	8006db2 <USBD_StdEPReq+0xc0>
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	88db      	ldrh	r3, [r3, #6]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d104      	bne.n	8006db2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006da8:	7bbb      	ldrb	r3, [r7, #14]
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f001 f929 	bl	8008004 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fcf9 	bl	80077aa <USBD_CtlSendStatus>

              break;
 8006db8:	e004      	b.n	8006dc4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006dba:	6839      	ldr	r1, [r7, #0]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fc29 	bl	8007614 <USBD_CtlError>
              break;
 8006dc2:	bf00      	nop
          }
          break;
 8006dc4:	e0ec      	b.n	8006fa0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d002      	beq.n	8006dd8 <USBD_StdEPReq+0xe6>
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d016      	beq.n	8006e04 <USBD_StdEPReq+0x112>
 8006dd6:	e030      	b.n	8006e3a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dd8:	7bbb      	ldrb	r3, [r7, #14]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00d      	beq.n	8006dfa <USBD_StdEPReq+0x108>
 8006dde:	7bbb      	ldrb	r3, [r7, #14]
 8006de0:	2b80      	cmp	r3, #128	; 0x80
 8006de2:	d00a      	beq.n	8006dfa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006de4:	7bbb      	ldrb	r3, [r7, #14]
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 f90b 	bl	8008004 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dee:	2180      	movs	r1, #128	; 0x80
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f001 f907 	bl	8008004 <USBD_LL_StallEP>
 8006df6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006df8:	e025      	b.n	8006e46 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fc09 	bl	8007614 <USBD_CtlError>
              break;
 8006e02:	e020      	b.n	8006e46 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	885b      	ldrh	r3, [r3, #2]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d11b      	bne.n	8006e44 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e0c:	7bbb      	ldrb	r3, [r7, #14]
 8006e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d004      	beq.n	8006e20 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e16:	7bbb      	ldrb	r3, [r7, #14]
 8006e18:	4619      	mov	r1, r3
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f001 f911 	bl	8008042 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fcc2 	bl	80077aa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	4798      	blx	r3
 8006e34:	4603      	mov	r3, r0
 8006e36:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006e38:	e004      	b.n	8006e44 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fbe9 	bl	8007614 <USBD_CtlError>
              break;
 8006e42:	e000      	b.n	8006e46 <USBD_StdEPReq+0x154>
              break;
 8006e44:	bf00      	nop
          }
          break;
 8006e46:	e0ab      	b.n	8006fa0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d002      	beq.n	8006e5a <USBD_StdEPReq+0x168>
 8006e54:	2b03      	cmp	r3, #3
 8006e56:	d032      	beq.n	8006ebe <USBD_StdEPReq+0x1cc>
 8006e58:	e097      	b.n	8006f8a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e5a:	7bbb      	ldrb	r3, [r7, #14]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d007      	beq.n	8006e70 <USBD_StdEPReq+0x17e>
 8006e60:	7bbb      	ldrb	r3, [r7, #14]
 8006e62:	2b80      	cmp	r3, #128	; 0x80
 8006e64:	d004      	beq.n	8006e70 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006e66:	6839      	ldr	r1, [r7, #0]
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fbd3 	bl	8007614 <USBD_CtlError>
                break;
 8006e6e:	e091      	b.n	8006f94 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	da0b      	bge.n	8006e90 <USBD_StdEPReq+0x19e>
 8006e78:	7bbb      	ldrb	r3, [r7, #14]
 8006e7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e7e:	4613      	mov	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	3310      	adds	r3, #16
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	e00b      	b.n	8006ea8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e90:	7bbb      	ldrb	r3, [r7, #14]
 8006e92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e96:	4613      	mov	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2200      	movs	r2, #0
 8006eae:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fc1d 	bl	80076f6 <USBD_CtlSendData>
              break;
 8006ebc:	e06a      	b.n	8006f94 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ebe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	da11      	bge.n	8006eea <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ec6:	7bbb      	ldrb	r3, [r7, #14]
 8006ec8:	f003 020f 	and.w	r2, r3, #15
 8006ecc:	6879      	ldr	r1, [r7, #4]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4413      	add	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	440b      	add	r3, r1
 8006ed8:	3324      	adds	r3, #36	; 0x24
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d117      	bne.n	8006f10 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006ee0:	6839      	ldr	r1, [r7, #0]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fb96 	bl	8007614 <USBD_CtlError>
                  break;
 8006ee8:	e054      	b.n	8006f94 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006eea:	7bbb      	ldrb	r3, [r7, #14]
 8006eec:	f003 020f 	and.w	r2, r3, #15
 8006ef0:	6879      	ldr	r1, [r7, #4]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	440b      	add	r3, r1
 8006efc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d104      	bne.n	8006f10 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fb83 	bl	8007614 <USBD_CtlError>
                  break;
 8006f0e:	e041      	b.n	8006f94 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	da0b      	bge.n	8006f30 <USBD_StdEPReq+0x23e>
 8006f18:	7bbb      	ldrb	r3, [r7, #14]
 8006f1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f1e:	4613      	mov	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	3310      	adds	r3, #16
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	e00b      	b.n	8006f48 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f36:	4613      	mov	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	4413      	add	r3, r2
 8006f46:	3304      	adds	r3, #4
 8006f48:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f4a:	7bbb      	ldrb	r3, [r7, #14]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <USBD_StdEPReq+0x264>
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
 8006f52:	2b80      	cmp	r3, #128	; 0x80
 8006f54:	d103      	bne.n	8006f5e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	601a      	str	r2, [r3, #0]
 8006f5c:	e00e      	b.n	8006f7c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f5e:	7bbb      	ldrb	r3, [r7, #14]
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f001 f88c 	bl	8008080 <USBD_LL_IsStallEP>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2201      	movs	r2, #1
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	e002      	b.n	8006f7c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	4619      	mov	r1, r3
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fbb7 	bl	80076f6 <USBD_CtlSendData>
              break;
 8006f88:	e004      	b.n	8006f94 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006f8a:	6839      	ldr	r1, [r7, #0]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 fb41 	bl	8007614 <USBD_CtlError>
              break;
 8006f92:	bf00      	nop
          }
          break;
 8006f94:	e004      	b.n	8006fa0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006f96:	6839      	ldr	r1, [r7, #0]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fb3b 	bl	8007614 <USBD_CtlError>
          break;
 8006f9e:	bf00      	nop
      }
      break;
 8006fa0:	e004      	b.n	8006fac <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fb35 	bl	8007614 <USBD_CtlError>
      break;
 8006faa:	bf00      	nop
  }

  return ret;
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	885b      	ldrh	r3, [r3, #2]
 8006fd2:	0a1b      	lsrs	r3, r3, #8
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	2b06      	cmp	r3, #6
 8006fda:	f200 8128 	bhi.w	800722e <USBD_GetDescriptor+0x276>
 8006fde:	a201      	add	r2, pc, #4	; (adr r2, 8006fe4 <USBD_GetDescriptor+0x2c>)
 8006fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe4:	08007001 	.word	0x08007001
 8006fe8:	08007019 	.word	0x08007019
 8006fec:	08007059 	.word	0x08007059
 8006ff0:	0800722f 	.word	0x0800722f
 8006ff4:	0800722f 	.word	0x0800722f
 8006ff8:	080071cf 	.word	0x080071cf
 8006ffc:	080071fb 	.word	0x080071fb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	7c12      	ldrb	r2, [r2, #16]
 800700c:	f107 0108 	add.w	r1, r7, #8
 8007010:	4610      	mov	r0, r2
 8007012:	4798      	blx	r3
 8007014:	60f8      	str	r0, [r7, #12]
      break;
 8007016:	e112      	b.n	800723e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	7c1b      	ldrb	r3, [r3, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10d      	bne.n	800703c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007028:	f107 0208 	add.w	r2, r7, #8
 800702c:	4610      	mov	r0, r2
 800702e:	4798      	blx	r3
 8007030:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	3301      	adds	r3, #1
 8007036:	2202      	movs	r2, #2
 8007038:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800703a:	e100      	b.n	800723e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007044:	f107 0208 	add.w	r2, r7, #8
 8007048:	4610      	mov	r0, r2
 800704a:	4798      	blx	r3
 800704c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3301      	adds	r3, #1
 8007052:	2202      	movs	r2, #2
 8007054:	701a      	strb	r2, [r3, #0]
      break;
 8007056:	e0f2      	b.n	800723e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	885b      	ldrh	r3, [r3, #2]
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b05      	cmp	r3, #5
 8007060:	f200 80ac 	bhi.w	80071bc <USBD_GetDescriptor+0x204>
 8007064:	a201      	add	r2, pc, #4	; (adr r2, 800706c <USBD_GetDescriptor+0xb4>)
 8007066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706a:	bf00      	nop
 800706c:	08007085 	.word	0x08007085
 8007070:	080070b9 	.word	0x080070b9
 8007074:	080070ed 	.word	0x080070ed
 8007078:	08007121 	.word	0x08007121
 800707c:	08007155 	.word	0x08007155
 8007080:	08007189 	.word	0x08007189
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00b      	beq.n	80070a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	7c12      	ldrb	r2, [r2, #16]
 800709c:	f107 0108 	add.w	r1, r7, #8
 80070a0:	4610      	mov	r0, r2
 80070a2:	4798      	blx	r3
 80070a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070a6:	e091      	b.n	80071cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fab2 	bl	8007614 <USBD_CtlError>
            err++;
 80070b0:	7afb      	ldrb	r3, [r7, #11]
 80070b2:	3301      	adds	r3, #1
 80070b4:	72fb      	strb	r3, [r7, #11]
          break;
 80070b6:	e089      	b.n	80071cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00b      	beq.n	80070dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	7c12      	ldrb	r2, [r2, #16]
 80070d0:	f107 0108 	add.w	r1, r7, #8
 80070d4:	4610      	mov	r0, r2
 80070d6:	4798      	blx	r3
 80070d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070da:	e077      	b.n	80071cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fa98 	bl	8007614 <USBD_CtlError>
            err++;
 80070e4:	7afb      	ldrb	r3, [r7, #11]
 80070e6:	3301      	adds	r3, #1
 80070e8:	72fb      	strb	r3, [r7, #11]
          break;
 80070ea:	e06f      	b.n	80071cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00b      	beq.n	8007110 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	7c12      	ldrb	r2, [r2, #16]
 8007104:	f107 0108 	add.w	r1, r7, #8
 8007108:	4610      	mov	r0, r2
 800710a:	4798      	blx	r3
 800710c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800710e:	e05d      	b.n	80071cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007110:	6839      	ldr	r1, [r7, #0]
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fa7e 	bl	8007614 <USBD_CtlError>
            err++;
 8007118:	7afb      	ldrb	r3, [r7, #11]
 800711a:	3301      	adds	r3, #1
 800711c:	72fb      	strb	r3, [r7, #11]
          break;
 800711e:	e055      	b.n	80071cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00b      	beq.n	8007144 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	7c12      	ldrb	r2, [r2, #16]
 8007138:	f107 0108 	add.w	r1, r7, #8
 800713c:	4610      	mov	r0, r2
 800713e:	4798      	blx	r3
 8007140:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007142:	e043      	b.n	80071cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fa64 	bl	8007614 <USBD_CtlError>
            err++;
 800714c:	7afb      	ldrb	r3, [r7, #11]
 800714e:	3301      	adds	r3, #1
 8007150:	72fb      	strb	r3, [r7, #11]
          break;
 8007152:	e03b      	b.n	80071cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00b      	beq.n	8007178 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	7c12      	ldrb	r2, [r2, #16]
 800716c:	f107 0108 	add.w	r1, r7, #8
 8007170:	4610      	mov	r0, r2
 8007172:	4798      	blx	r3
 8007174:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007176:	e029      	b.n	80071cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fa4a 	bl	8007614 <USBD_CtlError>
            err++;
 8007180:	7afb      	ldrb	r3, [r7, #11]
 8007182:	3301      	adds	r3, #1
 8007184:	72fb      	strb	r3, [r7, #11]
          break;
 8007186:	e021      	b.n	80071cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00b      	beq.n	80071ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	7c12      	ldrb	r2, [r2, #16]
 80071a0:	f107 0108 	add.w	r1, r7, #8
 80071a4:	4610      	mov	r0, r2
 80071a6:	4798      	blx	r3
 80071a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071aa:	e00f      	b.n	80071cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071ac:	6839      	ldr	r1, [r7, #0]
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fa30 	bl	8007614 <USBD_CtlError>
            err++;
 80071b4:	7afb      	ldrb	r3, [r7, #11]
 80071b6:	3301      	adds	r3, #1
 80071b8:	72fb      	strb	r3, [r7, #11]
          break;
 80071ba:	e007      	b.n	80071cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fa28 	bl	8007614 <USBD_CtlError>
          err++;
 80071c4:	7afb      	ldrb	r3, [r7, #11]
 80071c6:	3301      	adds	r3, #1
 80071c8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80071ca:	bf00      	nop
      }
      break;
 80071cc:	e037      	b.n	800723e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	7c1b      	ldrb	r3, [r3, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d109      	bne.n	80071ea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071de:	f107 0208 	add.w	r2, r7, #8
 80071e2:	4610      	mov	r0, r2
 80071e4:	4798      	blx	r3
 80071e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071e8:	e029      	b.n	800723e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fa11 	bl	8007614 <USBD_CtlError>
        err++;
 80071f2:	7afb      	ldrb	r3, [r7, #11]
 80071f4:	3301      	adds	r3, #1
 80071f6:	72fb      	strb	r3, [r7, #11]
      break;
 80071f8:	e021      	b.n	800723e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	7c1b      	ldrb	r3, [r3, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10d      	bne.n	800721e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720a:	f107 0208 	add.w	r2, r7, #8
 800720e:	4610      	mov	r0, r2
 8007210:	4798      	blx	r3
 8007212:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	3301      	adds	r3, #1
 8007218:	2207      	movs	r2, #7
 800721a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800721c:	e00f      	b.n	800723e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f9f7 	bl	8007614 <USBD_CtlError>
        err++;
 8007226:	7afb      	ldrb	r3, [r7, #11]
 8007228:	3301      	adds	r3, #1
 800722a:	72fb      	strb	r3, [r7, #11]
      break;
 800722c:	e007      	b.n	800723e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f9ef 	bl	8007614 <USBD_CtlError>
      err++;
 8007236:	7afb      	ldrb	r3, [r7, #11]
 8007238:	3301      	adds	r3, #1
 800723a:	72fb      	strb	r3, [r7, #11]
      break;
 800723c:	bf00      	nop
  }

  if (err != 0U)
 800723e:	7afb      	ldrb	r3, [r7, #11]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d11e      	bne.n	8007282 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	88db      	ldrh	r3, [r3, #6]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d016      	beq.n	800727a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800724c:	893b      	ldrh	r3, [r7, #8]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00e      	beq.n	8007270 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	88da      	ldrh	r2, [r3, #6]
 8007256:	893b      	ldrh	r3, [r7, #8]
 8007258:	4293      	cmp	r3, r2
 800725a:	bf28      	it	cs
 800725c:	4613      	movcs	r3, r2
 800725e:	b29b      	uxth	r3, r3
 8007260:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007262:	893b      	ldrh	r3, [r7, #8]
 8007264:	461a      	mov	r2, r3
 8007266:	68f9      	ldr	r1, [r7, #12]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fa44 	bl	80076f6 <USBD_CtlSendData>
 800726e:	e009      	b.n	8007284 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f9ce 	bl	8007614 <USBD_CtlError>
 8007278:	e004      	b.n	8007284 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fa95 	bl	80077aa <USBD_CtlSendStatus>
 8007280:	e000      	b.n	8007284 <USBD_GetDescriptor+0x2cc>
    return;
 8007282:	bf00      	nop
  }
}
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop

0800728c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	889b      	ldrh	r3, [r3, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d131      	bne.n	8007302 <USBD_SetAddress+0x76>
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	88db      	ldrh	r3, [r3, #6]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d12d      	bne.n	8007302 <USBD_SetAddress+0x76>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	885b      	ldrh	r3, [r3, #2]
 80072aa:	2b7f      	cmp	r3, #127	; 0x7f
 80072ac:	d829      	bhi.n	8007302 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	885b      	ldrh	r3, [r3, #2]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d104      	bne.n	80072d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f9a3 	bl	8007614 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ce:	e01d      	b.n	800730c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	7bfa      	ldrb	r2, [r7, #15]
 80072d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fefb 	bl	80080d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fa61 	bl	80077aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d004      	beq.n	80072f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2202      	movs	r2, #2
 80072f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072f6:	e009      	b.n	800730c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007300:	e004      	b.n	800730c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f985 	bl	8007614 <USBD_CtlError>
  }
}
 800730a:	bf00      	nop
 800730c:	bf00      	nop
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	885b      	ldrh	r3, [r3, #2]
 8007326:	b2da      	uxtb	r2, r3
 8007328:	4b4c      	ldr	r3, [pc, #304]	; (800745c <USBD_SetConfig+0x148>)
 800732a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800732c:	4b4b      	ldr	r3, [pc, #300]	; (800745c <USBD_SetConfig+0x148>)
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d905      	bls.n	8007340 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f96c 	bl	8007614 <USBD_CtlError>
    return USBD_FAIL;
 800733c:	2303      	movs	r3, #3
 800733e:	e088      	b.n	8007452 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b02      	cmp	r3, #2
 800734a:	d002      	beq.n	8007352 <USBD_SetConfig+0x3e>
 800734c:	2b03      	cmp	r3, #3
 800734e:	d025      	beq.n	800739c <USBD_SetConfig+0x88>
 8007350:	e071      	b.n	8007436 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007352:	4b42      	ldr	r3, [pc, #264]	; (800745c <USBD_SetConfig+0x148>)
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d01c      	beq.n	8007394 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800735a:	4b40      	ldr	r3, [pc, #256]	; (800745c <USBD_SetConfig+0x148>)
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007364:	4b3d      	ldr	r3, [pc, #244]	; (800745c <USBD_SetConfig+0x148>)
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	4619      	mov	r1, r3
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7ff f948 	bl	8006600 <USBD_SetClassConfig>
 8007370:	4603      	mov	r3, r0
 8007372:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007374:	7bfb      	ldrb	r3, [r7, #15]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d004      	beq.n	8007384 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f949 	bl	8007614 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007382:	e065      	b.n	8007450 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fa10 	bl	80077aa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2203      	movs	r2, #3
 800738e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007392:	e05d      	b.n	8007450 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fa08 	bl	80077aa <USBD_CtlSendStatus>
      break;
 800739a:	e059      	b.n	8007450 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800739c:	4b2f      	ldr	r3, [pc, #188]	; (800745c <USBD_SetConfig+0x148>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d112      	bne.n	80073ca <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2202      	movs	r2, #2
 80073a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80073ac:	4b2b      	ldr	r3, [pc, #172]	; (800745c <USBD_SetConfig+0x148>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	461a      	mov	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073b6:	4b29      	ldr	r3, [pc, #164]	; (800745c <USBD_SetConfig+0x148>)
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f7ff f93b 	bl	8006638 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f9f1 	bl	80077aa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073c8:	e042      	b.n	8007450 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80073ca:	4b24      	ldr	r3, [pc, #144]	; (800745c <USBD_SetConfig+0x148>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d02a      	beq.n	800742e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff f929 	bl	8006638 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80073e6:	4b1d      	ldr	r3, [pc, #116]	; (800745c <USBD_SetConfig+0x148>)
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	461a      	mov	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073f0:	4b1a      	ldr	r3, [pc, #104]	; (800745c <USBD_SetConfig+0x148>)
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	4619      	mov	r1, r3
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7ff f902 	bl	8006600 <USBD_SetClassConfig>
 80073fc:	4603      	mov	r3, r0
 80073fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007400:	7bfb      	ldrb	r3, [r7, #15]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00f      	beq.n	8007426 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f903 	bl	8007614 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	b2db      	uxtb	r3, r3
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7ff f90e 	bl	8006638 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007424:	e014      	b.n	8007450 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f9bf 	bl	80077aa <USBD_CtlSendStatus>
      break;
 800742c:	e010      	b.n	8007450 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f9bb 	bl	80077aa <USBD_CtlSendStatus>
      break;
 8007434:	e00c      	b.n	8007450 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f8eb 	bl	8007614 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800743e:	4b07      	ldr	r3, [pc, #28]	; (800745c <USBD_SetConfig+0x148>)
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	4619      	mov	r1, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7ff f8f7 	bl	8006638 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800744a:	2303      	movs	r3, #3
 800744c:	73fb      	strb	r3, [r7, #15]
      break;
 800744e:	bf00      	nop
  }

  return ret;
 8007450:	7bfb      	ldrb	r3, [r7, #15]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	2000035c 	.word	0x2000035c

08007460 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	88db      	ldrh	r3, [r3, #6]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d004      	beq.n	800747c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f8cd 	bl	8007614 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800747a:	e023      	b.n	80074c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007482:	b2db      	uxtb	r3, r3
 8007484:	2b02      	cmp	r3, #2
 8007486:	dc02      	bgt.n	800748e <USBD_GetConfig+0x2e>
 8007488:	2b00      	cmp	r3, #0
 800748a:	dc03      	bgt.n	8007494 <USBD_GetConfig+0x34>
 800748c:	e015      	b.n	80074ba <USBD_GetConfig+0x5a>
 800748e:	2b03      	cmp	r3, #3
 8007490:	d00b      	beq.n	80074aa <USBD_GetConfig+0x4a>
 8007492:	e012      	b.n	80074ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	3308      	adds	r3, #8
 800749e:	2201      	movs	r2, #1
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f927 	bl	80076f6 <USBD_CtlSendData>
        break;
 80074a8:	e00c      	b.n	80074c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	3304      	adds	r3, #4
 80074ae:	2201      	movs	r2, #1
 80074b0:	4619      	mov	r1, r3
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f91f 	bl	80076f6 <USBD_CtlSendData>
        break;
 80074b8:	e004      	b.n	80074c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f8a9 	bl	8007614 <USBD_CtlError>
        break;
 80074c2:	bf00      	nop
}
 80074c4:	bf00      	nop
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	3b01      	subs	r3, #1
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d81e      	bhi.n	8007522 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	88db      	ldrh	r3, [r3, #6]
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d004      	beq.n	80074f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f890 	bl	8007614 <USBD_CtlError>
        break;
 80074f4:	e01a      	b.n	800752c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007502:	2b00      	cmp	r3, #0
 8007504:	d005      	beq.n	8007512 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	f043 0202 	orr.w	r2, r3, #2
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	330c      	adds	r3, #12
 8007516:	2202      	movs	r2, #2
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f8eb 	bl	80076f6 <USBD_CtlSendData>
      break;
 8007520:	e004      	b.n	800752c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f875 	bl	8007614 <USBD_CtlError>
      break;
 800752a:	bf00      	nop
  }
}
 800752c:	bf00      	nop
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	885b      	ldrh	r3, [r3, #2]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d106      	bne.n	8007554 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f92b 	bl	80077aa <USBD_CtlSendStatus>
  }
}
 8007554:	bf00      	nop
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800756c:	b2db      	uxtb	r3, r3
 800756e:	3b01      	subs	r3, #1
 8007570:	2b02      	cmp	r3, #2
 8007572:	d80b      	bhi.n	800758c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	885b      	ldrh	r3, [r3, #2]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d10c      	bne.n	8007596 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f910 	bl	80077aa <USBD_CtlSendStatus>
      }
      break;
 800758a:	e004      	b.n	8007596 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 f840 	bl	8007614 <USBD_CtlError>
      break;
 8007594:	e000      	b.n	8007598 <USBD_ClrFeature+0x3c>
      break;
 8007596:	bf00      	nop
  }
}
 8007598:	bf00      	nop
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	781a      	ldrb	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	3301      	adds	r3, #1
 80075ba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	781a      	ldrb	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	3301      	adds	r3, #1
 80075c8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f7ff fabb 	bl	8006b46 <SWAPBYTE>
 80075d0:	4603      	mov	r3, r0
 80075d2:	461a      	mov	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	3301      	adds	r3, #1
 80075dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3301      	adds	r3, #1
 80075e2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f7ff faae 	bl	8006b46 <SWAPBYTE>
 80075ea:	4603      	mov	r3, r0
 80075ec:	461a      	mov	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	3301      	adds	r3, #1
 80075f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	3301      	adds	r3, #1
 80075fc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f7ff faa1 	bl	8006b46 <SWAPBYTE>
 8007604:	4603      	mov	r3, r0
 8007606:	461a      	mov	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	80da      	strh	r2, [r3, #6]
}
 800760c:	bf00      	nop
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800761e:	2180      	movs	r1, #128	; 0x80
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fcef 	bl	8008004 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007626:	2100      	movs	r1, #0
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fceb 	bl	8008004 <USBD_LL_StallEP>
}
 800762e:	bf00      	nop
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b086      	sub	sp, #24
 800763a:	af00      	add	r7, sp, #0
 800763c:	60f8      	str	r0, [r7, #12]
 800763e:	60b9      	str	r1, [r7, #8]
 8007640:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007642:	2300      	movs	r3, #0
 8007644:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d036      	beq.n	80076ba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007650:	6938      	ldr	r0, [r7, #16]
 8007652:	f000 f836 	bl	80076c2 <USBD_GetLen>
 8007656:	4603      	mov	r3, r0
 8007658:	3301      	adds	r3, #1
 800765a:	b29b      	uxth	r3, r3
 800765c:	005b      	lsls	r3, r3, #1
 800765e:	b29a      	uxth	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007664:	7dfb      	ldrb	r3, [r7, #23]
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	4413      	add	r3, r2
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	7812      	ldrb	r2, [r2, #0]
 800766e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007670:	7dfb      	ldrb	r3, [r7, #23]
 8007672:	3301      	adds	r3, #1
 8007674:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007676:	7dfb      	ldrb	r3, [r7, #23]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	4413      	add	r3, r2
 800767c:	2203      	movs	r2, #3
 800767e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007680:	7dfb      	ldrb	r3, [r7, #23]
 8007682:	3301      	adds	r3, #1
 8007684:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007686:	e013      	b.n	80076b0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007688:	7dfb      	ldrb	r3, [r7, #23]
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	4413      	add	r3, r2
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	7812      	ldrb	r2, [r2, #0]
 8007692:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	3301      	adds	r3, #1
 8007698:	613b      	str	r3, [r7, #16]
    idx++;
 800769a:	7dfb      	ldrb	r3, [r7, #23]
 800769c:	3301      	adds	r3, #1
 800769e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80076a0:	7dfb      	ldrb	r3, [r7, #23]
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	4413      	add	r3, r2
 80076a6:	2200      	movs	r2, #0
 80076a8:	701a      	strb	r2, [r3, #0]
    idx++;
 80076aa:	7dfb      	ldrb	r3, [r7, #23]
 80076ac:	3301      	adds	r3, #1
 80076ae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1e7      	bne.n	8007688 <USBD_GetString+0x52>
 80076b8:	e000      	b.n	80076bc <USBD_GetString+0x86>
    return;
 80076ba:	bf00      	nop
  }
}
 80076bc:	3718      	adds	r7, #24
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b085      	sub	sp, #20
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80076d2:	e005      	b.n	80076e0 <USBD_GetLen+0x1e>
  {
    len++;
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
 80076d6:	3301      	adds	r3, #1
 80076d8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	3301      	adds	r3, #1
 80076de:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1f5      	bne.n	80076d4 <USBD_GetLen+0x12>
  }

  return len;
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	60f8      	str	r0, [r7, #12]
 80076fe:	60b9      	str	r1, [r7, #8]
 8007700:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2202      	movs	r2, #2
 8007706:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	2100      	movs	r1, #0
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f000 fcfa 	bl	8008116 <USBD_LL_Transmit>

  return USBD_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	2100      	movs	r1, #0
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 fce9 	bl	8008116 <USBD_LL_Transmit>

  return USBD_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b084      	sub	sp, #16
 8007752:	af00      	add	r7, sp, #0
 8007754:	60f8      	str	r0, [r7, #12]
 8007756:	60b9      	str	r1, [r7, #8]
 8007758:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2203      	movs	r2, #3
 800775e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	2100      	movs	r1, #0
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 fced 	bl	8008158 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	2100      	movs	r1, #0
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 fcdc 	bl	8008158 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b082      	sub	sp, #8
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2204      	movs	r2, #4
 80077b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80077ba:	2300      	movs	r3, #0
 80077bc:	2200      	movs	r2, #0
 80077be:	2100      	movs	r1, #0
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fca8 	bl	8008116 <USBD_LL_Transmit>

  return USBD_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2205      	movs	r2, #5
 80077dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077e0:	2300      	movs	r3, #0
 80077e2:	2200      	movs	r2, #0
 80077e4:	2100      	movs	r1, #0
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fcb6 	bl	8008158 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
	...

080077f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80077fc:	2200      	movs	r2, #0
 80077fe:	4912      	ldr	r1, [pc, #72]	; (8007848 <MX_USB_DEVICE_Init+0x50>)
 8007800:	4812      	ldr	r0, [pc, #72]	; (800784c <MX_USB_DEVICE_Init+0x54>)
 8007802:	f7fe fe8f 	bl	8006524 <USBD_Init>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d001      	beq.n	8007810 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800780c:	f7f9 fc90 	bl	8001130 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007810:	490f      	ldr	r1, [pc, #60]	; (8007850 <MX_USB_DEVICE_Init+0x58>)
 8007812:	480e      	ldr	r0, [pc, #56]	; (800784c <MX_USB_DEVICE_Init+0x54>)
 8007814:	f7fe feb6 	bl	8006584 <USBD_RegisterClass>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800781e:	f7f9 fc87 	bl	8001130 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007822:	490c      	ldr	r1, [pc, #48]	; (8007854 <MX_USB_DEVICE_Init+0x5c>)
 8007824:	4809      	ldr	r0, [pc, #36]	; (800784c <MX_USB_DEVICE_Init+0x54>)
 8007826:	f7fe fdd7 	bl	80063d8 <USBD_CDC_RegisterInterface>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007830:	f7f9 fc7e 	bl	8001130 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007834:	4805      	ldr	r0, [pc, #20]	; (800784c <MX_USB_DEVICE_Init+0x54>)
 8007836:	f7fe fecc 	bl	80065d2 <USBD_Start>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d001      	beq.n	8007844 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007840:	f7f9 fc76 	bl	8001130 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007844:	bf00      	nop
 8007846:	bd80      	pop	{r7, pc}
 8007848:	200001d4 	.word	0x200001d4
 800784c:	20000cec 	.word	0x20000cec
 8007850:	200000bc 	.word	0x200000bc
 8007854:	200001c0 	.word	0x200001c0

08007858 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800785c:	2200      	movs	r2, #0
 800785e:	4905      	ldr	r1, [pc, #20]	; (8007874 <CDC_Init_FS+0x1c>)
 8007860:	4805      	ldr	r0, [pc, #20]	; (8007878 <CDC_Init_FS+0x20>)
 8007862:	f7fe fdce 	bl	8006402 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007866:	4905      	ldr	r1, [pc, #20]	; (800787c <CDC_Init_FS+0x24>)
 8007868:	4803      	ldr	r0, [pc, #12]	; (8007878 <CDC_Init_FS+0x20>)
 800786a:	f7fe fde8 	bl	800643e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800786e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007870:	4618      	mov	r0, r3
 8007872:	bd80      	pop	{r7, pc}
 8007874:	200017bc 	.word	0x200017bc
 8007878:	20000cec 	.word	0x20000cec
 800787c:	20000fbc 	.word	0x20000fbc

08007880 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007880:	b480      	push	{r7}
 8007882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007884:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007886:	4618      	mov	r0, r3
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	6039      	str	r1, [r7, #0]
 800789a:	71fb      	strb	r3, [r7, #7]
 800789c:	4613      	mov	r3, r2
 800789e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80078a0:	79fb      	ldrb	r3, [r7, #7]
 80078a2:	2b23      	cmp	r3, #35	; 0x23
 80078a4:	d84a      	bhi.n	800793c <CDC_Control_FS+0xac>
 80078a6:	a201      	add	r2, pc, #4	; (adr r2, 80078ac <CDC_Control_FS+0x1c>)
 80078a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ac:	0800793d 	.word	0x0800793d
 80078b0:	0800793d 	.word	0x0800793d
 80078b4:	0800793d 	.word	0x0800793d
 80078b8:	0800793d 	.word	0x0800793d
 80078bc:	0800793d 	.word	0x0800793d
 80078c0:	0800793d 	.word	0x0800793d
 80078c4:	0800793d 	.word	0x0800793d
 80078c8:	0800793d 	.word	0x0800793d
 80078cc:	0800793d 	.word	0x0800793d
 80078d0:	0800793d 	.word	0x0800793d
 80078d4:	0800793d 	.word	0x0800793d
 80078d8:	0800793d 	.word	0x0800793d
 80078dc:	0800793d 	.word	0x0800793d
 80078e0:	0800793d 	.word	0x0800793d
 80078e4:	0800793d 	.word	0x0800793d
 80078e8:	0800793d 	.word	0x0800793d
 80078ec:	0800793d 	.word	0x0800793d
 80078f0:	0800793d 	.word	0x0800793d
 80078f4:	0800793d 	.word	0x0800793d
 80078f8:	0800793d 	.word	0x0800793d
 80078fc:	0800793d 	.word	0x0800793d
 8007900:	0800793d 	.word	0x0800793d
 8007904:	0800793d 	.word	0x0800793d
 8007908:	0800793d 	.word	0x0800793d
 800790c:	0800793d 	.word	0x0800793d
 8007910:	0800793d 	.word	0x0800793d
 8007914:	0800793d 	.word	0x0800793d
 8007918:	0800793d 	.word	0x0800793d
 800791c:	0800793d 	.word	0x0800793d
 8007920:	0800793d 	.word	0x0800793d
 8007924:	0800793d 	.word	0x0800793d
 8007928:	0800793d 	.word	0x0800793d
 800792c:	0800793d 	.word	0x0800793d
 8007930:	0800793d 	.word	0x0800793d
 8007934:	0800793d 	.word	0x0800793d
 8007938:	0800793d 	.word	0x0800793d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800793c:	bf00      	nop
  }

  return (USBD_OK);
 800793e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007940:	4618      	mov	r0, r3
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007956:	6879      	ldr	r1, [r7, #4]
 8007958:	4805      	ldr	r0, [pc, #20]	; (8007970 <CDC_Receive_FS+0x24>)
 800795a:	f7fe fd70 	bl	800643e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800795e:	4804      	ldr	r0, [pc, #16]	; (8007970 <CDC_Receive_FS+0x24>)
 8007960:	f7fe fdb6 	bl	80064d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007964:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	20000cec 	.word	0x20000cec

08007974 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	460b      	mov	r3, r1
 800797e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007984:	4b0d      	ldr	r3, [pc, #52]	; (80079bc <CDC_Transmit_FS+0x48>)
 8007986:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800798a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007996:	2301      	movs	r3, #1
 8007998:	e00b      	b.n	80079b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800799a:	887b      	ldrh	r3, [r7, #2]
 800799c:	461a      	mov	r2, r3
 800799e:	6879      	ldr	r1, [r7, #4]
 80079a0:	4806      	ldr	r0, [pc, #24]	; (80079bc <CDC_Transmit_FS+0x48>)
 80079a2:	f7fe fd2e 	bl	8006402 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80079a6:	4805      	ldr	r0, [pc, #20]	; (80079bc <CDC_Transmit_FS+0x48>)
 80079a8:	f7fe fd62 	bl	8006470 <USBD_CDC_TransmitPacket>
 80079ac:	4603      	mov	r3, r0
 80079ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	20000cec 	.word	0x20000cec

080079c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	4613      	mov	r3, r2
 80079cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80079d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	371c      	adds	r7, #28
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
	...

080079e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	4603      	mov	r3, r0
 80079ec:	6039      	str	r1, [r7, #0]
 80079ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2212      	movs	r2, #18
 80079f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80079f6:	4b03      	ldr	r3, [pc, #12]	; (8007a04 <USBD_FS_DeviceDescriptor+0x20>)
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	200001f0 	.word	0x200001f0

08007a08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	4603      	mov	r3, r0
 8007a10:	6039      	str	r1, [r7, #0]
 8007a12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2204      	movs	r2, #4
 8007a18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a1a:	4b03      	ldr	r3, [pc, #12]	; (8007a28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	20000204 	.word	0x20000204

08007a2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	4603      	mov	r3, r0
 8007a34:	6039      	str	r1, [r7, #0]
 8007a36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a38:	79fb      	ldrb	r3, [r7, #7]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d105      	bne.n	8007a4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	4907      	ldr	r1, [pc, #28]	; (8007a60 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a42:	4808      	ldr	r0, [pc, #32]	; (8007a64 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a44:	f7ff fdf7 	bl	8007636 <USBD_GetString>
 8007a48:	e004      	b.n	8007a54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	4904      	ldr	r1, [pc, #16]	; (8007a60 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a4e:	4805      	ldr	r0, [pc, #20]	; (8007a64 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a50:	f7ff fdf1 	bl	8007636 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a54:	4b02      	ldr	r3, [pc, #8]	; (8007a60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	20001fbc 	.word	0x20001fbc
 8007a64:	08008bdc 	.word	0x08008bdc

08007a68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	6039      	str	r1, [r7, #0]
 8007a72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	4904      	ldr	r1, [pc, #16]	; (8007a88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007a78:	4804      	ldr	r0, [pc, #16]	; (8007a8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007a7a:	f7ff fddc 	bl	8007636 <USBD_GetString>
  return USBD_StrDesc;
 8007a7e:	4b02      	ldr	r3, [pc, #8]	; (8007a88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	20001fbc 	.word	0x20001fbc
 8007a8c:	08008bf4 	.word	0x08008bf4

08007a90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	4603      	mov	r3, r0
 8007a98:	6039      	str	r1, [r7, #0]
 8007a9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	221a      	movs	r2, #26
 8007aa0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007aa2:	f000 f843 	bl	8007b2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007aa6:	4b02      	ldr	r3, [pc, #8]	; (8007ab0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	20000208 	.word	0x20000208

08007ab4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	4603      	mov	r3, r0
 8007abc:	6039      	str	r1, [r7, #0]
 8007abe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ac0:	79fb      	ldrb	r3, [r7, #7]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d105      	bne.n	8007ad2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	4907      	ldr	r1, [pc, #28]	; (8007ae8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007aca:	4808      	ldr	r0, [pc, #32]	; (8007aec <USBD_FS_ConfigStrDescriptor+0x38>)
 8007acc:	f7ff fdb3 	bl	8007636 <USBD_GetString>
 8007ad0:	e004      	b.n	8007adc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	4904      	ldr	r1, [pc, #16]	; (8007ae8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ad6:	4805      	ldr	r0, [pc, #20]	; (8007aec <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ad8:	f7ff fdad 	bl	8007636 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007adc:	4b02      	ldr	r3, [pc, #8]	; (8007ae8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20001fbc 	.word	0x20001fbc
 8007aec:	08008c08 	.word	0x08008c08

08007af0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	6039      	str	r1, [r7, #0]
 8007afa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007afc:	79fb      	ldrb	r3, [r7, #7]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d105      	bne.n	8007b0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	4907      	ldr	r1, [pc, #28]	; (8007b24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b06:	4808      	ldr	r0, [pc, #32]	; (8007b28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b08:	f7ff fd95 	bl	8007636 <USBD_GetString>
 8007b0c:	e004      	b.n	8007b18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	4904      	ldr	r1, [pc, #16]	; (8007b24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b12:	4805      	ldr	r0, [pc, #20]	; (8007b28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b14:	f7ff fd8f 	bl	8007636 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b18:	4b02      	ldr	r3, [pc, #8]	; (8007b24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	20001fbc 	.word	0x20001fbc
 8007b28:	08008c14 	.word	0x08008c14

08007b2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b32:	4b0f      	ldr	r3, [pc, #60]	; (8007b70 <Get_SerialNum+0x44>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b38:	4b0e      	ldr	r3, [pc, #56]	; (8007b74 <Get_SerialNum+0x48>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b3e:	4b0e      	ldr	r3, [pc, #56]	; (8007b78 <Get_SerialNum+0x4c>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4413      	add	r3, r2
 8007b4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d009      	beq.n	8007b66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b52:	2208      	movs	r2, #8
 8007b54:	4909      	ldr	r1, [pc, #36]	; (8007b7c <Get_SerialNum+0x50>)
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f000 f814 	bl	8007b84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b5c:	2204      	movs	r2, #4
 8007b5e:	4908      	ldr	r1, [pc, #32]	; (8007b80 <Get_SerialNum+0x54>)
 8007b60:	68b8      	ldr	r0, [r7, #8]
 8007b62:	f000 f80f 	bl	8007b84 <IntToUnicode>
  }
}
 8007b66:	bf00      	nop
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	1fff7a10 	.word	0x1fff7a10
 8007b74:	1fff7a14 	.word	0x1fff7a14
 8007b78:	1fff7a18 	.word	0x1fff7a18
 8007b7c:	2000020a 	.word	0x2000020a
 8007b80:	2000021a 	.word	0x2000021a

08007b84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b087      	sub	sp, #28
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007b92:	2300      	movs	r3, #0
 8007b94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007b96:	2300      	movs	r3, #0
 8007b98:	75fb      	strb	r3, [r7, #23]
 8007b9a:	e027      	b.n	8007bec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	0f1b      	lsrs	r3, r3, #28
 8007ba0:	2b09      	cmp	r3, #9
 8007ba2:	d80b      	bhi.n	8007bbc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	0f1b      	lsrs	r3, r3, #28
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	7dfb      	ldrb	r3, [r7, #23]
 8007bac:	005b      	lsls	r3, r3, #1
 8007bae:	4619      	mov	r1, r3
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	440b      	add	r3, r1
 8007bb4:	3230      	adds	r2, #48	; 0x30
 8007bb6:	b2d2      	uxtb	r2, r2
 8007bb8:	701a      	strb	r2, [r3, #0]
 8007bba:	e00a      	b.n	8007bd2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	0f1b      	lsrs	r3, r3, #28
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	7dfb      	ldrb	r3, [r7, #23]
 8007bc4:	005b      	lsls	r3, r3, #1
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	440b      	add	r3, r1
 8007bcc:	3237      	adds	r2, #55	; 0x37
 8007bce:	b2d2      	uxtb	r2, r2
 8007bd0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	011b      	lsls	r3, r3, #4
 8007bd6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007bd8:	7dfb      	ldrb	r3, [r7, #23]
 8007bda:	005b      	lsls	r3, r3, #1
 8007bdc:	3301      	adds	r3, #1
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	4413      	add	r3, r2
 8007be2:	2200      	movs	r2, #0
 8007be4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007be6:	7dfb      	ldrb	r3, [r7, #23]
 8007be8:	3301      	adds	r3, #1
 8007bea:	75fb      	strb	r3, [r7, #23]
 8007bec:	7dfa      	ldrb	r2, [r7, #23]
 8007bee:	79fb      	ldrb	r3, [r7, #7]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d3d3      	bcc.n	8007b9c <IntToUnicode+0x18>
  }
}
 8007bf4:	bf00      	nop
 8007bf6:	bf00      	nop
 8007bf8:	371c      	adds	r7, #28
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
	...

08007c04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b08a      	sub	sp, #40	; 0x28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c0c:	f107 0314 	add.w	r3, r7, #20
 8007c10:	2200      	movs	r2, #0
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	605a      	str	r2, [r3, #4]
 8007c16:	609a      	str	r2, [r3, #8]
 8007c18:	60da      	str	r2, [r3, #12]
 8007c1a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c24:	d147      	bne.n	8007cb6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c26:	2300      	movs	r3, #0
 8007c28:	613b      	str	r3, [r7, #16]
 8007c2a:	4b25      	ldr	r3, [pc, #148]	; (8007cc0 <HAL_PCD_MspInit+0xbc>)
 8007c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2e:	4a24      	ldr	r2, [pc, #144]	; (8007cc0 <HAL_PCD_MspInit+0xbc>)
 8007c30:	f043 0301 	orr.w	r3, r3, #1
 8007c34:	6313      	str	r3, [r2, #48]	; 0x30
 8007c36:	4b22      	ldr	r3, [pc, #136]	; (8007cc0 <HAL_PCD_MspInit+0xbc>)
 8007c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	613b      	str	r3, [r7, #16]
 8007c40:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007c42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007c50:	f107 0314 	add.w	r3, r7, #20
 8007c54:	4619      	mov	r1, r3
 8007c56:	481b      	ldr	r0, [pc, #108]	; (8007cc4 <HAL_PCD_MspInit+0xc0>)
 8007c58:	f7fa fc1a 	bl	8002490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007c5c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c62:	2302      	movs	r3, #2
 8007c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c66:	2300      	movs	r3, #0
 8007c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007c6e:	230a      	movs	r3, #10
 8007c70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c72:	f107 0314 	add.w	r3, r7, #20
 8007c76:	4619      	mov	r1, r3
 8007c78:	4812      	ldr	r0, [pc, #72]	; (8007cc4 <HAL_PCD_MspInit+0xc0>)
 8007c7a:	f7fa fc09 	bl	8002490 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007c7e:	4b10      	ldr	r3, [pc, #64]	; (8007cc0 <HAL_PCD_MspInit+0xbc>)
 8007c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c82:	4a0f      	ldr	r2, [pc, #60]	; (8007cc0 <HAL_PCD_MspInit+0xbc>)
 8007c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c88:	6353      	str	r3, [r2, #52]	; 0x34
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	60fb      	str	r3, [r7, #12]
 8007c8e:	4b0c      	ldr	r3, [pc, #48]	; (8007cc0 <HAL_PCD_MspInit+0xbc>)
 8007c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c92:	4a0b      	ldr	r2, [pc, #44]	; (8007cc0 <HAL_PCD_MspInit+0xbc>)
 8007c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c98:	6453      	str	r3, [r2, #68]	; 0x44
 8007c9a:	4b09      	ldr	r3, [pc, #36]	; (8007cc0 <HAL_PCD_MspInit+0xbc>)
 8007c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ca2:	60fb      	str	r3, [r7, #12]
 8007ca4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2100      	movs	r1, #0
 8007caa:	2043      	movs	r0, #67	; 0x43
 8007cac:	f7fa fbb9 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007cb0:	2043      	movs	r0, #67	; 0x43
 8007cb2:	f7fa fbd2 	bl	800245a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007cb6:	bf00      	nop
 8007cb8:	3728      	adds	r7, #40	; 0x28
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	40023800 	.word	0x40023800
 8007cc4:	40020000 	.word	0x40020000

08007cc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007cdc:	4619      	mov	r1, r3
 8007cde:	4610      	mov	r0, r2
 8007ce0:	f7fe fcc2 	bl	8006668 <USBD_LL_SetupStage>
}
 8007ce4:	bf00      	nop
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007cfe:	78fa      	ldrb	r2, [r7, #3]
 8007d00:	6879      	ldr	r1, [r7, #4]
 8007d02:	4613      	mov	r3, r2
 8007d04:	00db      	lsls	r3, r3, #3
 8007d06:	1a9b      	subs	r3, r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	440b      	add	r3, r1
 8007d0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	78fb      	ldrb	r3, [r7, #3]
 8007d14:	4619      	mov	r1, r3
 8007d16:	f7fe fcfc 	bl	8006712 <USBD_LL_DataOutStage>
}
 8007d1a:	bf00      	nop
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b082      	sub	sp, #8
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007d34:	78fa      	ldrb	r2, [r7, #3]
 8007d36:	6879      	ldr	r1, [r7, #4]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	00db      	lsls	r3, r3, #3
 8007d3c:	1a9b      	subs	r3, r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	440b      	add	r3, r1
 8007d42:	3348      	adds	r3, #72	; 0x48
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	78fb      	ldrb	r3, [r7, #3]
 8007d48:	4619      	mov	r1, r3
 8007d4a:	f7fe fd45 	bl	80067d8 <USBD_LL_DataInStage>
}
 8007d4e:	bf00      	nop
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b082      	sub	sp, #8
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7fe fe59 	bl	8006a1c <USBD_LL_SOF>
}
 8007d6a:	bf00      	nop
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b084      	sub	sp, #16
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d102      	bne.n	8007d8c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007d86:	2300      	movs	r3, #0
 8007d88:	73fb      	strb	r3, [r7, #15]
 8007d8a:	e008      	b.n	8007d9e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d102      	bne.n	8007d9a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007d94:	2301      	movs	r3, #1
 8007d96:	73fb      	strb	r3, [r7, #15]
 8007d98:	e001      	b.n	8007d9e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007d9a:	f7f9 f9c9 	bl	8001130 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007da4:	7bfa      	ldrb	r2, [r7, #15]
 8007da6:	4611      	mov	r1, r2
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fe fdf9 	bl	80069a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fe fda5 	bl	8006904 <USBD_LL_Reset>
}
 8007dba:	bf00      	nop
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
	...

08007dc4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fe fdf4 	bl	80069c0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	6812      	ldr	r2, [r2, #0]
 8007de6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007dea:	f043 0301 	orr.w	r3, r3, #1
 8007dee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d005      	beq.n	8007e04 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007df8:	4b04      	ldr	r3, [pc, #16]	; (8007e0c <HAL_PCD_SuspendCallback+0x48>)
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	4a03      	ldr	r2, [pc, #12]	; (8007e0c <HAL_PCD_SuspendCallback+0x48>)
 8007dfe:	f043 0306 	orr.w	r3, r3, #6
 8007e02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e04:	bf00      	nop
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	e000ed00 	.word	0xe000ed00

08007e10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fe fde4 	bl	80069ec <USBD_LL_Resume>
}
 8007e24:	bf00      	nop
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	460b      	mov	r3, r1
 8007e36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e3e:	78fa      	ldrb	r2, [r7, #3]
 8007e40:	4611      	mov	r1, r2
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fe fe32 	bl	8006aac <USBD_LL_IsoOUTIncomplete>
}
 8007e48:	bf00      	nop
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e62:	78fa      	ldrb	r2, [r7, #3]
 8007e64:	4611      	mov	r1, r2
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fe fdfa 	bl	8006a60 <USBD_LL_IsoINIncomplete>
}
 8007e6c:	bf00      	nop
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fe fe38 	bl	8006af8 <USBD_LL_DevConnected>
}
 8007e88:	bf00      	nop
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7fe fe35 	bl	8006b0e <USBD_LL_DevDisconnected>
}
 8007ea4:	bf00      	nop
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d13c      	bne.n	8007f36 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007ebc:	4a20      	ldr	r2, [pc, #128]	; (8007f40 <USBD_LL_Init+0x94>)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a1e      	ldr	r2, [pc, #120]	; (8007f40 <USBD_LL_Init+0x94>)
 8007ec8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ecc:	4b1c      	ldr	r3, [pc, #112]	; (8007f40 <USBD_LL_Init+0x94>)
 8007ece:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007ed2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007ed4:	4b1a      	ldr	r3, [pc, #104]	; (8007f40 <USBD_LL_Init+0x94>)
 8007ed6:	2204      	movs	r2, #4
 8007ed8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007eda:	4b19      	ldr	r3, [pc, #100]	; (8007f40 <USBD_LL_Init+0x94>)
 8007edc:	2202      	movs	r2, #2
 8007ede:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ee0:	4b17      	ldr	r3, [pc, #92]	; (8007f40 <USBD_LL_Init+0x94>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007ee6:	4b16      	ldr	r3, [pc, #88]	; (8007f40 <USBD_LL_Init+0x94>)
 8007ee8:	2202      	movs	r2, #2
 8007eea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007eec:	4b14      	ldr	r3, [pc, #80]	; (8007f40 <USBD_LL_Init+0x94>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007ef2:	4b13      	ldr	r3, [pc, #76]	; (8007f40 <USBD_LL_Init+0x94>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007ef8:	4b11      	ldr	r3, [pc, #68]	; (8007f40 <USBD_LL_Init+0x94>)
 8007efa:	2200      	movs	r2, #0
 8007efc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007efe:	4b10      	ldr	r3, [pc, #64]	; (8007f40 <USBD_LL_Init+0x94>)
 8007f00:	2201      	movs	r2, #1
 8007f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007f04:	4b0e      	ldr	r3, [pc, #56]	; (8007f40 <USBD_LL_Init+0x94>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007f0a:	480d      	ldr	r0, [pc, #52]	; (8007f40 <USBD_LL_Init+0x94>)
 8007f0c:	f7fa fdd4 	bl	8002ab8 <HAL_PCD_Init>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d001      	beq.n	8007f1a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007f16:	f7f9 f90b 	bl	8001130 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007f1a:	2180      	movs	r1, #128	; 0x80
 8007f1c:	4808      	ldr	r0, [pc, #32]	; (8007f40 <USBD_LL_Init+0x94>)
 8007f1e:	f7fb ff32 	bl	8003d86 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007f22:	2240      	movs	r2, #64	; 0x40
 8007f24:	2100      	movs	r1, #0
 8007f26:	4806      	ldr	r0, [pc, #24]	; (8007f40 <USBD_LL_Init+0x94>)
 8007f28:	f7fb fee6 	bl	8003cf8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007f2c:	2280      	movs	r2, #128	; 0x80
 8007f2e:	2101      	movs	r1, #1
 8007f30:	4803      	ldr	r0, [pc, #12]	; (8007f40 <USBD_LL_Init+0x94>)
 8007f32:	f7fb fee1 	bl	8003cf8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	200021bc 	.word	0x200021bc

08007f44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fa fec9 	bl	8002cf2 <HAL_PCD_Start>
 8007f60:	4603      	mov	r3, r0
 8007f62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
 8007f66:	4618      	mov	r0, r3
 8007f68:	f000 f942 	bl	80081f0 <USBD_Get_USB_Status>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f70:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b084      	sub	sp, #16
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	4608      	mov	r0, r1
 8007f84:	4611      	mov	r1, r2
 8007f86:	461a      	mov	r2, r3
 8007f88:	4603      	mov	r3, r0
 8007f8a:	70fb      	strb	r3, [r7, #3]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	70bb      	strb	r3, [r7, #2]
 8007f90:	4613      	mov	r3, r2
 8007f92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007fa2:	78bb      	ldrb	r3, [r7, #2]
 8007fa4:	883a      	ldrh	r2, [r7, #0]
 8007fa6:	78f9      	ldrb	r1, [r7, #3]
 8007fa8:	f7fb faad 	bl	8003506 <HAL_PCD_EP_Open>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 f91c 	bl	80081f0 <USBD_Get_USB_Status>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b084      	sub	sp, #16
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	460b      	mov	r3, r1
 8007fd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fe0:	78fa      	ldrb	r2, [r7, #3]
 8007fe2:	4611      	mov	r1, r2
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7fb faf6 	bl	80035d6 <HAL_PCD_EP_Close>
 8007fea:	4603      	mov	r3, r0
 8007fec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f000 f8fd 	bl	80081f0 <USBD_Get_USB_Status>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008010:	2300      	movs	r3, #0
 8008012:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800801e:	78fa      	ldrb	r2, [r7, #3]
 8008020:	4611      	mov	r1, r2
 8008022:	4618      	mov	r0, r3
 8008024:	f7fb fbce 	bl	80037c4 <HAL_PCD_EP_SetStall>
 8008028:	4603      	mov	r3, r0
 800802a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800802c:	7bfb      	ldrb	r3, [r7, #15]
 800802e:	4618      	mov	r0, r3
 8008030:	f000 f8de 	bl	80081f0 <USBD_Get_USB_Status>
 8008034:	4603      	mov	r3, r0
 8008036:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008038:	7bbb      	ldrb	r3, [r7, #14]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b084      	sub	sp, #16
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	460b      	mov	r3, r1
 800804c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800805c:	78fa      	ldrb	r2, [r7, #3]
 800805e:	4611      	mov	r1, r2
 8008060:	4618      	mov	r0, r3
 8008062:	f7fb fc13 	bl	800388c <HAL_PCD_EP_ClrStall>
 8008066:	4603      	mov	r3, r0
 8008068:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800806a:	7bfb      	ldrb	r3, [r7, #15]
 800806c:	4618      	mov	r0, r3
 800806e:	f000 f8bf 	bl	80081f0 <USBD_Get_USB_Status>
 8008072:	4603      	mov	r3, r0
 8008074:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008076:	7bbb      	ldrb	r3, [r7, #14]
}
 8008078:	4618      	mov	r0, r3
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	460b      	mov	r3, r1
 800808a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008092:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008094:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008098:	2b00      	cmp	r3, #0
 800809a:	da0b      	bge.n	80080b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800809c:	78fb      	ldrb	r3, [r7, #3]
 800809e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080a2:	68f9      	ldr	r1, [r7, #12]
 80080a4:	4613      	mov	r3, r2
 80080a6:	00db      	lsls	r3, r3, #3
 80080a8:	1a9b      	subs	r3, r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	440b      	add	r3, r1
 80080ae:	333e      	adds	r3, #62	; 0x3e
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	e00b      	b.n	80080cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80080b4:	78fb      	ldrb	r3, [r7, #3]
 80080b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080ba:	68f9      	ldr	r1, [r7, #12]
 80080bc:	4613      	mov	r3, r2
 80080be:	00db      	lsls	r3, r3, #3
 80080c0:	1a9b      	subs	r3, r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	440b      	add	r3, r1
 80080c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80080ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	460b      	mov	r3, r1
 80080e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080e8:	2300      	movs	r3, #0
 80080ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080f2:	78fa      	ldrb	r2, [r7, #3]
 80080f4:	4611      	mov	r1, r2
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fb f9e0 	bl	80034bc <HAL_PCD_SetAddress>
 80080fc:	4603      	mov	r3, r0
 80080fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008100:	7bfb      	ldrb	r3, [r7, #15]
 8008102:	4618      	mov	r0, r3
 8008104:	f000 f874 	bl	80081f0 <USBD_Get_USB_Status>
 8008108:	4603      	mov	r3, r0
 800810a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800810c:	7bbb      	ldrb	r3, [r7, #14]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b086      	sub	sp, #24
 800811a:	af00      	add	r7, sp, #0
 800811c:	60f8      	str	r0, [r7, #12]
 800811e:	607a      	str	r2, [r7, #4]
 8008120:	603b      	str	r3, [r7, #0]
 8008122:	460b      	mov	r3, r1
 8008124:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008126:	2300      	movs	r3, #0
 8008128:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008134:	7af9      	ldrb	r1, [r7, #11]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	f7fb faf9 	bl	8003730 <HAL_PCD_EP_Transmit>
 800813e:	4603      	mov	r3, r0
 8008140:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008142:	7dfb      	ldrb	r3, [r7, #23]
 8008144:	4618      	mov	r0, r3
 8008146:	f000 f853 	bl	80081f0 <USBD_Get_USB_Status>
 800814a:	4603      	mov	r3, r0
 800814c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800814e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3718      	adds	r7, #24
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	607a      	str	r2, [r7, #4]
 8008162:	603b      	str	r3, [r7, #0]
 8008164:	460b      	mov	r3, r1
 8008166:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008176:	7af9      	ldrb	r1, [r7, #11]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	f7fb fa75 	bl	800366a <HAL_PCD_EP_Receive>
 8008180:	4603      	mov	r3, r0
 8008182:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008184:	7dfb      	ldrb	r3, [r7, #23]
 8008186:	4618      	mov	r0, r3
 8008188:	f000 f832 	bl	80081f0 <USBD_Get_USB_Status>
 800818c:	4603      	mov	r3, r0
 800818e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008190:	7dbb      	ldrb	r3, [r7, #22]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3718      	adds	r7, #24
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b082      	sub	sp, #8
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	460b      	mov	r3, r1
 80081a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081ac:	78fa      	ldrb	r2, [r7, #3]
 80081ae:	4611      	mov	r1, r2
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fb faa5 	bl	8003700 <HAL_PCD_EP_GetRxCount>
 80081b6:	4603      	mov	r3, r0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80081c8:	4b03      	ldr	r3, [pc, #12]	; (80081d8 <USBD_static_malloc+0x18>)
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	20000360 	.word	0x20000360

080081dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]

}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	4603      	mov	r3, r0
 80081f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081fa:	2300      	movs	r3, #0
 80081fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80081fe:	79fb      	ldrb	r3, [r7, #7]
 8008200:	2b03      	cmp	r3, #3
 8008202:	d817      	bhi.n	8008234 <USBD_Get_USB_Status+0x44>
 8008204:	a201      	add	r2, pc, #4	; (adr r2, 800820c <USBD_Get_USB_Status+0x1c>)
 8008206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820a:	bf00      	nop
 800820c:	0800821d 	.word	0x0800821d
 8008210:	08008223 	.word	0x08008223
 8008214:	08008229 	.word	0x08008229
 8008218:	0800822f 	.word	0x0800822f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	73fb      	strb	r3, [r7, #15]
    break;
 8008220:	e00b      	b.n	800823a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008222:	2303      	movs	r3, #3
 8008224:	73fb      	strb	r3, [r7, #15]
    break;
 8008226:	e008      	b.n	800823a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008228:	2301      	movs	r3, #1
 800822a:	73fb      	strb	r3, [r7, #15]
    break;
 800822c:	e005      	b.n	800823a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800822e:	2303      	movs	r3, #3
 8008230:	73fb      	strb	r3, [r7, #15]
    break;
 8008232:	e002      	b.n	800823a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008234:	2303      	movs	r3, #3
 8008236:	73fb      	strb	r3, [r7, #15]
    break;
 8008238:	bf00      	nop
  }
  return usb_status;
 800823a:	7bfb      	ldrb	r3, [r7, #15]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <__errno>:
 8008248:	4b01      	ldr	r3, [pc, #4]	; (8008250 <__errno+0x8>)
 800824a:	6818      	ldr	r0, [r3, #0]
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	20000224 	.word	0x20000224

08008254 <__libc_init_array>:
 8008254:	b570      	push	{r4, r5, r6, lr}
 8008256:	4d0d      	ldr	r5, [pc, #52]	; (800828c <__libc_init_array+0x38>)
 8008258:	4c0d      	ldr	r4, [pc, #52]	; (8008290 <__libc_init_array+0x3c>)
 800825a:	1b64      	subs	r4, r4, r5
 800825c:	10a4      	asrs	r4, r4, #2
 800825e:	2600      	movs	r6, #0
 8008260:	42a6      	cmp	r6, r4
 8008262:	d109      	bne.n	8008278 <__libc_init_array+0x24>
 8008264:	4d0b      	ldr	r5, [pc, #44]	; (8008294 <__libc_init_array+0x40>)
 8008266:	4c0c      	ldr	r4, [pc, #48]	; (8008298 <__libc_init_array+0x44>)
 8008268:	f000 fc4e 	bl	8008b08 <_init>
 800826c:	1b64      	subs	r4, r4, r5
 800826e:	10a4      	asrs	r4, r4, #2
 8008270:	2600      	movs	r6, #0
 8008272:	42a6      	cmp	r6, r4
 8008274:	d105      	bne.n	8008282 <__libc_init_array+0x2e>
 8008276:	bd70      	pop	{r4, r5, r6, pc}
 8008278:	f855 3b04 	ldr.w	r3, [r5], #4
 800827c:	4798      	blx	r3
 800827e:	3601      	adds	r6, #1
 8008280:	e7ee      	b.n	8008260 <__libc_init_array+0xc>
 8008282:	f855 3b04 	ldr.w	r3, [r5], #4
 8008286:	4798      	blx	r3
 8008288:	3601      	adds	r6, #1
 800828a:	e7f2      	b.n	8008272 <__libc_init_array+0x1e>
 800828c:	08008c78 	.word	0x08008c78
 8008290:	08008c78 	.word	0x08008c78
 8008294:	08008c78 	.word	0x08008c78
 8008298:	08008c7c 	.word	0x08008c7c

0800829c <memset>:
 800829c:	4402      	add	r2, r0
 800829e:	4603      	mov	r3, r0
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d100      	bne.n	80082a6 <memset+0xa>
 80082a4:	4770      	bx	lr
 80082a6:	f803 1b01 	strb.w	r1, [r3], #1
 80082aa:	e7f9      	b.n	80082a0 <memset+0x4>

080082ac <siprintf>:
 80082ac:	b40e      	push	{r1, r2, r3}
 80082ae:	b500      	push	{lr}
 80082b0:	b09c      	sub	sp, #112	; 0x70
 80082b2:	ab1d      	add	r3, sp, #116	; 0x74
 80082b4:	9002      	str	r0, [sp, #8]
 80082b6:	9006      	str	r0, [sp, #24]
 80082b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082bc:	4809      	ldr	r0, [pc, #36]	; (80082e4 <siprintf+0x38>)
 80082be:	9107      	str	r1, [sp, #28]
 80082c0:	9104      	str	r1, [sp, #16]
 80082c2:	4909      	ldr	r1, [pc, #36]	; (80082e8 <siprintf+0x3c>)
 80082c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80082c8:	9105      	str	r1, [sp, #20]
 80082ca:	6800      	ldr	r0, [r0, #0]
 80082cc:	9301      	str	r3, [sp, #4]
 80082ce:	a902      	add	r1, sp, #8
 80082d0:	f000 f868 	bl	80083a4 <_svfiprintf_r>
 80082d4:	9b02      	ldr	r3, [sp, #8]
 80082d6:	2200      	movs	r2, #0
 80082d8:	701a      	strb	r2, [r3, #0]
 80082da:	b01c      	add	sp, #112	; 0x70
 80082dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80082e0:	b003      	add	sp, #12
 80082e2:	4770      	bx	lr
 80082e4:	20000224 	.word	0x20000224
 80082e8:	ffff0208 	.word	0xffff0208

080082ec <__ssputs_r>:
 80082ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f0:	688e      	ldr	r6, [r1, #8]
 80082f2:	429e      	cmp	r6, r3
 80082f4:	4682      	mov	sl, r0
 80082f6:	460c      	mov	r4, r1
 80082f8:	4690      	mov	r8, r2
 80082fa:	461f      	mov	r7, r3
 80082fc:	d838      	bhi.n	8008370 <__ssputs_r+0x84>
 80082fe:	898a      	ldrh	r2, [r1, #12]
 8008300:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008304:	d032      	beq.n	800836c <__ssputs_r+0x80>
 8008306:	6825      	ldr	r5, [r4, #0]
 8008308:	6909      	ldr	r1, [r1, #16]
 800830a:	eba5 0901 	sub.w	r9, r5, r1
 800830e:	6965      	ldr	r5, [r4, #20]
 8008310:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008314:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008318:	3301      	adds	r3, #1
 800831a:	444b      	add	r3, r9
 800831c:	106d      	asrs	r5, r5, #1
 800831e:	429d      	cmp	r5, r3
 8008320:	bf38      	it	cc
 8008322:	461d      	movcc	r5, r3
 8008324:	0553      	lsls	r3, r2, #21
 8008326:	d531      	bpl.n	800838c <__ssputs_r+0xa0>
 8008328:	4629      	mov	r1, r5
 800832a:	f000 fb47 	bl	80089bc <_malloc_r>
 800832e:	4606      	mov	r6, r0
 8008330:	b950      	cbnz	r0, 8008348 <__ssputs_r+0x5c>
 8008332:	230c      	movs	r3, #12
 8008334:	f8ca 3000 	str.w	r3, [sl]
 8008338:	89a3      	ldrh	r3, [r4, #12]
 800833a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800833e:	81a3      	strh	r3, [r4, #12]
 8008340:	f04f 30ff 	mov.w	r0, #4294967295
 8008344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008348:	6921      	ldr	r1, [r4, #16]
 800834a:	464a      	mov	r2, r9
 800834c:	f000 fabe 	bl	80088cc <memcpy>
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800835a:	81a3      	strh	r3, [r4, #12]
 800835c:	6126      	str	r6, [r4, #16]
 800835e:	6165      	str	r5, [r4, #20]
 8008360:	444e      	add	r6, r9
 8008362:	eba5 0509 	sub.w	r5, r5, r9
 8008366:	6026      	str	r6, [r4, #0]
 8008368:	60a5      	str	r5, [r4, #8]
 800836a:	463e      	mov	r6, r7
 800836c:	42be      	cmp	r6, r7
 800836e:	d900      	bls.n	8008372 <__ssputs_r+0x86>
 8008370:	463e      	mov	r6, r7
 8008372:	4632      	mov	r2, r6
 8008374:	6820      	ldr	r0, [r4, #0]
 8008376:	4641      	mov	r1, r8
 8008378:	f000 fab6 	bl	80088e8 <memmove>
 800837c:	68a3      	ldr	r3, [r4, #8]
 800837e:	6822      	ldr	r2, [r4, #0]
 8008380:	1b9b      	subs	r3, r3, r6
 8008382:	4432      	add	r2, r6
 8008384:	60a3      	str	r3, [r4, #8]
 8008386:	6022      	str	r2, [r4, #0]
 8008388:	2000      	movs	r0, #0
 800838a:	e7db      	b.n	8008344 <__ssputs_r+0x58>
 800838c:	462a      	mov	r2, r5
 800838e:	f000 fb6f 	bl	8008a70 <_realloc_r>
 8008392:	4606      	mov	r6, r0
 8008394:	2800      	cmp	r0, #0
 8008396:	d1e1      	bne.n	800835c <__ssputs_r+0x70>
 8008398:	6921      	ldr	r1, [r4, #16]
 800839a:	4650      	mov	r0, sl
 800839c:	f000 fabe 	bl	800891c <_free_r>
 80083a0:	e7c7      	b.n	8008332 <__ssputs_r+0x46>
	...

080083a4 <_svfiprintf_r>:
 80083a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a8:	4698      	mov	r8, r3
 80083aa:	898b      	ldrh	r3, [r1, #12]
 80083ac:	061b      	lsls	r3, r3, #24
 80083ae:	b09d      	sub	sp, #116	; 0x74
 80083b0:	4607      	mov	r7, r0
 80083b2:	460d      	mov	r5, r1
 80083b4:	4614      	mov	r4, r2
 80083b6:	d50e      	bpl.n	80083d6 <_svfiprintf_r+0x32>
 80083b8:	690b      	ldr	r3, [r1, #16]
 80083ba:	b963      	cbnz	r3, 80083d6 <_svfiprintf_r+0x32>
 80083bc:	2140      	movs	r1, #64	; 0x40
 80083be:	f000 fafd 	bl	80089bc <_malloc_r>
 80083c2:	6028      	str	r0, [r5, #0]
 80083c4:	6128      	str	r0, [r5, #16]
 80083c6:	b920      	cbnz	r0, 80083d2 <_svfiprintf_r+0x2e>
 80083c8:	230c      	movs	r3, #12
 80083ca:	603b      	str	r3, [r7, #0]
 80083cc:	f04f 30ff 	mov.w	r0, #4294967295
 80083d0:	e0d1      	b.n	8008576 <_svfiprintf_r+0x1d2>
 80083d2:	2340      	movs	r3, #64	; 0x40
 80083d4:	616b      	str	r3, [r5, #20]
 80083d6:	2300      	movs	r3, #0
 80083d8:	9309      	str	r3, [sp, #36]	; 0x24
 80083da:	2320      	movs	r3, #32
 80083dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80083e4:	2330      	movs	r3, #48	; 0x30
 80083e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008590 <_svfiprintf_r+0x1ec>
 80083ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083ee:	f04f 0901 	mov.w	r9, #1
 80083f2:	4623      	mov	r3, r4
 80083f4:	469a      	mov	sl, r3
 80083f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083fa:	b10a      	cbz	r2, 8008400 <_svfiprintf_r+0x5c>
 80083fc:	2a25      	cmp	r2, #37	; 0x25
 80083fe:	d1f9      	bne.n	80083f4 <_svfiprintf_r+0x50>
 8008400:	ebba 0b04 	subs.w	fp, sl, r4
 8008404:	d00b      	beq.n	800841e <_svfiprintf_r+0x7a>
 8008406:	465b      	mov	r3, fp
 8008408:	4622      	mov	r2, r4
 800840a:	4629      	mov	r1, r5
 800840c:	4638      	mov	r0, r7
 800840e:	f7ff ff6d 	bl	80082ec <__ssputs_r>
 8008412:	3001      	adds	r0, #1
 8008414:	f000 80aa 	beq.w	800856c <_svfiprintf_r+0x1c8>
 8008418:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800841a:	445a      	add	r2, fp
 800841c:	9209      	str	r2, [sp, #36]	; 0x24
 800841e:	f89a 3000 	ldrb.w	r3, [sl]
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 80a2 	beq.w	800856c <_svfiprintf_r+0x1c8>
 8008428:	2300      	movs	r3, #0
 800842a:	f04f 32ff 	mov.w	r2, #4294967295
 800842e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008432:	f10a 0a01 	add.w	sl, sl, #1
 8008436:	9304      	str	r3, [sp, #16]
 8008438:	9307      	str	r3, [sp, #28]
 800843a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800843e:	931a      	str	r3, [sp, #104]	; 0x68
 8008440:	4654      	mov	r4, sl
 8008442:	2205      	movs	r2, #5
 8008444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008448:	4851      	ldr	r0, [pc, #324]	; (8008590 <_svfiprintf_r+0x1ec>)
 800844a:	f7f7 fec1 	bl	80001d0 <memchr>
 800844e:	9a04      	ldr	r2, [sp, #16]
 8008450:	b9d8      	cbnz	r0, 800848a <_svfiprintf_r+0xe6>
 8008452:	06d0      	lsls	r0, r2, #27
 8008454:	bf44      	itt	mi
 8008456:	2320      	movmi	r3, #32
 8008458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800845c:	0711      	lsls	r1, r2, #28
 800845e:	bf44      	itt	mi
 8008460:	232b      	movmi	r3, #43	; 0x2b
 8008462:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008466:	f89a 3000 	ldrb.w	r3, [sl]
 800846a:	2b2a      	cmp	r3, #42	; 0x2a
 800846c:	d015      	beq.n	800849a <_svfiprintf_r+0xf6>
 800846e:	9a07      	ldr	r2, [sp, #28]
 8008470:	4654      	mov	r4, sl
 8008472:	2000      	movs	r0, #0
 8008474:	f04f 0c0a 	mov.w	ip, #10
 8008478:	4621      	mov	r1, r4
 800847a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800847e:	3b30      	subs	r3, #48	; 0x30
 8008480:	2b09      	cmp	r3, #9
 8008482:	d94e      	bls.n	8008522 <_svfiprintf_r+0x17e>
 8008484:	b1b0      	cbz	r0, 80084b4 <_svfiprintf_r+0x110>
 8008486:	9207      	str	r2, [sp, #28]
 8008488:	e014      	b.n	80084b4 <_svfiprintf_r+0x110>
 800848a:	eba0 0308 	sub.w	r3, r0, r8
 800848e:	fa09 f303 	lsl.w	r3, r9, r3
 8008492:	4313      	orrs	r3, r2
 8008494:	9304      	str	r3, [sp, #16]
 8008496:	46a2      	mov	sl, r4
 8008498:	e7d2      	b.n	8008440 <_svfiprintf_r+0x9c>
 800849a:	9b03      	ldr	r3, [sp, #12]
 800849c:	1d19      	adds	r1, r3, #4
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	9103      	str	r1, [sp, #12]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	bfbb      	ittet	lt
 80084a6:	425b      	neglt	r3, r3
 80084a8:	f042 0202 	orrlt.w	r2, r2, #2
 80084ac:	9307      	strge	r3, [sp, #28]
 80084ae:	9307      	strlt	r3, [sp, #28]
 80084b0:	bfb8      	it	lt
 80084b2:	9204      	strlt	r2, [sp, #16]
 80084b4:	7823      	ldrb	r3, [r4, #0]
 80084b6:	2b2e      	cmp	r3, #46	; 0x2e
 80084b8:	d10c      	bne.n	80084d4 <_svfiprintf_r+0x130>
 80084ba:	7863      	ldrb	r3, [r4, #1]
 80084bc:	2b2a      	cmp	r3, #42	; 0x2a
 80084be:	d135      	bne.n	800852c <_svfiprintf_r+0x188>
 80084c0:	9b03      	ldr	r3, [sp, #12]
 80084c2:	1d1a      	adds	r2, r3, #4
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	9203      	str	r2, [sp, #12]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	bfb8      	it	lt
 80084cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80084d0:	3402      	adds	r4, #2
 80084d2:	9305      	str	r3, [sp, #20]
 80084d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80085a0 <_svfiprintf_r+0x1fc>
 80084d8:	7821      	ldrb	r1, [r4, #0]
 80084da:	2203      	movs	r2, #3
 80084dc:	4650      	mov	r0, sl
 80084de:	f7f7 fe77 	bl	80001d0 <memchr>
 80084e2:	b140      	cbz	r0, 80084f6 <_svfiprintf_r+0x152>
 80084e4:	2340      	movs	r3, #64	; 0x40
 80084e6:	eba0 000a 	sub.w	r0, r0, sl
 80084ea:	fa03 f000 	lsl.w	r0, r3, r0
 80084ee:	9b04      	ldr	r3, [sp, #16]
 80084f0:	4303      	orrs	r3, r0
 80084f2:	3401      	adds	r4, #1
 80084f4:	9304      	str	r3, [sp, #16]
 80084f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084fa:	4826      	ldr	r0, [pc, #152]	; (8008594 <_svfiprintf_r+0x1f0>)
 80084fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008500:	2206      	movs	r2, #6
 8008502:	f7f7 fe65 	bl	80001d0 <memchr>
 8008506:	2800      	cmp	r0, #0
 8008508:	d038      	beq.n	800857c <_svfiprintf_r+0x1d8>
 800850a:	4b23      	ldr	r3, [pc, #140]	; (8008598 <_svfiprintf_r+0x1f4>)
 800850c:	bb1b      	cbnz	r3, 8008556 <_svfiprintf_r+0x1b2>
 800850e:	9b03      	ldr	r3, [sp, #12]
 8008510:	3307      	adds	r3, #7
 8008512:	f023 0307 	bic.w	r3, r3, #7
 8008516:	3308      	adds	r3, #8
 8008518:	9303      	str	r3, [sp, #12]
 800851a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800851c:	4433      	add	r3, r6
 800851e:	9309      	str	r3, [sp, #36]	; 0x24
 8008520:	e767      	b.n	80083f2 <_svfiprintf_r+0x4e>
 8008522:	fb0c 3202 	mla	r2, ip, r2, r3
 8008526:	460c      	mov	r4, r1
 8008528:	2001      	movs	r0, #1
 800852a:	e7a5      	b.n	8008478 <_svfiprintf_r+0xd4>
 800852c:	2300      	movs	r3, #0
 800852e:	3401      	adds	r4, #1
 8008530:	9305      	str	r3, [sp, #20]
 8008532:	4619      	mov	r1, r3
 8008534:	f04f 0c0a 	mov.w	ip, #10
 8008538:	4620      	mov	r0, r4
 800853a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800853e:	3a30      	subs	r2, #48	; 0x30
 8008540:	2a09      	cmp	r2, #9
 8008542:	d903      	bls.n	800854c <_svfiprintf_r+0x1a8>
 8008544:	2b00      	cmp	r3, #0
 8008546:	d0c5      	beq.n	80084d4 <_svfiprintf_r+0x130>
 8008548:	9105      	str	r1, [sp, #20]
 800854a:	e7c3      	b.n	80084d4 <_svfiprintf_r+0x130>
 800854c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008550:	4604      	mov	r4, r0
 8008552:	2301      	movs	r3, #1
 8008554:	e7f0      	b.n	8008538 <_svfiprintf_r+0x194>
 8008556:	ab03      	add	r3, sp, #12
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	462a      	mov	r2, r5
 800855c:	4b0f      	ldr	r3, [pc, #60]	; (800859c <_svfiprintf_r+0x1f8>)
 800855e:	a904      	add	r1, sp, #16
 8008560:	4638      	mov	r0, r7
 8008562:	f3af 8000 	nop.w
 8008566:	1c42      	adds	r2, r0, #1
 8008568:	4606      	mov	r6, r0
 800856a:	d1d6      	bne.n	800851a <_svfiprintf_r+0x176>
 800856c:	89ab      	ldrh	r3, [r5, #12]
 800856e:	065b      	lsls	r3, r3, #25
 8008570:	f53f af2c 	bmi.w	80083cc <_svfiprintf_r+0x28>
 8008574:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008576:	b01d      	add	sp, #116	; 0x74
 8008578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800857c:	ab03      	add	r3, sp, #12
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	462a      	mov	r2, r5
 8008582:	4b06      	ldr	r3, [pc, #24]	; (800859c <_svfiprintf_r+0x1f8>)
 8008584:	a904      	add	r1, sp, #16
 8008586:	4638      	mov	r0, r7
 8008588:	f000 f87a 	bl	8008680 <_printf_i>
 800858c:	e7eb      	b.n	8008566 <_svfiprintf_r+0x1c2>
 800858e:	bf00      	nop
 8008590:	08008c3c 	.word	0x08008c3c
 8008594:	08008c46 	.word	0x08008c46
 8008598:	00000000 	.word	0x00000000
 800859c:	080082ed 	.word	0x080082ed
 80085a0:	08008c42 	.word	0x08008c42

080085a4 <_printf_common>:
 80085a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085a8:	4616      	mov	r6, r2
 80085aa:	4699      	mov	r9, r3
 80085ac:	688a      	ldr	r2, [r1, #8]
 80085ae:	690b      	ldr	r3, [r1, #16]
 80085b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085b4:	4293      	cmp	r3, r2
 80085b6:	bfb8      	it	lt
 80085b8:	4613      	movlt	r3, r2
 80085ba:	6033      	str	r3, [r6, #0]
 80085bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085c0:	4607      	mov	r7, r0
 80085c2:	460c      	mov	r4, r1
 80085c4:	b10a      	cbz	r2, 80085ca <_printf_common+0x26>
 80085c6:	3301      	adds	r3, #1
 80085c8:	6033      	str	r3, [r6, #0]
 80085ca:	6823      	ldr	r3, [r4, #0]
 80085cc:	0699      	lsls	r1, r3, #26
 80085ce:	bf42      	ittt	mi
 80085d0:	6833      	ldrmi	r3, [r6, #0]
 80085d2:	3302      	addmi	r3, #2
 80085d4:	6033      	strmi	r3, [r6, #0]
 80085d6:	6825      	ldr	r5, [r4, #0]
 80085d8:	f015 0506 	ands.w	r5, r5, #6
 80085dc:	d106      	bne.n	80085ec <_printf_common+0x48>
 80085de:	f104 0a19 	add.w	sl, r4, #25
 80085e2:	68e3      	ldr	r3, [r4, #12]
 80085e4:	6832      	ldr	r2, [r6, #0]
 80085e6:	1a9b      	subs	r3, r3, r2
 80085e8:	42ab      	cmp	r3, r5
 80085ea:	dc26      	bgt.n	800863a <_printf_common+0x96>
 80085ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085f0:	1e13      	subs	r3, r2, #0
 80085f2:	6822      	ldr	r2, [r4, #0]
 80085f4:	bf18      	it	ne
 80085f6:	2301      	movne	r3, #1
 80085f8:	0692      	lsls	r2, r2, #26
 80085fa:	d42b      	bmi.n	8008654 <_printf_common+0xb0>
 80085fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008600:	4649      	mov	r1, r9
 8008602:	4638      	mov	r0, r7
 8008604:	47c0      	blx	r8
 8008606:	3001      	adds	r0, #1
 8008608:	d01e      	beq.n	8008648 <_printf_common+0xa4>
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	68e5      	ldr	r5, [r4, #12]
 800860e:	6832      	ldr	r2, [r6, #0]
 8008610:	f003 0306 	and.w	r3, r3, #6
 8008614:	2b04      	cmp	r3, #4
 8008616:	bf08      	it	eq
 8008618:	1aad      	subeq	r5, r5, r2
 800861a:	68a3      	ldr	r3, [r4, #8]
 800861c:	6922      	ldr	r2, [r4, #16]
 800861e:	bf0c      	ite	eq
 8008620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008624:	2500      	movne	r5, #0
 8008626:	4293      	cmp	r3, r2
 8008628:	bfc4      	itt	gt
 800862a:	1a9b      	subgt	r3, r3, r2
 800862c:	18ed      	addgt	r5, r5, r3
 800862e:	2600      	movs	r6, #0
 8008630:	341a      	adds	r4, #26
 8008632:	42b5      	cmp	r5, r6
 8008634:	d11a      	bne.n	800866c <_printf_common+0xc8>
 8008636:	2000      	movs	r0, #0
 8008638:	e008      	b.n	800864c <_printf_common+0xa8>
 800863a:	2301      	movs	r3, #1
 800863c:	4652      	mov	r2, sl
 800863e:	4649      	mov	r1, r9
 8008640:	4638      	mov	r0, r7
 8008642:	47c0      	blx	r8
 8008644:	3001      	adds	r0, #1
 8008646:	d103      	bne.n	8008650 <_printf_common+0xac>
 8008648:	f04f 30ff 	mov.w	r0, #4294967295
 800864c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008650:	3501      	adds	r5, #1
 8008652:	e7c6      	b.n	80085e2 <_printf_common+0x3e>
 8008654:	18e1      	adds	r1, r4, r3
 8008656:	1c5a      	adds	r2, r3, #1
 8008658:	2030      	movs	r0, #48	; 0x30
 800865a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800865e:	4422      	add	r2, r4
 8008660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008668:	3302      	adds	r3, #2
 800866a:	e7c7      	b.n	80085fc <_printf_common+0x58>
 800866c:	2301      	movs	r3, #1
 800866e:	4622      	mov	r2, r4
 8008670:	4649      	mov	r1, r9
 8008672:	4638      	mov	r0, r7
 8008674:	47c0      	blx	r8
 8008676:	3001      	adds	r0, #1
 8008678:	d0e6      	beq.n	8008648 <_printf_common+0xa4>
 800867a:	3601      	adds	r6, #1
 800867c:	e7d9      	b.n	8008632 <_printf_common+0x8e>
	...

08008680 <_printf_i>:
 8008680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008684:	460c      	mov	r4, r1
 8008686:	4691      	mov	r9, r2
 8008688:	7e27      	ldrb	r7, [r4, #24]
 800868a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800868c:	2f78      	cmp	r7, #120	; 0x78
 800868e:	4680      	mov	r8, r0
 8008690:	469a      	mov	sl, r3
 8008692:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008696:	d807      	bhi.n	80086a8 <_printf_i+0x28>
 8008698:	2f62      	cmp	r7, #98	; 0x62
 800869a:	d80a      	bhi.n	80086b2 <_printf_i+0x32>
 800869c:	2f00      	cmp	r7, #0
 800869e:	f000 80d8 	beq.w	8008852 <_printf_i+0x1d2>
 80086a2:	2f58      	cmp	r7, #88	; 0x58
 80086a4:	f000 80a3 	beq.w	80087ee <_printf_i+0x16e>
 80086a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80086ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086b0:	e03a      	b.n	8008728 <_printf_i+0xa8>
 80086b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086b6:	2b15      	cmp	r3, #21
 80086b8:	d8f6      	bhi.n	80086a8 <_printf_i+0x28>
 80086ba:	a001      	add	r0, pc, #4	; (adr r0, 80086c0 <_printf_i+0x40>)
 80086bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80086c0:	08008719 	.word	0x08008719
 80086c4:	0800872d 	.word	0x0800872d
 80086c8:	080086a9 	.word	0x080086a9
 80086cc:	080086a9 	.word	0x080086a9
 80086d0:	080086a9 	.word	0x080086a9
 80086d4:	080086a9 	.word	0x080086a9
 80086d8:	0800872d 	.word	0x0800872d
 80086dc:	080086a9 	.word	0x080086a9
 80086e0:	080086a9 	.word	0x080086a9
 80086e4:	080086a9 	.word	0x080086a9
 80086e8:	080086a9 	.word	0x080086a9
 80086ec:	08008839 	.word	0x08008839
 80086f0:	0800875d 	.word	0x0800875d
 80086f4:	0800881b 	.word	0x0800881b
 80086f8:	080086a9 	.word	0x080086a9
 80086fc:	080086a9 	.word	0x080086a9
 8008700:	0800885b 	.word	0x0800885b
 8008704:	080086a9 	.word	0x080086a9
 8008708:	0800875d 	.word	0x0800875d
 800870c:	080086a9 	.word	0x080086a9
 8008710:	080086a9 	.word	0x080086a9
 8008714:	08008823 	.word	0x08008823
 8008718:	680b      	ldr	r3, [r1, #0]
 800871a:	1d1a      	adds	r2, r3, #4
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	600a      	str	r2, [r1, #0]
 8008720:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008728:	2301      	movs	r3, #1
 800872a:	e0a3      	b.n	8008874 <_printf_i+0x1f4>
 800872c:	6825      	ldr	r5, [r4, #0]
 800872e:	6808      	ldr	r0, [r1, #0]
 8008730:	062e      	lsls	r6, r5, #24
 8008732:	f100 0304 	add.w	r3, r0, #4
 8008736:	d50a      	bpl.n	800874e <_printf_i+0xce>
 8008738:	6805      	ldr	r5, [r0, #0]
 800873a:	600b      	str	r3, [r1, #0]
 800873c:	2d00      	cmp	r5, #0
 800873e:	da03      	bge.n	8008748 <_printf_i+0xc8>
 8008740:	232d      	movs	r3, #45	; 0x2d
 8008742:	426d      	negs	r5, r5
 8008744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008748:	485e      	ldr	r0, [pc, #376]	; (80088c4 <_printf_i+0x244>)
 800874a:	230a      	movs	r3, #10
 800874c:	e019      	b.n	8008782 <_printf_i+0x102>
 800874e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008752:	6805      	ldr	r5, [r0, #0]
 8008754:	600b      	str	r3, [r1, #0]
 8008756:	bf18      	it	ne
 8008758:	b22d      	sxthne	r5, r5
 800875a:	e7ef      	b.n	800873c <_printf_i+0xbc>
 800875c:	680b      	ldr	r3, [r1, #0]
 800875e:	6825      	ldr	r5, [r4, #0]
 8008760:	1d18      	adds	r0, r3, #4
 8008762:	6008      	str	r0, [r1, #0]
 8008764:	0628      	lsls	r0, r5, #24
 8008766:	d501      	bpl.n	800876c <_printf_i+0xec>
 8008768:	681d      	ldr	r5, [r3, #0]
 800876a:	e002      	b.n	8008772 <_printf_i+0xf2>
 800876c:	0669      	lsls	r1, r5, #25
 800876e:	d5fb      	bpl.n	8008768 <_printf_i+0xe8>
 8008770:	881d      	ldrh	r5, [r3, #0]
 8008772:	4854      	ldr	r0, [pc, #336]	; (80088c4 <_printf_i+0x244>)
 8008774:	2f6f      	cmp	r7, #111	; 0x6f
 8008776:	bf0c      	ite	eq
 8008778:	2308      	moveq	r3, #8
 800877a:	230a      	movne	r3, #10
 800877c:	2100      	movs	r1, #0
 800877e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008782:	6866      	ldr	r6, [r4, #4]
 8008784:	60a6      	str	r6, [r4, #8]
 8008786:	2e00      	cmp	r6, #0
 8008788:	bfa2      	ittt	ge
 800878a:	6821      	ldrge	r1, [r4, #0]
 800878c:	f021 0104 	bicge.w	r1, r1, #4
 8008790:	6021      	strge	r1, [r4, #0]
 8008792:	b90d      	cbnz	r5, 8008798 <_printf_i+0x118>
 8008794:	2e00      	cmp	r6, #0
 8008796:	d04d      	beq.n	8008834 <_printf_i+0x1b4>
 8008798:	4616      	mov	r6, r2
 800879a:	fbb5 f1f3 	udiv	r1, r5, r3
 800879e:	fb03 5711 	mls	r7, r3, r1, r5
 80087a2:	5dc7      	ldrb	r7, [r0, r7]
 80087a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80087a8:	462f      	mov	r7, r5
 80087aa:	42bb      	cmp	r3, r7
 80087ac:	460d      	mov	r5, r1
 80087ae:	d9f4      	bls.n	800879a <_printf_i+0x11a>
 80087b0:	2b08      	cmp	r3, #8
 80087b2:	d10b      	bne.n	80087cc <_printf_i+0x14c>
 80087b4:	6823      	ldr	r3, [r4, #0]
 80087b6:	07df      	lsls	r7, r3, #31
 80087b8:	d508      	bpl.n	80087cc <_printf_i+0x14c>
 80087ba:	6923      	ldr	r3, [r4, #16]
 80087bc:	6861      	ldr	r1, [r4, #4]
 80087be:	4299      	cmp	r1, r3
 80087c0:	bfde      	ittt	le
 80087c2:	2330      	movle	r3, #48	; 0x30
 80087c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80087cc:	1b92      	subs	r2, r2, r6
 80087ce:	6122      	str	r2, [r4, #16]
 80087d0:	f8cd a000 	str.w	sl, [sp]
 80087d4:	464b      	mov	r3, r9
 80087d6:	aa03      	add	r2, sp, #12
 80087d8:	4621      	mov	r1, r4
 80087da:	4640      	mov	r0, r8
 80087dc:	f7ff fee2 	bl	80085a4 <_printf_common>
 80087e0:	3001      	adds	r0, #1
 80087e2:	d14c      	bne.n	800887e <_printf_i+0x1fe>
 80087e4:	f04f 30ff 	mov.w	r0, #4294967295
 80087e8:	b004      	add	sp, #16
 80087ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ee:	4835      	ldr	r0, [pc, #212]	; (80088c4 <_printf_i+0x244>)
 80087f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80087f4:	6823      	ldr	r3, [r4, #0]
 80087f6:	680e      	ldr	r6, [r1, #0]
 80087f8:	061f      	lsls	r7, r3, #24
 80087fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80087fe:	600e      	str	r6, [r1, #0]
 8008800:	d514      	bpl.n	800882c <_printf_i+0x1ac>
 8008802:	07d9      	lsls	r1, r3, #31
 8008804:	bf44      	itt	mi
 8008806:	f043 0320 	orrmi.w	r3, r3, #32
 800880a:	6023      	strmi	r3, [r4, #0]
 800880c:	b91d      	cbnz	r5, 8008816 <_printf_i+0x196>
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	f023 0320 	bic.w	r3, r3, #32
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	2310      	movs	r3, #16
 8008818:	e7b0      	b.n	800877c <_printf_i+0xfc>
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	f043 0320 	orr.w	r3, r3, #32
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	2378      	movs	r3, #120	; 0x78
 8008824:	4828      	ldr	r0, [pc, #160]	; (80088c8 <_printf_i+0x248>)
 8008826:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800882a:	e7e3      	b.n	80087f4 <_printf_i+0x174>
 800882c:	065e      	lsls	r6, r3, #25
 800882e:	bf48      	it	mi
 8008830:	b2ad      	uxthmi	r5, r5
 8008832:	e7e6      	b.n	8008802 <_printf_i+0x182>
 8008834:	4616      	mov	r6, r2
 8008836:	e7bb      	b.n	80087b0 <_printf_i+0x130>
 8008838:	680b      	ldr	r3, [r1, #0]
 800883a:	6826      	ldr	r6, [r4, #0]
 800883c:	6960      	ldr	r0, [r4, #20]
 800883e:	1d1d      	adds	r5, r3, #4
 8008840:	600d      	str	r5, [r1, #0]
 8008842:	0635      	lsls	r5, r6, #24
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	d501      	bpl.n	800884c <_printf_i+0x1cc>
 8008848:	6018      	str	r0, [r3, #0]
 800884a:	e002      	b.n	8008852 <_printf_i+0x1d2>
 800884c:	0671      	lsls	r1, r6, #25
 800884e:	d5fb      	bpl.n	8008848 <_printf_i+0x1c8>
 8008850:	8018      	strh	r0, [r3, #0]
 8008852:	2300      	movs	r3, #0
 8008854:	6123      	str	r3, [r4, #16]
 8008856:	4616      	mov	r6, r2
 8008858:	e7ba      	b.n	80087d0 <_printf_i+0x150>
 800885a:	680b      	ldr	r3, [r1, #0]
 800885c:	1d1a      	adds	r2, r3, #4
 800885e:	600a      	str	r2, [r1, #0]
 8008860:	681e      	ldr	r6, [r3, #0]
 8008862:	6862      	ldr	r2, [r4, #4]
 8008864:	2100      	movs	r1, #0
 8008866:	4630      	mov	r0, r6
 8008868:	f7f7 fcb2 	bl	80001d0 <memchr>
 800886c:	b108      	cbz	r0, 8008872 <_printf_i+0x1f2>
 800886e:	1b80      	subs	r0, r0, r6
 8008870:	6060      	str	r0, [r4, #4]
 8008872:	6863      	ldr	r3, [r4, #4]
 8008874:	6123      	str	r3, [r4, #16]
 8008876:	2300      	movs	r3, #0
 8008878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800887c:	e7a8      	b.n	80087d0 <_printf_i+0x150>
 800887e:	6923      	ldr	r3, [r4, #16]
 8008880:	4632      	mov	r2, r6
 8008882:	4649      	mov	r1, r9
 8008884:	4640      	mov	r0, r8
 8008886:	47d0      	blx	sl
 8008888:	3001      	adds	r0, #1
 800888a:	d0ab      	beq.n	80087e4 <_printf_i+0x164>
 800888c:	6823      	ldr	r3, [r4, #0]
 800888e:	079b      	lsls	r3, r3, #30
 8008890:	d413      	bmi.n	80088ba <_printf_i+0x23a>
 8008892:	68e0      	ldr	r0, [r4, #12]
 8008894:	9b03      	ldr	r3, [sp, #12]
 8008896:	4298      	cmp	r0, r3
 8008898:	bfb8      	it	lt
 800889a:	4618      	movlt	r0, r3
 800889c:	e7a4      	b.n	80087e8 <_printf_i+0x168>
 800889e:	2301      	movs	r3, #1
 80088a0:	4632      	mov	r2, r6
 80088a2:	4649      	mov	r1, r9
 80088a4:	4640      	mov	r0, r8
 80088a6:	47d0      	blx	sl
 80088a8:	3001      	adds	r0, #1
 80088aa:	d09b      	beq.n	80087e4 <_printf_i+0x164>
 80088ac:	3501      	adds	r5, #1
 80088ae:	68e3      	ldr	r3, [r4, #12]
 80088b0:	9903      	ldr	r1, [sp, #12]
 80088b2:	1a5b      	subs	r3, r3, r1
 80088b4:	42ab      	cmp	r3, r5
 80088b6:	dcf2      	bgt.n	800889e <_printf_i+0x21e>
 80088b8:	e7eb      	b.n	8008892 <_printf_i+0x212>
 80088ba:	2500      	movs	r5, #0
 80088bc:	f104 0619 	add.w	r6, r4, #25
 80088c0:	e7f5      	b.n	80088ae <_printf_i+0x22e>
 80088c2:	bf00      	nop
 80088c4:	08008c4d 	.word	0x08008c4d
 80088c8:	08008c5e 	.word	0x08008c5e

080088cc <memcpy>:
 80088cc:	440a      	add	r2, r1
 80088ce:	4291      	cmp	r1, r2
 80088d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80088d4:	d100      	bne.n	80088d8 <memcpy+0xc>
 80088d6:	4770      	bx	lr
 80088d8:	b510      	push	{r4, lr}
 80088da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088e2:	4291      	cmp	r1, r2
 80088e4:	d1f9      	bne.n	80088da <memcpy+0xe>
 80088e6:	bd10      	pop	{r4, pc}

080088e8 <memmove>:
 80088e8:	4288      	cmp	r0, r1
 80088ea:	b510      	push	{r4, lr}
 80088ec:	eb01 0402 	add.w	r4, r1, r2
 80088f0:	d902      	bls.n	80088f8 <memmove+0x10>
 80088f2:	4284      	cmp	r4, r0
 80088f4:	4623      	mov	r3, r4
 80088f6:	d807      	bhi.n	8008908 <memmove+0x20>
 80088f8:	1e43      	subs	r3, r0, #1
 80088fa:	42a1      	cmp	r1, r4
 80088fc:	d008      	beq.n	8008910 <memmove+0x28>
 80088fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008902:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008906:	e7f8      	b.n	80088fa <memmove+0x12>
 8008908:	4402      	add	r2, r0
 800890a:	4601      	mov	r1, r0
 800890c:	428a      	cmp	r2, r1
 800890e:	d100      	bne.n	8008912 <memmove+0x2a>
 8008910:	bd10      	pop	{r4, pc}
 8008912:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008916:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800891a:	e7f7      	b.n	800890c <memmove+0x24>

0800891c <_free_r>:
 800891c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800891e:	2900      	cmp	r1, #0
 8008920:	d048      	beq.n	80089b4 <_free_r+0x98>
 8008922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008926:	9001      	str	r0, [sp, #4]
 8008928:	2b00      	cmp	r3, #0
 800892a:	f1a1 0404 	sub.w	r4, r1, #4
 800892e:	bfb8      	it	lt
 8008930:	18e4      	addlt	r4, r4, r3
 8008932:	f000 f8d3 	bl	8008adc <__malloc_lock>
 8008936:	4a20      	ldr	r2, [pc, #128]	; (80089b8 <_free_r+0x9c>)
 8008938:	9801      	ldr	r0, [sp, #4]
 800893a:	6813      	ldr	r3, [r2, #0]
 800893c:	4615      	mov	r5, r2
 800893e:	b933      	cbnz	r3, 800894e <_free_r+0x32>
 8008940:	6063      	str	r3, [r4, #4]
 8008942:	6014      	str	r4, [r2, #0]
 8008944:	b003      	add	sp, #12
 8008946:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800894a:	f000 b8cd 	b.w	8008ae8 <__malloc_unlock>
 800894e:	42a3      	cmp	r3, r4
 8008950:	d90b      	bls.n	800896a <_free_r+0x4e>
 8008952:	6821      	ldr	r1, [r4, #0]
 8008954:	1862      	adds	r2, r4, r1
 8008956:	4293      	cmp	r3, r2
 8008958:	bf04      	itt	eq
 800895a:	681a      	ldreq	r2, [r3, #0]
 800895c:	685b      	ldreq	r3, [r3, #4]
 800895e:	6063      	str	r3, [r4, #4]
 8008960:	bf04      	itt	eq
 8008962:	1852      	addeq	r2, r2, r1
 8008964:	6022      	streq	r2, [r4, #0]
 8008966:	602c      	str	r4, [r5, #0]
 8008968:	e7ec      	b.n	8008944 <_free_r+0x28>
 800896a:	461a      	mov	r2, r3
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	b10b      	cbz	r3, 8008974 <_free_r+0x58>
 8008970:	42a3      	cmp	r3, r4
 8008972:	d9fa      	bls.n	800896a <_free_r+0x4e>
 8008974:	6811      	ldr	r1, [r2, #0]
 8008976:	1855      	adds	r5, r2, r1
 8008978:	42a5      	cmp	r5, r4
 800897a:	d10b      	bne.n	8008994 <_free_r+0x78>
 800897c:	6824      	ldr	r4, [r4, #0]
 800897e:	4421      	add	r1, r4
 8008980:	1854      	adds	r4, r2, r1
 8008982:	42a3      	cmp	r3, r4
 8008984:	6011      	str	r1, [r2, #0]
 8008986:	d1dd      	bne.n	8008944 <_free_r+0x28>
 8008988:	681c      	ldr	r4, [r3, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	6053      	str	r3, [r2, #4]
 800898e:	4421      	add	r1, r4
 8008990:	6011      	str	r1, [r2, #0]
 8008992:	e7d7      	b.n	8008944 <_free_r+0x28>
 8008994:	d902      	bls.n	800899c <_free_r+0x80>
 8008996:	230c      	movs	r3, #12
 8008998:	6003      	str	r3, [r0, #0]
 800899a:	e7d3      	b.n	8008944 <_free_r+0x28>
 800899c:	6825      	ldr	r5, [r4, #0]
 800899e:	1961      	adds	r1, r4, r5
 80089a0:	428b      	cmp	r3, r1
 80089a2:	bf04      	itt	eq
 80089a4:	6819      	ldreq	r1, [r3, #0]
 80089a6:	685b      	ldreq	r3, [r3, #4]
 80089a8:	6063      	str	r3, [r4, #4]
 80089aa:	bf04      	itt	eq
 80089ac:	1949      	addeq	r1, r1, r5
 80089ae:	6021      	streq	r1, [r4, #0]
 80089b0:	6054      	str	r4, [r2, #4]
 80089b2:	e7c7      	b.n	8008944 <_free_r+0x28>
 80089b4:	b003      	add	sp, #12
 80089b6:	bd30      	pop	{r4, r5, pc}
 80089b8:	20000580 	.word	0x20000580

080089bc <_malloc_r>:
 80089bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089be:	1ccd      	adds	r5, r1, #3
 80089c0:	f025 0503 	bic.w	r5, r5, #3
 80089c4:	3508      	adds	r5, #8
 80089c6:	2d0c      	cmp	r5, #12
 80089c8:	bf38      	it	cc
 80089ca:	250c      	movcc	r5, #12
 80089cc:	2d00      	cmp	r5, #0
 80089ce:	4606      	mov	r6, r0
 80089d0:	db01      	blt.n	80089d6 <_malloc_r+0x1a>
 80089d2:	42a9      	cmp	r1, r5
 80089d4:	d903      	bls.n	80089de <_malloc_r+0x22>
 80089d6:	230c      	movs	r3, #12
 80089d8:	6033      	str	r3, [r6, #0]
 80089da:	2000      	movs	r0, #0
 80089dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089de:	f000 f87d 	bl	8008adc <__malloc_lock>
 80089e2:	4921      	ldr	r1, [pc, #132]	; (8008a68 <_malloc_r+0xac>)
 80089e4:	680a      	ldr	r2, [r1, #0]
 80089e6:	4614      	mov	r4, r2
 80089e8:	b99c      	cbnz	r4, 8008a12 <_malloc_r+0x56>
 80089ea:	4f20      	ldr	r7, [pc, #128]	; (8008a6c <_malloc_r+0xb0>)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	b923      	cbnz	r3, 80089fa <_malloc_r+0x3e>
 80089f0:	4621      	mov	r1, r4
 80089f2:	4630      	mov	r0, r6
 80089f4:	f000 f862 	bl	8008abc <_sbrk_r>
 80089f8:	6038      	str	r0, [r7, #0]
 80089fa:	4629      	mov	r1, r5
 80089fc:	4630      	mov	r0, r6
 80089fe:	f000 f85d 	bl	8008abc <_sbrk_r>
 8008a02:	1c43      	adds	r3, r0, #1
 8008a04:	d123      	bne.n	8008a4e <_malloc_r+0x92>
 8008a06:	230c      	movs	r3, #12
 8008a08:	6033      	str	r3, [r6, #0]
 8008a0a:	4630      	mov	r0, r6
 8008a0c:	f000 f86c 	bl	8008ae8 <__malloc_unlock>
 8008a10:	e7e3      	b.n	80089da <_malloc_r+0x1e>
 8008a12:	6823      	ldr	r3, [r4, #0]
 8008a14:	1b5b      	subs	r3, r3, r5
 8008a16:	d417      	bmi.n	8008a48 <_malloc_r+0x8c>
 8008a18:	2b0b      	cmp	r3, #11
 8008a1a:	d903      	bls.n	8008a24 <_malloc_r+0x68>
 8008a1c:	6023      	str	r3, [r4, #0]
 8008a1e:	441c      	add	r4, r3
 8008a20:	6025      	str	r5, [r4, #0]
 8008a22:	e004      	b.n	8008a2e <_malloc_r+0x72>
 8008a24:	6863      	ldr	r3, [r4, #4]
 8008a26:	42a2      	cmp	r2, r4
 8008a28:	bf0c      	ite	eq
 8008a2a:	600b      	streq	r3, [r1, #0]
 8008a2c:	6053      	strne	r3, [r2, #4]
 8008a2e:	4630      	mov	r0, r6
 8008a30:	f000 f85a 	bl	8008ae8 <__malloc_unlock>
 8008a34:	f104 000b 	add.w	r0, r4, #11
 8008a38:	1d23      	adds	r3, r4, #4
 8008a3a:	f020 0007 	bic.w	r0, r0, #7
 8008a3e:	1ac2      	subs	r2, r0, r3
 8008a40:	d0cc      	beq.n	80089dc <_malloc_r+0x20>
 8008a42:	1a1b      	subs	r3, r3, r0
 8008a44:	50a3      	str	r3, [r4, r2]
 8008a46:	e7c9      	b.n	80089dc <_malloc_r+0x20>
 8008a48:	4622      	mov	r2, r4
 8008a4a:	6864      	ldr	r4, [r4, #4]
 8008a4c:	e7cc      	b.n	80089e8 <_malloc_r+0x2c>
 8008a4e:	1cc4      	adds	r4, r0, #3
 8008a50:	f024 0403 	bic.w	r4, r4, #3
 8008a54:	42a0      	cmp	r0, r4
 8008a56:	d0e3      	beq.n	8008a20 <_malloc_r+0x64>
 8008a58:	1a21      	subs	r1, r4, r0
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	f000 f82e 	bl	8008abc <_sbrk_r>
 8008a60:	3001      	adds	r0, #1
 8008a62:	d1dd      	bne.n	8008a20 <_malloc_r+0x64>
 8008a64:	e7cf      	b.n	8008a06 <_malloc_r+0x4a>
 8008a66:	bf00      	nop
 8008a68:	20000580 	.word	0x20000580
 8008a6c:	20000584 	.word	0x20000584

08008a70 <_realloc_r>:
 8008a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a72:	4607      	mov	r7, r0
 8008a74:	4614      	mov	r4, r2
 8008a76:	460e      	mov	r6, r1
 8008a78:	b921      	cbnz	r1, 8008a84 <_realloc_r+0x14>
 8008a7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a7e:	4611      	mov	r1, r2
 8008a80:	f7ff bf9c 	b.w	80089bc <_malloc_r>
 8008a84:	b922      	cbnz	r2, 8008a90 <_realloc_r+0x20>
 8008a86:	f7ff ff49 	bl	800891c <_free_r>
 8008a8a:	4625      	mov	r5, r4
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a90:	f000 f830 	bl	8008af4 <_malloc_usable_size_r>
 8008a94:	42a0      	cmp	r0, r4
 8008a96:	d20f      	bcs.n	8008ab8 <_realloc_r+0x48>
 8008a98:	4621      	mov	r1, r4
 8008a9a:	4638      	mov	r0, r7
 8008a9c:	f7ff ff8e 	bl	80089bc <_malloc_r>
 8008aa0:	4605      	mov	r5, r0
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	d0f2      	beq.n	8008a8c <_realloc_r+0x1c>
 8008aa6:	4631      	mov	r1, r6
 8008aa8:	4622      	mov	r2, r4
 8008aaa:	f7ff ff0f 	bl	80088cc <memcpy>
 8008aae:	4631      	mov	r1, r6
 8008ab0:	4638      	mov	r0, r7
 8008ab2:	f7ff ff33 	bl	800891c <_free_r>
 8008ab6:	e7e9      	b.n	8008a8c <_realloc_r+0x1c>
 8008ab8:	4635      	mov	r5, r6
 8008aba:	e7e7      	b.n	8008a8c <_realloc_r+0x1c>

08008abc <_sbrk_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	4d06      	ldr	r5, [pc, #24]	; (8008ad8 <_sbrk_r+0x1c>)
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	4608      	mov	r0, r1
 8008ac6:	602b      	str	r3, [r5, #0]
 8008ac8:	f7f8 fd5e 	bl	8001588 <_sbrk>
 8008acc:	1c43      	adds	r3, r0, #1
 8008ace:	d102      	bne.n	8008ad6 <_sbrk_r+0x1a>
 8008ad0:	682b      	ldr	r3, [r5, #0]
 8008ad2:	b103      	cbz	r3, 8008ad6 <_sbrk_r+0x1a>
 8008ad4:	6023      	str	r3, [r4, #0]
 8008ad6:	bd38      	pop	{r3, r4, r5, pc}
 8008ad8:	200025c4 	.word	0x200025c4

08008adc <__malloc_lock>:
 8008adc:	4801      	ldr	r0, [pc, #4]	; (8008ae4 <__malloc_lock+0x8>)
 8008ade:	f000 b811 	b.w	8008b04 <__retarget_lock_acquire_recursive>
 8008ae2:	bf00      	nop
 8008ae4:	200025cc 	.word	0x200025cc

08008ae8 <__malloc_unlock>:
 8008ae8:	4801      	ldr	r0, [pc, #4]	; (8008af0 <__malloc_unlock+0x8>)
 8008aea:	f000 b80c 	b.w	8008b06 <__retarget_lock_release_recursive>
 8008aee:	bf00      	nop
 8008af0:	200025cc 	.word	0x200025cc

08008af4 <_malloc_usable_size_r>:
 8008af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008af8:	1f18      	subs	r0, r3, #4
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	bfbc      	itt	lt
 8008afe:	580b      	ldrlt	r3, [r1, r0]
 8008b00:	18c0      	addlt	r0, r0, r3
 8008b02:	4770      	bx	lr

08008b04 <__retarget_lock_acquire_recursive>:
 8008b04:	4770      	bx	lr

08008b06 <__retarget_lock_release_recursive>:
 8008b06:	4770      	bx	lr

08008b08 <_init>:
 8008b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0a:	bf00      	nop
 8008b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b0e:	bc08      	pop	{r3}
 8008b10:	469e      	mov	lr, r3
 8008b12:	4770      	bx	lr

08008b14 <_fini>:
 8008b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b16:	bf00      	nop
 8008b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b1a:	bc08      	pop	{r3}
 8008b1c:	469e      	mov	lr, r3
 8008b1e:	4770      	bx	lr
