
CAN_repeater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08008fb8  08008fb8  00018fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009104  08009104  0002028c  2**0
                  CONTENTS
  4 .ARM          00000008  08009104  08009104  00019104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800910c  0800910c  0002028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800910c  0800910c  0001910c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009110  08009110  00019110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000028c  20000000  08009114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022f4  2000028c  080093a0  0002028c  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20002580  080093a0  00022580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001afa5  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039e5  00000000  00000000  0003b261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  0003ec48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  0003fe20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c43  00000000  00000000  00040eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f88  00000000  00000000  00069af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8894  00000000  00000000  00080a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015930f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dc0  00000000  00000000  00159364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000028c 	.word	0x2000028c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008fa0 	.word	0x08008fa0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000290 	.word	0x20000290
 80001cc:	08008fa0 	.word	0x08008fa0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char StrFunctionCode[16][10] = {"NMT      \0","EMERGENCY\0","TIME     \0","FC_3     \0","DOORS    \0","FC_5     \0","FC_6     \0","FC_7     \0","PDO_OUT  \0","PDO_IN   \0","MPDO     \0","TSDO     \0","RSDO     \0","FC_D     \0","HEARTBEAT\0","LSS      \0"};

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056a:	b095      	sub	sp, #84	; 0x54
 800056c:	af0a      	add	r7, sp, #40	; 0x28
 800056e:	61f8      	str	r0, [r7, #28]
  /* Get RX message */
	if(hcan->Instance == hcan1.Instance)
 8000570:	69fb      	ldr	r3, [r7, #28]
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4b7a      	ldr	r3, [pc, #488]	; (8000760 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	429a      	cmp	r2, r3
 800057a:	f040 825b 	bne.w	8000a34 <HAL_CAN_RxFifo0MsgPendingCallback+0x4cc>
	{
		  if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &Can1RxHeader[ri1], Can1RxData[ri1]) != HAL_OK)
 800057e:	4b79      	ldr	r3, [pc, #484]	; (8000764 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	b2db      	uxtb	r3, r3
 8000584:	461a      	mov	r2, r3
 8000586:	4613      	mov	r3, r2
 8000588:	00db      	lsls	r3, r3, #3
 800058a:	1a9b      	subs	r3, r3, r2
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	4a76      	ldr	r2, [pc, #472]	; (8000768 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000590:	441a      	add	r2, r3
 8000592:	4b74      	ldr	r3, [pc, #464]	; (8000764 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	00db      	lsls	r3, r3, #3
 800059a:	4974      	ldr	r1, [pc, #464]	; (800076c <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 800059c:	440b      	add	r3, r1
 800059e:	2100      	movs	r1, #0
 80005a0:	486f      	ldr	r0, [pc, #444]	; (8000760 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80005a2:	f001 fd66 	bl	8002072 <HAL_CAN_GetRxMessage>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d002      	beq.n	80005b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
		  {
			/* Reception Error */
			  Error_Handler();
 80005ac:	f000 ff32 	bl	8001414 <Error_Handler>
			  if(ri2 == (CAN_RX_SIZE -1)) { ri2 =0;}
			  else ri2++;

		  }
	}
}
 80005b0:	e312      	b.n	8000bd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x670>
			  uint8_t functioncode = ((Can1RxHeader[ri1].StdId>>3) & 0xF0);
 80005b2:	4b6c      	ldr	r3, [pc, #432]	; (8000764 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	4619      	mov	r1, r3
 80005ba:	4a6b      	ldr	r2, [pc, #428]	; (8000768 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80005bc:	460b      	mov	r3, r1
 80005be:	00db      	lsls	r3, r3, #3
 80005c0:	1a5b      	subs	r3, r3, r1
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	4413      	add	r3, r2
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	08db      	lsrs	r3, r3, #3
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	f023 030f 	bic.w	r3, r3, #15
 80005d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  uint8_t type = Can1RxData[ri1][0];
 80005d4:	4b63      	ldr	r3, [pc, #396]	; (8000764 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	461a      	mov	r2, r3
 80005dc:	4b63      	ldr	r3, [pc, #396]	; (800076c <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 80005de:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 80005e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			  switch (functioncode) {
 80005e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005ea:	2b40      	cmp	r3, #64	; 0x40
 80005ec:	f000 816a 	beq.w	80008c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x35c>
 80005f0:	2bc0      	cmp	r3, #192	; 0xc0
 80005f2:	f040 81ef 	bne.w	80009d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x46c>
					switch (type & COMMAND_SPECIFIER) {
 80005f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80005fa:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80005fe:	2b20      	cmp	r3, #32
 8000600:	d003      	beq.n	800060a <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
 8000602:	2b40      	cmp	r3, #64	; 0x40
 8000604:	f000 80bc 	beq.w	8000780 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>
							break;
 8000608:	e15b      	b.n	80008c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x35a>
							index = *(uint16_t *)&Can1RxData[ri1][1];		/* read object index					*/
 800060a:	4b56      	ldr	r3, [pc, #344]	; (8000764 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	00db      	lsls	r3, r3, #3
 8000612:	3301      	adds	r3, #1
 8000614:	4a55      	ldr	r2, [pc, #340]	; (800076c <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000616:	4413      	add	r3, r2
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	84bb      	strh	r3, [r7, #36]	; 0x24
							subindex = Can1RxData[ri1][3];				/* read object subindex					*/
 800061c:	4b51      	ldr	r3, [pc, #324]	; (8000764 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	4a52      	ldr	r2, [pc, #328]	; (800076c <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	4413      	add	r3, r2
 8000628:	78db      	ldrb	r3, [r3, #3]
 800062a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
							if (type & EXPEDITED_BIT)			/* expedited transfer					*/
 800062e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	2b00      	cmp	r3, #0
 8000638:	f000 808e 	beq.w	8000758 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>
								switch (index) {
 800063c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800063e:	f242 0209 	movw	r2, #8201	; 0x2009
 8000642:	4293      	cmp	r3, r2
 8000644:	f040 808a 	bne.w	800075c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>
										  Debug_len =  sprintf(DebugBuf,"<= %s (%06lu)  0x%02lX 0x%02lX: 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X \r\n",StrFunctionCode[(functioncode>>4)],HAL_GetTick(),(Can1RxHeader[ri1].StdId &0x7F),((Can1RxHeader[ri1].StdId>>3) & 0xF0),Can1RxData[ri1][0],Can1RxData[ri1][1],Can1RxData[ri1][2],Can1RxData[ri1][3],Can1RxData[ri1][4],Can1RxData[ri1][5],Can1RxData[ri1][6],Can1RxData[ri1][7]);
 8000648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800064c:	091b      	lsrs	r3, r3, #4
 800064e:	b2db      	uxtb	r3, r3
 8000650:	461a      	mov	r2, r3
 8000652:	4613      	mov	r3, r2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4413      	add	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4a45      	ldr	r2, [pc, #276]	; (8000770 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 800065c:	189c      	adds	r4, r3, r2
 800065e:	f001 f9dd 	bl	8001a1c <HAL_GetTick>
 8000662:	4b40      	ldr	r3, [pc, #256]	; (8000764 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	4619      	mov	r1, r3
 800066a:	4a3f      	ldr	r2, [pc, #252]	; (8000768 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 800066c:	460b      	mov	r3, r1
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	1a5b      	subs	r3, r3, r1
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4413      	add	r3, r2
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800067c:	4b39      	ldr	r3, [pc, #228]	; (8000764 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	461d      	mov	r5, r3
 8000684:	4938      	ldr	r1, [pc, #224]	; (8000768 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000686:	462b      	mov	r3, r5
 8000688:	00db      	lsls	r3, r3, #3
 800068a:	1b5b      	subs	r3, r3, r5
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	440b      	add	r3, r1
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	08db      	lsrs	r3, r3, #3
 8000694:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8000698:	4b32      	ldr	r3, [pc, #200]	; (8000764 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	461d      	mov	r5, r3
 80006a0:	4b32      	ldr	r3, [pc, #200]	; (800076c <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 80006a2:	f813 3035 	ldrb.w	r3, [r3, r5, lsl #3]
 80006a6:	461e      	mov	r6, r3
 80006a8:	4b2e      	ldr	r3, [pc, #184]	; (8000764 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	4d2f      	ldr	r5, [pc, #188]	; (800076c <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 80006b0:	00db      	lsls	r3, r3, #3
 80006b2:	442b      	add	r3, r5
 80006b4:	785b      	ldrb	r3, [r3, #1]
 80006b6:	61bb      	str	r3, [r7, #24]
 80006b8:	4b2a      	ldr	r3, [pc, #168]	; (8000764 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	4d2b      	ldr	r5, [pc, #172]	; (800076c <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	442b      	add	r3, r5
 80006c4:	789b      	ldrb	r3, [r3, #2]
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	4b26      	ldr	r3, [pc, #152]	; (8000764 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4d27      	ldr	r5, [pc, #156]	; (800076c <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	442b      	add	r3, r5
 80006d4:	78db      	ldrb	r3, [r3, #3]
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	4d23      	ldr	r5, [pc, #140]	; (800076c <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	442b      	add	r3, r5
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	4d1f      	ldr	r5, [pc, #124]	; (800076c <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	442b      	add	r3, r5
 80006f4:	795b      	ldrb	r3, [r3, #5]
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4d1b      	ldr	r5, [pc, #108]	; (800076c <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	442b      	add	r3, r5
 8000704:	799b      	ldrb	r3, [r3, #6]
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	4d17      	ldr	r5, [pc, #92]	; (800076c <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	442b      	add	r3, r5
 8000714:	79db      	ldrb	r3, [r3, #7]
 8000716:	9309      	str	r3, [sp, #36]	; 0x24
 8000718:	687d      	ldr	r5, [r7, #4]
 800071a:	9508      	str	r5, [sp, #32]
 800071c:	68bd      	ldr	r5, [r7, #8]
 800071e:	9507      	str	r5, [sp, #28]
 8000720:	68fd      	ldr	r5, [r7, #12]
 8000722:	9506      	str	r5, [sp, #24]
 8000724:	693d      	ldr	r5, [r7, #16]
 8000726:	9505      	str	r5, [sp, #20]
 8000728:	697d      	ldr	r5, [r7, #20]
 800072a:	9504      	str	r5, [sp, #16]
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	9303      	str	r3, [sp, #12]
 8000730:	9602      	str	r6, [sp, #8]
 8000732:	9101      	str	r1, [sp, #4]
 8000734:	9200      	str	r2, [sp, #0]
 8000736:	4603      	mov	r3, r0
 8000738:	4622      	mov	r2, r4
 800073a:	490e      	ldr	r1, [pc, #56]	; (8000774 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 800073c:	480e      	ldr	r0, [pc, #56]	; (8000778 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800073e:	f008 f801 	bl	8008744 <siprintf>
 8000742:	4603      	mov	r3, r0
 8000744:	b29a      	uxth	r2, r3
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8000748:	801a      	strh	r2, [r3, #0]
										  CDC_Transmit_FS((uint8_t *)DebugBuf, Debug_len);
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	4619      	mov	r1, r3
 8000750:	4809      	ldr	r0, [pc, #36]	; (8000778 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000752:	f007 fb5b 	bl	8007e0c <CDC_Transmit_FS>
										break;
 8000756:	e002      	b.n	800075e <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
							}
 8000758:	bf00      	nop
 800075a:	e0b2      	b.n	80008c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x35a>
										break;
 800075c:	bf00      	nop
							break;
 800075e:	e0b0      	b.n	80008c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x35a>
 8000760:	20000c6c 	.word	0x20000c6c
 8000764:	20000332 	.word	0x20000332
 8000768:	20000af4 	.word	0x20000af4
 800076c:	200002b0 	.word	0x200002b0
 8000770:	20000008 	.word	0x20000008
 8000774:	08008fb8 	.word	0x08008fb8
 8000778:	20000678 	.word	0x20000678
 800077c:	20000348 	.word	0x20000348
							index = *(uint16_t *)&Can1RxData[ri1][1];		/* read object index					*/
 8000780:	4ba3      	ldr	r3, [pc, #652]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	3301      	adds	r3, #1
 800078a:	4aa2      	ldr	r2, [pc, #648]	; (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 800078c:	4413      	add	r3, r2
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	84bb      	strh	r3, [r7, #36]	; 0x24
							subindex = Can1RxData[ri1][3];				/* read object subindex					*/
 8000792:	4b9f      	ldr	r3, [pc, #636]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4a9e      	ldr	r2, [pc, #632]	; (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	4413      	add	r3, r2
 800079e:	78db      	ldrb	r3, [r3, #3]
 80007a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
							switch (index)
 80007a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007a6:	f5b3 4fc9 	cmp.w	r3, #25728	; 0x6480
 80007aa:	f040 8088 	bne.w	80008be <HAL_CAN_RxFifo0MsgPendingCallback+0x356>
									  Debug_len =  sprintf(DebugBuf,"<= %s (%06lu)  0x%02lX 0x%02lX: 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X \r\n",StrFunctionCode[(functioncode>>4)],HAL_GetTick(),(Can1RxHeader[ri1].StdId &0x7F),((Can1RxHeader[ri1].StdId>>3) & 0xF0),Can1RxData[ri1][0],Can1RxData[ri1][1],Can1RxData[ri1][2],Can1RxData[ri1][3],Can1RxData[ri1][4],Can1RxData[ri1][5],Can1RxData[ri1][6],Can1RxData[ri1][7]);
 80007ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007b2:	091b      	lsrs	r3, r3, #4
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	461a      	mov	r2, r3
 80007b8:	4613      	mov	r3, r2
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4413      	add	r3, r2
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	4a95      	ldr	r2, [pc, #596]	; (8000a18 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b0>)
 80007c2:	189c      	adds	r4, r3, r2
 80007c4:	f001 f92a 	bl	8001a1c <HAL_GetTick>
 80007c8:	4b91      	ldr	r3, [pc, #580]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	4619      	mov	r1, r3
 80007d0:	4a92      	ldr	r2, [pc, #584]	; (8000a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x4b4>)
 80007d2:	460b      	mov	r3, r1
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	1a5b      	subs	r3, r3, r1
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4413      	add	r3, r2
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80007e2:	4b8b      	ldr	r3, [pc, #556]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	461d      	mov	r5, r3
 80007ea:	498c      	ldr	r1, [pc, #560]	; (8000a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x4b4>)
 80007ec:	462b      	mov	r3, r5
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	1b5b      	subs	r3, r3, r5
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	440b      	add	r3, r1
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	08db      	lsrs	r3, r3, #3
 80007fa:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 80007fe:	4b84      	ldr	r3, [pc, #528]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	461d      	mov	r5, r3
 8000806:	4b83      	ldr	r3, [pc, #524]	; (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8000808:	f813 3035 	ldrb.w	r3, [r3, r5, lsl #3]
 800080c:	461e      	mov	r6, r3
 800080e:	4b80      	ldr	r3, [pc, #512]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	4d7f      	ldr	r5, [pc, #508]	; (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8000816:	00db      	lsls	r3, r3, #3
 8000818:	442b      	add	r3, r5
 800081a:	785b      	ldrb	r3, [r3, #1]
 800081c:	61bb      	str	r3, [r7, #24]
 800081e:	4b7c      	ldr	r3, [pc, #496]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	b2db      	uxtb	r3, r3
 8000824:	4d7b      	ldr	r5, [pc, #492]	; (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8000826:	00db      	lsls	r3, r3, #3
 8000828:	442b      	add	r3, r5
 800082a:	789b      	ldrb	r3, [r3, #2]
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	4b78      	ldr	r3, [pc, #480]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b2db      	uxtb	r3, r3
 8000834:	4d77      	ldr	r5, [pc, #476]	; (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8000836:	00db      	lsls	r3, r3, #3
 8000838:	442b      	add	r3, r5
 800083a:	78db      	ldrb	r3, [r3, #3]
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b74      	ldr	r3, [pc, #464]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4d73      	ldr	r5, [pc, #460]	; (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	442b      	add	r3, r5
 800084a:	791b      	ldrb	r3, [r3, #4]
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b70      	ldr	r3, [pc, #448]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4d6f      	ldr	r5, [pc, #444]	; (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8000856:	00db      	lsls	r3, r3, #3
 8000858:	442b      	add	r3, r5
 800085a:	795b      	ldrb	r3, [r3, #5]
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	4b6c      	ldr	r3, [pc, #432]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	4d6b      	ldr	r5, [pc, #428]	; (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8000866:	00db      	lsls	r3, r3, #3
 8000868:	442b      	add	r3, r5
 800086a:	799b      	ldrb	r3, [r3, #6]
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b68      	ldr	r3, [pc, #416]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	4d67      	ldr	r5, [pc, #412]	; (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 8000876:	00db      	lsls	r3, r3, #3
 8000878:	442b      	add	r3, r5
 800087a:	79db      	ldrb	r3, [r3, #7]
 800087c:	9309      	str	r3, [sp, #36]	; 0x24
 800087e:	687d      	ldr	r5, [r7, #4]
 8000880:	9508      	str	r5, [sp, #32]
 8000882:	68bd      	ldr	r5, [r7, #8]
 8000884:	9507      	str	r5, [sp, #28]
 8000886:	68fd      	ldr	r5, [r7, #12]
 8000888:	9506      	str	r5, [sp, #24]
 800088a:	693d      	ldr	r5, [r7, #16]
 800088c:	9505      	str	r5, [sp, #20]
 800088e:	697d      	ldr	r5, [r7, #20]
 8000890:	9504      	str	r5, [sp, #16]
 8000892:	69bb      	ldr	r3, [r7, #24]
 8000894:	9303      	str	r3, [sp, #12]
 8000896:	9602      	str	r6, [sp, #8]
 8000898:	9101      	str	r1, [sp, #4]
 800089a:	9200      	str	r2, [sp, #0]
 800089c:	4603      	mov	r3, r0
 800089e:	4622      	mov	r2, r4
 80008a0:	495f      	ldr	r1, [pc, #380]	; (8000a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b8>)
 80008a2:	4860      	ldr	r0, [pc, #384]	; (8000a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x4bc>)
 80008a4:	f007 ff4e 	bl	8008744 <siprintf>
 80008a8:	4603      	mov	r3, r0
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	4b5e      	ldr	r3, [pc, #376]	; (8000a28 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c0>)
 80008ae:	801a      	strh	r2, [r3, #0]
									  CDC_Transmit_FS((uint8_t *)DebugBuf, Debug_len);
 80008b0:	4b5d      	ldr	r3, [pc, #372]	; (8000a28 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c0>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	485b      	ldr	r0, [pc, #364]	; (8000a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x4bc>)
 80008b8:	f007 faa8 	bl	8007e0c <CDC_Transmit_FS>
									break;
 80008bc:	e000      	b.n	80008c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x358>
									break;
 80008be:	bf00      	nop
							break;
 80008c0:	bf00      	nop
					break;
 80008c2:	e088      	b.n	80009d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x46e>
									  Debug_len =  sprintf(DebugBuf,"<= %s (%06lu)  0x%02lX 0x%02lX: 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X \r\n",StrFunctionCode[(functioncode>>4)],HAL_GetTick(),(Can1RxHeader[ri1].StdId &0x7F),((Can1RxHeader[ri1].StdId>>3) & 0xF0),Can1RxData[ri1][0],Can1RxData[ri1][1],Can1RxData[ri1][2],Can1RxData[ri1][3],Can1RxData[ri1][4],Can1RxData[ri1][5],Can1RxData[ri1][6],Can1RxData[ri1][7]);
 80008c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008c8:	091b      	lsrs	r3, r3, #4
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	461a      	mov	r2, r3
 80008ce:	4613      	mov	r3, r2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	4413      	add	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4a50      	ldr	r2, [pc, #320]	; (8000a18 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b0>)
 80008d8:	189c      	adds	r4, r3, r2
 80008da:	f001 f89f 	bl	8001a1c <HAL_GetTick>
 80008de:	4b4c      	ldr	r3, [pc, #304]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	4619      	mov	r1, r3
 80008e6:	4a4d      	ldr	r2, [pc, #308]	; (8000a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x4b4>)
 80008e8:	460b      	mov	r3, r1
 80008ea:	00db      	lsls	r3, r3, #3
 80008ec:	1a5b      	subs	r3, r3, r1
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	4413      	add	r3, r2
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80008f8:	4b45      	ldr	r3, [pc, #276]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	461d      	mov	r5, r3
 8000900:	4946      	ldr	r1, [pc, #280]	; (8000a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x4b4>)
 8000902:	462b      	mov	r3, r5
 8000904:	00db      	lsls	r3, r3, #3
 8000906:	1b5b      	subs	r3, r3, r5
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	440b      	add	r3, r1
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	08db      	lsrs	r3, r3, #3
 8000910:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8000914:	4b3e      	ldr	r3, [pc, #248]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	461d      	mov	r5, r3
 800091c:	4b3d      	ldr	r3, [pc, #244]	; (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 800091e:	f813 3035 	ldrb.w	r3, [r3, r5, lsl #3]
 8000922:	461e      	mov	r6, r3
 8000924:	4b3a      	ldr	r3, [pc, #232]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	4d3a      	ldr	r5, [pc, #232]	; (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	442b      	add	r3, r5
 8000930:	785b      	ldrb	r3, [r3, #1]
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	4b36      	ldr	r3, [pc, #216]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4d36      	ldr	r5, [pc, #216]	; (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	442b      	add	r3, r5
 8000940:	789b      	ldrb	r3, [r3, #2]
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	4b32      	ldr	r3, [pc, #200]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	4d32      	ldr	r5, [pc, #200]	; (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 800094c:	00db      	lsls	r3, r3, #3
 800094e:	442b      	add	r3, r5
 8000950:	78db      	ldrb	r3, [r3, #3]
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	4d2e      	ldr	r5, [pc, #184]	; (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 800095c:	00db      	lsls	r3, r3, #3
 800095e:	442b      	add	r3, r5
 8000960:	791b      	ldrb	r3, [r3, #4]
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4d2a      	ldr	r5, [pc, #168]	; (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	442b      	add	r3, r5
 8000970:	795b      	ldrb	r3, [r3, #5]
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	4d26      	ldr	r5, [pc, #152]	; (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	442b      	add	r3, r5
 8000980:	799b      	ldrb	r3, [r3, #6]
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	4d22      	ldr	r5, [pc, #136]	; (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ac>)
 800098c:	00db      	lsls	r3, r3, #3
 800098e:	442b      	add	r3, r5
 8000990:	79db      	ldrb	r3, [r3, #7]
 8000992:	9309      	str	r3, [sp, #36]	; 0x24
 8000994:	687d      	ldr	r5, [r7, #4]
 8000996:	9508      	str	r5, [sp, #32]
 8000998:	68bd      	ldr	r5, [r7, #8]
 800099a:	9507      	str	r5, [sp, #28]
 800099c:	68fd      	ldr	r5, [r7, #12]
 800099e:	9506      	str	r5, [sp, #24]
 80009a0:	693d      	ldr	r5, [r7, #16]
 80009a2:	9505      	str	r5, [sp, #20]
 80009a4:	697d      	ldr	r5, [r7, #20]
 80009a6:	9504      	str	r5, [sp, #16]
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	9303      	str	r3, [sp, #12]
 80009ac:	9602      	str	r6, [sp, #8]
 80009ae:	9101      	str	r1, [sp, #4]
 80009b0:	9200      	str	r2, [sp, #0]
 80009b2:	4603      	mov	r3, r0
 80009b4:	4622      	mov	r2, r4
 80009b6:	491a      	ldr	r1, [pc, #104]	; (8000a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x4b8>)
 80009b8:	481a      	ldr	r0, [pc, #104]	; (8000a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x4bc>)
 80009ba:	f007 fec3 	bl	8008744 <siprintf>
 80009be:	4603      	mov	r3, r0
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c0>)
 80009c4:	801a      	strh	r2, [r3, #0]
									  CDC_Transmit_FS((uint8_t *)DebugBuf, Debug_len);
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c0>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	4619      	mov	r1, r3
 80009cc:	4815      	ldr	r0, [pc, #84]	; (8000a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x4bc>)
 80009ce:	f007 fa1d 	bl	8007e0c <CDC_Transmit_FS>
					  break;
 80009d2:	e000      	b.n	80009d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x46e>
					break;
 80009d4:	bf00      	nop
			  RxCan1_cnt ++;
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c4>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	3301      	adds	r3, #1
 80009dc:	4a13      	ldr	r2, [pc, #76]	; (8000a2c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c4>)
 80009de:	6013      	str	r3, [r2, #0]
			  rc1++;
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c8>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	3301      	adds	r3, #1
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c8>)
 80009ec:	701a      	strb	r2, [r3, #0]
			  if(ri1 == (CAN_RX_SIZE -1)) { ri1 =0;}
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b07      	cmp	r3, #7
 80009f6:	d103      	bne.n	8000a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x498>
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
}
 80009fe:	e0eb      	b.n	8000bd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x670>
			  else ri1++;
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	3301      	adds	r3, #1
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4b01      	ldr	r3, [pc, #4]	; (8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8000a0c:	701a      	strb	r2, [r3, #0]
}
 8000a0e:	e0e3      	b.n	8000bd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x670>
 8000a10:	20000332 	.word	0x20000332
 8000a14:	200002b0 	.word	0x200002b0
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	20000af4 	.word	0x20000af4
 8000a20:	08008fb8 	.word	0x08008fb8
 8000a24:	20000678 	.word	0x20000678
 8000a28:	20000348 	.word	0x20000348
 8000a2c:	20000338 	.word	0x20000338
 8000a30:	20000330 	.word	0x20000330
	else	if (hcan->Instance == hcan2.Instance)
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4b69      	ldr	r3, [pc, #420]	; (8000be0 <HAL_CAN_RxFifo0MsgPendingCallback+0x678>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	f040 80cb 	bne.w	8000bd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x670>
		  if (HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &Can2RxHeader[ri2], Can2RxData[ri2]) != HAL_OK)
 8000a42:	4b68      	ldr	r3, [pc, #416]	; (8000be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x67c>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	1a9b      	subs	r3, r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	4a65      	ldr	r2, [pc, #404]	; (8000be8 <HAL_CAN_RxFifo0MsgPendingCallback+0x680>)
 8000a54:	441a      	add	r2, r3
 8000a56:	4b63      	ldr	r3, [pc, #396]	; (8000be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x67c>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	00db      	lsls	r3, r3, #3
 8000a5e:	4963      	ldr	r1, [pc, #396]	; (8000bec <HAL_CAN_RxFifo0MsgPendingCallback+0x684>)
 8000a60:	440b      	add	r3, r1
 8000a62:	2100      	movs	r1, #0
 8000a64:	485e      	ldr	r0, [pc, #376]	; (8000be0 <HAL_CAN_RxFifo0MsgPendingCallback+0x678>)
 8000a66:	f001 fb04 	bl	8002072 <HAL_CAN_GetRxMessage>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d002      	beq.n	8000a76 <HAL_CAN_RxFifo0MsgPendingCallback+0x50e>
			  Error_Handler();
 8000a70:	f000 fcd0 	bl	8001414 <Error_Handler>
}
 8000a74:	e0b0      	b.n	8000bd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x670>
			  Debug_len =  sprintf(DebugBuf,"=> %s (%06lu)  0x%02lX 0x%02lX: 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X \r\n",StrFunctionCode[(Can2RxHeader[ri2].StdId>>7)&0x0F],HAL_GetTick(),(Can2RxHeader[ri2].StdId &0x7F),((Can2RxHeader[ri2].StdId>>3) & 0xF0),Can2RxData[ri2][0],Can2RxData[ri2][1],Can2RxData[ri2][2],Can2RxData[ri2][3],Can2RxData[ri2][4],Can2RxData[ri2][5],Can2RxData[ri2][6],Can2RxData[ri2][7]);
 8000a76:	4b5b      	ldr	r3, [pc, #364]	; (8000be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x67c>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4a5a      	ldr	r2, [pc, #360]	; (8000be8 <HAL_CAN_RxFifo0MsgPendingCallback+0x680>)
 8000a80:	460b      	mov	r3, r1
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	1a5b      	subs	r3, r3, r1
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	09db      	lsrs	r3, r3, #7
 8000a8e:	f003 020f 	and.w	r2, r3, #15
 8000a92:	4613      	mov	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	4413      	add	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4a55      	ldr	r2, [pc, #340]	; (8000bf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x688>)
 8000a9c:	189c      	adds	r4, r3, r2
 8000a9e:	f000 ffbd 	bl	8001a1c <HAL_GetTick>
 8000aa2:	4b50      	ldr	r3, [pc, #320]	; (8000be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x67c>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4a4f      	ldr	r2, [pc, #316]	; (8000be8 <HAL_CAN_RxFifo0MsgPendingCallback+0x680>)
 8000aac:	460b      	mov	r3, r1
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	1a5b      	subs	r3, r3, r1
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4413      	add	r3, r2
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000abc:	4b49      	ldr	r3, [pc, #292]	; (8000be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x67c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	461d      	mov	r5, r3
 8000ac4:	4948      	ldr	r1, [pc, #288]	; (8000be8 <HAL_CAN_RxFifo0MsgPendingCallback+0x680>)
 8000ac6:	462b      	mov	r3, r5
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	1b5b      	subs	r3, r3, r5
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	440b      	add	r3, r1
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	08db      	lsrs	r3, r3, #3
 8000ad4:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8000ad8:	4b42      	ldr	r3, [pc, #264]	; (8000be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x67c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	461d      	mov	r5, r3
 8000ae0:	4b42      	ldr	r3, [pc, #264]	; (8000bec <HAL_CAN_RxFifo0MsgPendingCallback+0x684>)
 8000ae2:	f813 3035 	ldrb.w	r3, [r3, r5, lsl #3]
 8000ae6:	461e      	mov	r6, r3
 8000ae8:	4b3e      	ldr	r3, [pc, #248]	; (8000be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x67c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	4d3f      	ldr	r5, [pc, #252]	; (8000bec <HAL_CAN_RxFifo0MsgPendingCallback+0x684>)
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	442b      	add	r3, r5
 8000af4:	785b      	ldrb	r3, [r3, #1]
 8000af6:	61bb      	str	r3, [r7, #24]
 8000af8:	4b3a      	ldr	r3, [pc, #232]	; (8000be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x67c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	4d3b      	ldr	r5, [pc, #236]	; (8000bec <HAL_CAN_RxFifo0MsgPendingCallback+0x684>)
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	442b      	add	r3, r5
 8000b04:	789b      	ldrb	r3, [r3, #2]
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	4b36      	ldr	r3, [pc, #216]	; (8000be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x67c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	4d37      	ldr	r5, [pc, #220]	; (8000bec <HAL_CAN_RxFifo0MsgPendingCallback+0x684>)
 8000b10:	00db      	lsls	r3, r3, #3
 8000b12:	442b      	add	r3, r5
 8000b14:	78db      	ldrb	r3, [r3, #3]
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	4b32      	ldr	r3, [pc, #200]	; (8000be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x67c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	4d33      	ldr	r5, [pc, #204]	; (8000bec <HAL_CAN_RxFifo0MsgPendingCallback+0x684>)
 8000b20:	00db      	lsls	r3, r3, #3
 8000b22:	442b      	add	r3, r5
 8000b24:	791b      	ldrb	r3, [r3, #4]
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	4b2e      	ldr	r3, [pc, #184]	; (8000be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x67c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	4d2f      	ldr	r5, [pc, #188]	; (8000bec <HAL_CAN_RxFifo0MsgPendingCallback+0x684>)
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	442b      	add	r3, r5
 8000b34:	795b      	ldrb	r3, [r3, #5]
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x67c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	4d2b      	ldr	r5, [pc, #172]	; (8000bec <HAL_CAN_RxFifo0MsgPendingCallback+0x684>)
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	442b      	add	r3, r5
 8000b44:	799b      	ldrb	r3, [r3, #6]
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x67c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	4d27      	ldr	r5, [pc, #156]	; (8000bec <HAL_CAN_RxFifo0MsgPendingCallback+0x684>)
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	442b      	add	r3, r5
 8000b54:	79db      	ldrb	r3, [r3, #7]
 8000b56:	9309      	str	r3, [sp, #36]	; 0x24
 8000b58:	687d      	ldr	r5, [r7, #4]
 8000b5a:	9508      	str	r5, [sp, #32]
 8000b5c:	68bd      	ldr	r5, [r7, #8]
 8000b5e:	9507      	str	r5, [sp, #28]
 8000b60:	68fd      	ldr	r5, [r7, #12]
 8000b62:	9506      	str	r5, [sp, #24]
 8000b64:	693d      	ldr	r5, [r7, #16]
 8000b66:	9505      	str	r5, [sp, #20]
 8000b68:	697d      	ldr	r5, [r7, #20]
 8000b6a:	9504      	str	r5, [sp, #16]
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	9303      	str	r3, [sp, #12]
 8000b70:	9602      	str	r6, [sp, #8]
 8000b72:	9101      	str	r1, [sp, #4]
 8000b74:	9200      	str	r2, [sp, #0]
 8000b76:	4603      	mov	r3, r0
 8000b78:	4622      	mov	r2, r4
 8000b7a:	491e      	ldr	r1, [pc, #120]	; (8000bf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x68c>)
 8000b7c:	481e      	ldr	r0, [pc, #120]	; (8000bf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x690>)
 8000b7e:	f007 fde1 	bl	8008744 <siprintf>
 8000b82:	4603      	mov	r3, r0
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x694>)
 8000b88:	801a      	strh	r2, [r3, #0]
			  CDC_Transmit_FS((uint8_t *)DebugBuf, Debug_len);
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x694>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4819      	ldr	r0, [pc, #100]	; (8000bf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x690>)
 8000b92:	f007 f93b 	bl	8007e0c <CDC_Transmit_FS>
			  HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8000b96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b9a:	4819      	ldr	r0, [pc, #100]	; (8000c00 <HAL_CAN_RxFifo0MsgPendingCallback+0x698>)
 8000b9c:	f002 f879 	bl	8002c92 <HAL_GPIO_TogglePin>
			  RxCan2_cnt ++;
 8000ba0:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <HAL_CAN_RxFifo0MsgPendingCallback+0x69c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	4a17      	ldr	r2, [pc, #92]	; (8000c04 <HAL_CAN_RxFifo0MsgPendingCallback+0x69c>)
 8000ba8:	6013      	str	r3, [r2, #0]
			  rc2++;
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a0>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a0>)
 8000bb6:	701a      	strb	r2, [r3, #0]
			  if(ri2 == (CAN_RX_SIZE -1)) { ri2 =0;}
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x67c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b07      	cmp	r3, #7
 8000bc0:	d103      	bne.n	8000bca <HAL_CAN_RxFifo0MsgPendingCallback+0x662>
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x67c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
}
 8000bc8:	e006      	b.n	8000bd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x670>
			  else ri2++;
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x67c>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x67c>)
 8000bd6:	701a      	strb	r2, [r3, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	372c      	adds	r7, #44	; 0x2c
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be0:	20000bd4 	.word	0x20000bd4
 8000be4:	20000333 	.word	0x20000333
 8000be8:	20000598 	.word	0x20000598
 8000bec:	200002f0 	.word	0x200002f0
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	08009014 	.word	0x08009014
 8000bf8:	20000678 	.word	0x20000678
 8000bfc:	20000348 	.word	0x20000348
 8000c00:	40020c00 	.word	0x40020c00
 8000c04:	2000033c 	.word	0x2000033c
 8000c08:	20000331 	.word	0x20000331

08000c0c <HAL_CAN_TxMailbox0CompleteCallback>:


int CNT_interrup[6] = {0};
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == hcan1.Instance)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_CAN_TxMailbox0CompleteCallback+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d10d      	bne.n	8000c3c <HAL_CAN_TxMailbox0CompleteCallback+0x30>
	{
		TxCan1_cnt++;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_CAN_TxMailbox0CompleteCallback+0x68>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	3301      	adds	r3, #1
 8000c26:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <HAL_CAN_TxMailbox0CompleteCallback+0x68>)
 8000c28:	6013      	str	r3, [r2, #0]
		Can1_tx_done = 1;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <HAL_CAN_TxMailbox0CompleteCallback+0x6c>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	701a      	strb	r2, [r3, #0]
		CNT_interrup[0]++;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_CAN_TxMailbox0CompleteCallback+0x70>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	4a11      	ldr	r2, [pc, #68]	; (8000c7c <HAL_CAN_TxMailbox0CompleteCallback+0x70>)
 8000c38:	6013      	str	r3, [r2, #0]
	{
		Can2_tx_done = 1;
		TxCan2_cnt++;
		CNT_interrup[1]++;
	}
}
 8000c3a:	e012      	b.n	8000c62 <HAL_CAN_TxMailbox0CompleteCallback+0x56>
	else if(hcan->Instance == hcan2.Instance)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <HAL_CAN_TxMailbox0CompleteCallback+0x74>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d10c      	bne.n	8000c62 <HAL_CAN_TxMailbox0CompleteCallback+0x56>
		Can2_tx_done = 1;
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_CAN_TxMailbox0CompleteCallback+0x78>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
		TxCan2_cnt++;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_CAN_TxMailbox0CompleteCallback+0x7c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	3301      	adds	r3, #1
 8000c54:	4a0c      	ldr	r2, [pc, #48]	; (8000c88 <HAL_CAN_TxMailbox0CompleteCallback+0x7c>)
 8000c56:	6013      	str	r3, [r2, #0]
		CNT_interrup[1]++;
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <HAL_CAN_TxMailbox0CompleteCallback+0x70>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <HAL_CAN_TxMailbox0CompleteCallback+0x70>)
 8000c60:	6053      	str	r3, [r2, #4]
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000c6c 	.word	0x20000c6c
 8000c74:	20000340 	.word	0x20000340
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	2000034c 	.word	0x2000034c
 8000c80:	20000bd4 	.word	0x20000bd4
 8000c84:	20000001 	.word	0x20000001
 8000c88:	20000344 	.word	0x20000344

08000c8c <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == hcan1.Instance)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_CAN_TxMailbox1CompleteCallback+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d10d      	bne.n	8000cbc <HAL_CAN_TxMailbox1CompleteCallback+0x30>
	{
		TxCan1_cnt++;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <HAL_CAN_TxMailbox1CompleteCallback+0x68>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	4a13      	ldr	r2, [pc, #76]	; (8000cf4 <HAL_CAN_TxMailbox1CompleteCallback+0x68>)
 8000ca8:	6013      	str	r3, [r2, #0]
		Can1_tx_done = 1;
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <HAL_CAN_TxMailbox1CompleteCallback+0x6c>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	701a      	strb	r2, [r3, #0]
		CNT_interrup[2]++;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_CAN_TxMailbox1CompleteCallback+0x70>)
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	4a11      	ldr	r2, [pc, #68]	; (8000cfc <HAL_CAN_TxMailbox1CompleteCallback+0x70>)
 8000cb8:	6093      	str	r3, [r2, #8]
	{
		Can2_tx_done = 1;
		TxCan2_cnt++;
		CNT_interrup[3]++;
	}
}
 8000cba:	e012      	b.n	8000ce2 <HAL_CAN_TxMailbox1CompleteCallback+0x56>
	else if(hcan->Instance == hcan2.Instance)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_CAN_TxMailbox1CompleteCallback+0x74>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d10c      	bne.n	8000ce2 <HAL_CAN_TxMailbox1CompleteCallback+0x56>
		Can2_tx_done = 1;
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_CAN_TxMailbox1CompleteCallback+0x78>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
		TxCan2_cnt++;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_CAN_TxMailbox1CompleteCallback+0x7c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	4a0c      	ldr	r2, [pc, #48]	; (8000d08 <HAL_CAN_TxMailbox1CompleteCallback+0x7c>)
 8000cd6:	6013      	str	r3, [r2, #0]
		CNT_interrup[3]++;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_CAN_TxMailbox1CompleteCallback+0x70>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_CAN_TxMailbox1CompleteCallback+0x70>)
 8000ce0:	60d3      	str	r3, [r2, #12]
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000c6c 	.word	0x20000c6c
 8000cf4:	20000340 	.word	0x20000340
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	2000034c 	.word	0x2000034c
 8000d00:	20000bd4 	.word	0x20000bd4
 8000d04:	20000001 	.word	0x20000001
 8000d08:	20000344 	.word	0x20000344

08000d0c <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == hcan1.Instance)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_CAN_TxMailbox2CompleteCallback+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d10d      	bne.n	8000d3c <HAL_CAN_TxMailbox2CompleteCallback+0x30>
	{
		TxCan1_cnt++;
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <HAL_CAN_TxMailbox2CompleteCallback+0x68>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	3301      	adds	r3, #1
 8000d26:	4a13      	ldr	r2, [pc, #76]	; (8000d74 <HAL_CAN_TxMailbox2CompleteCallback+0x68>)
 8000d28:	6013      	str	r3, [r2, #0]
		Can1_tx_done = 1;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <HAL_CAN_TxMailbox2CompleteCallback+0x6c>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
		CNT_interrup[4]++;
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_CAN_TxMailbox2CompleteCallback+0x70>)
 8000d32:	691b      	ldr	r3, [r3, #16]
 8000d34:	3301      	adds	r3, #1
 8000d36:	4a11      	ldr	r2, [pc, #68]	; (8000d7c <HAL_CAN_TxMailbox2CompleteCallback+0x70>)
 8000d38:	6113      	str	r3, [r2, #16]
		Can2_tx_done = 1;
		TxCan2_cnt++;
		CNT_interrup[5]++;
	}

}
 8000d3a:	e012      	b.n	8000d62 <HAL_CAN_TxMailbox2CompleteCallback+0x56>
	else if(hcan->Instance == hcan2.Instance)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <HAL_CAN_TxMailbox2CompleteCallback+0x74>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d10c      	bne.n	8000d62 <HAL_CAN_TxMailbox2CompleteCallback+0x56>
		Can2_tx_done = 1;
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_CAN_TxMailbox2CompleteCallback+0x78>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
		TxCan2_cnt++;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_CAN_TxMailbox2CompleteCallback+0x7c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	3301      	adds	r3, #1
 8000d54:	4a0c      	ldr	r2, [pc, #48]	; (8000d88 <HAL_CAN_TxMailbox2CompleteCallback+0x7c>)
 8000d56:	6013      	str	r3, [r2, #0]
		CNT_interrup[5]++;
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_CAN_TxMailbox2CompleteCallback+0x70>)
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_CAN_TxMailbox2CompleteCallback+0x70>)
 8000d60:	6153      	str	r3, [r2, #20]
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000c6c 	.word	0x20000c6c
 8000d74:	20000340 	.word	0x20000340
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	2000034c 	.word	0x2000034c
 8000d80:	20000bd4 	.word	0x20000bd4
 8000d84:	20000001 	.word	0x20000001
 8000d88:	20000344 	.word	0x20000344

08000d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08e      	sub	sp, #56	; 0x38
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d92:	f000 fddd 	bl	8001950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d96:	f000 f8e3 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9a:	f000 fa1d 	bl	80011d8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000d9e:	f000 f94b 	bl	8001038 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000da2:	f000 f97f 	bl	80010a4 <MX_CAN2_Init>
  MX_I2C1_Init();
 8000da6:	f000 f9b3 	bl	8001110 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000daa:	f000 f9df 	bl	800116c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000dae:	f006 ff6f 	bl	8007c90 <MX_USB_DEVICE_Init>
//  MX_WWDG_Init();
//  MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = 0x00;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIdLow = 0x0000;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterActivation = ENABLE;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.SlaveStartFilterBank = 14;
 8000dd6:	230e      	movs	r3, #14
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28

	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4857      	ldr	r0, [pc, #348]	; (8000f3c <main+0x1b0>)
 8000de0:	f000 ff48 	bl	8001c74 <HAL_CAN_ConfigFilter>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <main+0x62>
	{
	/* Filter configuration Error */
		Error_Handler();
 8000dea:	f000 fb13 	bl	8001414 <Error_Handler>
	}
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterBank = 15;
 8000df2:	230f      	movs	r3, #15
 8000df4:	61bb      	str	r3, [r7, #24]
	if(HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4851      	ldr	r0, [pc, #324]	; (8000f40 <main+0x1b4>)
 8000dfc:	f000 ff3a 	bl	8001c74 <HAL_CAN_ConfigFilter>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <main+0x7e>
	{
	/* Filter configuration Error */
		Error_Handler();
 8000e06:	f000 fb05 	bl	8001414 <Error_Handler>
	}
	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000e0a:	484c      	ldr	r0, [pc, #304]	; (8000f3c <main+0x1b0>)
 8000e0c:	f001 f812 	bl	8001e34 <HAL_CAN_Start>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <main+0x8e>
	{
	  /* Start Error */
	  Error_Handler();
 8000e16:	f000 fafd 	bl	8001414 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000e1a:	2102      	movs	r1, #2
 8000e1c:	4847      	ldr	r0, [pc, #284]	; (8000f3c <main+0x1b0>)
 8000e1e:	f001 fa3a 	bl	8002296 <HAL_CAN_ActivateNotification>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <main+0xa0>
	{
	/* Notification Error */
		Error_Handler();
 8000e28:	f000 faf4 	bl	8001414 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	4843      	ldr	r0, [pc, #268]	; (8000f3c <main+0x1b0>)
 8000e30:	f001 fa31 	bl	8002296 <HAL_CAN_ActivateNotification>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <main+0xb2>
	{
	/* Notification Error */
		Error_Handler();
 8000e3a:	f000 faeb 	bl	8001414 <Error_Handler>
	}
	if (HAL_CAN_Start(&hcan2) != HAL_OK)
 8000e3e:	4840      	ldr	r0, [pc, #256]	; (8000f40 <main+0x1b4>)
 8000e40:	f000 fff8 	bl	8001e34 <HAL_CAN_Start>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <main+0xc2>
	{
	  /* Start Error */
	  Error_Handler();
 8000e4a:	f000 fae3 	bl	8001414 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000e4e:	2102      	movs	r1, #2
 8000e50:	483b      	ldr	r0, [pc, #236]	; (8000f40 <main+0x1b4>)
 8000e52:	f001 fa20 	bl	8002296 <HAL_CAN_ActivateNotification>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <main+0xd4>
	{
	/* Notification Error */
		Error_Handler();
 8000e5c:	f000 fada 	bl	8001414 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8000e60:	2101      	movs	r1, #1
 8000e62:	4837      	ldr	r0, [pc, #220]	; (8000f40 <main+0x1b4>)
 8000e64:	f001 fa17 	bl	8002296 <HAL_CAN_ActivateNotification>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <main+0xe6>
	{
	/* Notification Error */
		Error_Handler();
 8000e6e:	f000 fad1 	bl	8001414 <Error_Handler>
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t DebugTime =0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Can2_tim  =0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30

  while (1)
  {
	  	  if(HAL_GetTick() > Can2_tim)
 8000e7a:	f000 fdcf 	bl	8001a1c <HAL_GetTick>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d24c      	bcs.n	8000f20 <main+0x194>
	  	  {
	  		  CanTxHeader.StdId = 10;
 8000e86:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <main+0x1b8>)
 8000e88:	220a      	movs	r2, #10
 8000e8a:	601a      	str	r2, [r3, #0]
	  		  CanTxHeader.RTR = CAN_RTR_DATA;
 8000e8c:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <main+0x1b8>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
	  		  CanTxHeader.IDE = CAN_ID_STD;
 8000e92:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <main+0x1b8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
	  		  CanTxHeader.DLC = 8;
 8000e98:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <main+0x1b8>)
 8000e9a:	2208      	movs	r2, #8
 8000e9c:	611a      	str	r2, [r3, #16]
	  		  CanTxHeader.TransmitGlobalTime = DISABLE;
 8000e9e:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <main+0x1b8>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	751a      	strb	r2, [r3, #20]
	  		  for(int i=0;i<8;i++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ea8:	e00d      	b.n	8000ec6 <main+0x13a>
	  		  {
	  			  CanTxData[i]++;
 8000eaa:	4a27      	ldr	r2, [pc, #156]	; (8000f48 <main+0x1bc>)
 8000eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eae:	4413      	add	r3, r2
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	b2d9      	uxtb	r1, r3
 8000eb6:	4a24      	ldr	r2, [pc, #144]	; (8000f48 <main+0x1bc>)
 8000eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eba:	4413      	add	r3, r2
 8000ebc:	460a      	mov	r2, r1
 8000ebe:	701a      	strb	r2, [r3, #0]
	  		  for(int i=0;i<8;i++)
 8000ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec8:	2b07      	cmp	r3, #7
 8000eca:	ddee      	ble.n	8000eaa <main+0x11e>
	  		  }
	  		  if(HAL_CAN_AddTxMessage(&hcan2, &CanTxHeader, CanTxData, &Tx1Mailbox) != HAL_OK)
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <main+0x1c0>)
 8000ece:	4a1e      	ldr	r2, [pc, #120]	; (8000f48 <main+0x1bc>)
 8000ed0:	491c      	ldr	r1, [pc, #112]	; (8000f44 <main+0x1b8>)
 8000ed2:	481b      	ldr	r0, [pc, #108]	; (8000f40 <main+0x1b4>)
 8000ed4:	f000 fff2 	bl	8001ebc <HAL_CAN_AddTxMessage>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d119      	bne.n	8000f12 <main+0x186>
	  			/* Transmission request Error */
	  			//Error_Handler();
	  		  }
	  		  else
	  		  {
	  			  Can2_tx_done =0;
 8000ede:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <main+0x1c4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
	  			  if(ro1 == (CAN_RX_SIZE -1)) { ro1 =0;}
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <main+0x1c8>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b07      	cmp	r3, #7
 8000eec:	d103      	bne.n	8000ef6 <main+0x16a>
 8000eee:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <main+0x1c8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
 8000ef4:	e006      	b.n	8000f04 <main+0x178>
	  			  else ro1++;
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <main+0x1c8>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	3301      	adds	r3, #1
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <main+0x1c8>)
 8000f02:	701a      	strb	r2, [r3, #0]
	  			  rc1--;
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <main+0x1cc>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <main+0x1cc>)
 8000f10:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  Can2_tim = HAL_GetTick()+ time_delay;
 8000f12:	f000 fd83 	bl	8001a1c <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <main+0x1d0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	633b      	str	r3, [r7, #48]	; 0x30
//			  if(ro2 == (CAN_RX_SIZE -1)) { ro2 =0;}
//			  else ro2++;
//			  rc2--;
//		  }
//	  }
	  if(HAL_GetTick() > DebugTime)
 8000f20:	f000 fd7c 	bl	8001a1c <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d2a6      	bcs.n	8000e7a <main+0xee>
	  {
		  DebugTime = HAL_GetTick() +500;
 8000f2c:	f000 fd76 	bl	8001a1c <HAL_GetTick>
 8000f30:	4603      	mov	r3, r0
 8000f32:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000f36:	637b      	str	r3, [r7, #52]	; 0x34
	  	  if(HAL_GetTick() > Can2_tim)
 8000f38:	e79f      	b.n	8000e7a <main+0xee>
 8000f3a:	bf00      	nop
 8000f3c:	20000c6c 	.word	0x20000c6c
 8000f40:	20000bd4 	.word	0x20000bd4
 8000f44:	20000adc 	.word	0x20000adc
 8000f48:	200002a8 	.word	0x200002a8
 8000f4c:	20000a78 	.word	0x20000a78
 8000f50:	20000001 	.word	0x20000001
 8000f54:	20000334 	.word	0x20000334
 8000f58:	20000330 	.word	0x20000330
 8000f5c:	20000004 	.word	0x20000004

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b094      	sub	sp, #80	; 0x50
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 0320 	add.w	r3, r7, #32
 8000f6a:	2230      	movs	r2, #48	; 0x30
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f007 fbe0 	bl	8008734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	4b29      	ldr	r3, [pc, #164]	; (8001030 <SystemClock_Config+0xd0>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	4a28      	ldr	r2, [pc, #160]	; (8001030 <SystemClock_Config+0xd0>)
 8000f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f92:	6413      	str	r3, [r2, #64]	; 0x40
 8000f94:	4b26      	ldr	r3, [pc, #152]	; (8001030 <SystemClock_Config+0xd0>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	4b23      	ldr	r3, [pc, #140]	; (8001034 <SystemClock_Config+0xd4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a22      	ldr	r2, [pc, #136]	; (8001034 <SystemClock_Config+0xd4>)
 8000faa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	4b20      	ldr	r3, [pc, #128]	; (8001034 <SystemClock_Config+0xd4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000fbc:	2309      	movs	r3, #9
 8000fbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000fd8:	2360      	movs	r3, #96	; 0x60
 8000fda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000fdc:	2306      	movs	r3, #6
 8000fde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe4:	f107 0320 	add.w	r3, r7, #32
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f003 f935 	bl	8004258 <HAL_RCC_OscConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ff4:	f000 fa0e 	bl	8001414 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001004:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001008:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800100a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800100e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	2101      	movs	r1, #1
 8001016:	4618      	mov	r0, r3
 8001018:	f003 fb96 	bl	8004748 <HAL_RCC_ClockConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001022:	f000 f9f7 	bl	8001414 <Error_Handler>
  }
}
 8001026:	bf00      	nop
 8001028:	3750      	adds	r7, #80	; 0x50
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
 8001034:	40007000 	.word	0x40007000

08001038 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <MX_CAN1_Init+0x64>)
 800103e:	4a18      	ldr	r2, [pc, #96]	; (80010a0 <MX_CAN1_Init+0x68>)
 8001040:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <MX_CAN1_Init+0x64>)
 8001044:	2204      	movs	r2, #4
 8001046:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_CAN1_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <MX_CAN1_Init+0x64>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_CAN1_Init+0x64>)
 8001056:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800105a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_CAN1_Init+0x64>)
 800105e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001062:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <MX_CAN1_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_CAN1_Init+0x64>)
 800106c:	2200      	movs	r2, #0
 800106e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <MX_CAN1_Init+0x64>)
 8001072:	2200      	movs	r2, #0
 8001074:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_CAN1_Init+0x64>)
 8001078:	2201      	movs	r2, #1
 800107a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <MX_CAN1_Init+0x64>)
 800107e:	2200      	movs	r2, #0
 8001080:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_CAN1_Init+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <MX_CAN1_Init+0x64>)
 800108a:	f000 fcf7 	bl	8001a7c <HAL_CAN_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001094:	f000 f9be 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000c6c 	.word	0x20000c6c
 80010a0:	40006400 	.word	0x40006400

080010a4 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <MX_CAN2_Init+0x64>)
 80010aa:	4a18      	ldr	r2, [pc, #96]	; (800110c <MX_CAN2_Init+0x68>)
 80010ac:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <MX_CAN2_Init+0x64>)
 80010b0:	2204      	movs	r2, #4
 80010b2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_CAN2_Init+0x64>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010ba:	4b13      	ldr	r3, [pc, #76]	; (8001108 <MX_CAN2_Init+0x64>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_CAN2_Init+0x64>)
 80010c2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80010c6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_CAN2_Init+0x64>)
 80010ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010ce:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80010d0:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <MX_CAN2_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_CAN2_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <MX_CAN2_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_CAN2_Init+0x64>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <MX_CAN2_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_CAN2_Init+0x64>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <MX_CAN2_Init+0x64>)
 80010f6:	f000 fcc1 	bl	8001a7c <HAL_CAN_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001100:	f000 f988 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000bd4 	.word	0x20000bd4
 800110c:	40006800 	.word	0x40006800

08001110 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_I2C1_Init+0x50>)
 8001116:	4a13      	ldr	r2, [pc, #76]	; (8001164 <MX_I2C1_Init+0x54>)
 8001118:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_I2C1_Init+0x50>)
 800111c:	4a12      	ldr	r2, [pc, #72]	; (8001168 <MX_I2C1_Init+0x58>)
 800111e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_I2C1_Init+0x50>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_I2C1_Init+0x50>)
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_I2C1_Init+0x50>)
 800112e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001132:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <MX_I2C1_Init+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_I2C1_Init+0x50>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <MX_I2C1_Init+0x50>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_I2C1_Init+0x50>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <MX_I2C1_Init+0x50>)
 800114e:	f001 fdbb 	bl	8002cc8 <HAL_I2C_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001158:	f000 f95c 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000a7c 	.word	0x20000a7c
 8001164:	40005400 	.word	0x40005400
 8001168:	000186a0 	.word	0x000186a0

0800116c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <MX_SPI1_Init+0x64>)
 8001172:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <MX_SPI1_Init+0x68>)
 8001174:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <MX_SPI1_Init+0x64>)
 8001178:	f44f 7282 	mov.w	r2, #260	; 0x104
 800117c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800117e:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <MX_SPI1_Init+0x64>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <MX_SPI1_Init+0x64>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_SPI1_Init+0x64>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_SPI1_Init+0x64>)
 8001192:	2200      	movs	r2, #0
 8001194:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_SPI1_Init+0x64>)
 8001198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800119c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_SPI1_Init+0x64>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <MX_SPI1_Init+0x64>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_SPI1_Init+0x64>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <MX_SPI1_Init+0x64>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_SPI1_Init+0x64>)
 80011b8:	220a      	movs	r2, #10
 80011ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011bc:	4804      	ldr	r0, [pc, #16]	; (80011d0 <MX_SPI1_Init+0x64>)
 80011be:	f003 fcab 	bl	8004b18 <HAL_SPI_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011c8:	f000 f924 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000c10 	.word	0x20000c10
 80011d4:	40013000 	.word	0x40013000

080011d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08c      	sub	sp, #48	; 0x30
 80011dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
 80011f2:	4b82      	ldr	r3, [pc, #520]	; (80013fc <MX_GPIO_Init+0x224>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a81      	ldr	r2, [pc, #516]	; (80013fc <MX_GPIO_Init+0x224>)
 80011f8:	f043 0310 	orr.w	r3, r3, #16
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b7f      	ldr	r3, [pc, #508]	; (80013fc <MX_GPIO_Init+0x224>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	61bb      	str	r3, [r7, #24]
 8001208:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	4b7b      	ldr	r3, [pc, #492]	; (80013fc <MX_GPIO_Init+0x224>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a7a      	ldr	r2, [pc, #488]	; (80013fc <MX_GPIO_Init+0x224>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b78      	ldr	r3, [pc, #480]	; (80013fc <MX_GPIO_Init+0x224>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	4b74      	ldr	r3, [pc, #464]	; (80013fc <MX_GPIO_Init+0x224>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a73      	ldr	r2, [pc, #460]	; (80013fc <MX_GPIO_Init+0x224>)
 8001230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b71      	ldr	r3, [pc, #452]	; (80013fc <MX_GPIO_Init+0x224>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b6d      	ldr	r3, [pc, #436]	; (80013fc <MX_GPIO_Init+0x224>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a6c      	ldr	r2, [pc, #432]	; (80013fc <MX_GPIO_Init+0x224>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b6a      	ldr	r3, [pc, #424]	; (80013fc <MX_GPIO_Init+0x224>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	4b66      	ldr	r3, [pc, #408]	; (80013fc <MX_GPIO_Init+0x224>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a65      	ldr	r2, [pc, #404]	; (80013fc <MX_GPIO_Init+0x224>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b63      	ldr	r3, [pc, #396]	; (80013fc <MX_GPIO_Init+0x224>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b5f      	ldr	r3, [pc, #380]	; (80013fc <MX_GPIO_Init+0x224>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a5e      	ldr	r2, [pc, #376]	; (80013fc <MX_GPIO_Init+0x224>)
 8001284:	f043 0308 	orr.w	r3, r3, #8
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b5c      	ldr	r3, [pc, #368]	; (80013fc <MX_GPIO_Init+0x224>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	2108      	movs	r1, #8
 800129a:	4859      	ldr	r0, [pc, #356]	; (8001400 <MX_GPIO_Init+0x228>)
 800129c:	f001 fce0 	bl	8002c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	2101      	movs	r1, #1
 80012a4:	4857      	ldr	r0, [pc, #348]	; (8001404 <MX_GPIO_Init+0x22c>)
 80012a6:	f001 fcdb 	bl	8002c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80012aa:	2200      	movs	r2, #0
 80012ac:	f24f 0110 	movw	r1, #61456	; 0xf010
 80012b0:	4855      	ldr	r0, [pc, #340]	; (8001408 <MX_GPIO_Init+0x230>)
 80012b2:	f001 fcd5 	bl	8002c60 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80012b6:	2308      	movs	r3, #8
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80012c6:	f107 031c 	add.w	r3, r7, #28
 80012ca:	4619      	mov	r1, r3
 80012cc:	484c      	ldr	r0, [pc, #304]	; (8001400 <MX_GPIO_Init+0x228>)
 80012ce:	f001 fb2b 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80012d2:	2301      	movs	r3, #1
 80012d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	4846      	ldr	r0, [pc, #280]	; (8001404 <MX_GPIO_Init+0x22c>)
 80012ea:	f001 fb1d 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80012ee:	2308      	movs	r3, #8
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012fe:	2305      	movs	r3, #5
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	483e      	ldr	r0, [pc, #248]	; (8001404 <MX_GPIO_Init+0x22c>)
 800130a:	f001 fb0d 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800130e:	2301      	movs	r3, #1
 8001310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001312:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001316:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	483a      	ldr	r0, [pc, #232]	; (800140c <MX_GPIO_Init+0x234>)
 8001324:	f001 fb00 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001328:	2310      	movs	r3, #16
 800132a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001338:	2306      	movs	r3, #6
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	4832      	ldr	r0, [pc, #200]	; (800140c <MX_GPIO_Init+0x234>)
 8001344:	f001 faf0 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001348:	2304      	movs	r3, #4
 800134a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	482d      	ldr	r0, [pc, #180]	; (8001410 <MX_GPIO_Init+0x238>)
 800135c:	f001 fae4 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001372:	2305      	movs	r3, #5
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	4619      	mov	r1, r3
 800137c:	4824      	ldr	r0, [pc, #144]	; (8001410 <MX_GPIO_Init+0x238>)
 800137e:	f001 fad3 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001382:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001386:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	481b      	ldr	r0, [pc, #108]	; (8001408 <MX_GPIO_Init+0x230>)
 800139c:	f001 fac4 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80013a0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80013a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013b2:	2306      	movs	r3, #6
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	4811      	ldr	r0, [pc, #68]	; (8001404 <MX_GPIO_Init+0x22c>)
 80013be:	f001 fab3 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80013c2:	2320      	movs	r3, #32
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	4619      	mov	r1, r3
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <MX_GPIO_Init+0x230>)
 80013d6:	f001 faa7 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80013da:	2302      	movs	r3, #2
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013de:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80013e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	4619      	mov	r1, r3
 80013ee:	4804      	ldr	r0, [pc, #16]	; (8001400 <MX_GPIO_Init+0x228>)
 80013f0:	f001 fa9a 	bl	8002928 <HAL_GPIO_Init>

}
 80013f4:	bf00      	nop
 80013f6:	3730      	adds	r7, #48	; 0x30
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40023800 	.word	0x40023800
 8001400:	40021000 	.word	0x40021000
 8001404:	40020800 	.word	0x40020800
 8001408:	40020c00 	.word	0x40020c00
 800140c:	40020000 	.word	0x40020000
 8001410:	40020400 	.word	0x40020400

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141c:	e7fe      	b.n	800141c <Error_Handler+0x8>
	...

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <HAL_MspInit+0x4c>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	4a0f      	ldr	r2, [pc, #60]	; (800146c <HAL_MspInit+0x4c>)
 8001430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001434:	6453      	str	r3, [r2, #68]	; 0x44
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <HAL_MspInit+0x4c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_MspInit+0x4c>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	4a08      	ldr	r2, [pc, #32]	; (800146c <HAL_MspInit+0x4c>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001450:	6413      	str	r3, [r2, #64]	; 0x40
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_MspInit+0x4c>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800145e:	2007      	movs	r0, #7
 8001460:	f001 fa20 	bl	80028a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40023800 	.word	0x40023800

08001470 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	; 0x30
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a62      	ldr	r2, [pc, #392]	; (8001618 <HAL_CAN_MspInit+0x1a8>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d155      	bne.n	800153e <HAL_CAN_MspInit+0xce>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001492:	4b62      	ldr	r3, [pc, #392]	; (800161c <HAL_CAN_MspInit+0x1ac>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	4a60      	ldr	r2, [pc, #384]	; (800161c <HAL_CAN_MspInit+0x1ac>)
 800149a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800149c:	4b5f      	ldr	r3, [pc, #380]	; (800161c <HAL_CAN_MspInit+0x1ac>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d10d      	bne.n	80014c0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
 80014a8:	4b5d      	ldr	r3, [pc, #372]	; (8001620 <HAL_CAN_MspInit+0x1b0>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	4a5c      	ldr	r2, [pc, #368]	; (8001620 <HAL_CAN_MspInit+0x1b0>)
 80014ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014b2:	6413      	str	r3, [r2, #64]	; 0x40
 80014b4:	4b5a      	ldr	r3, [pc, #360]	; (8001620 <HAL_CAN_MspInit+0x1b0>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014bc:	61bb      	str	r3, [r7, #24]
 80014be:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	4b56      	ldr	r3, [pc, #344]	; (8001620 <HAL_CAN_MspInit+0x1b0>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	4a55      	ldr	r2, [pc, #340]	; (8001620 <HAL_CAN_MspInit+0x1b0>)
 80014ca:	f043 0308 	orr.w	r3, r3, #8
 80014ce:	6313      	str	r3, [r2, #48]	; 0x30
 80014d0:	4b53      	ldr	r3, [pc, #332]	; (8001620 <HAL_CAN_MspInit+0x1b0>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	f003 0308 	and.w	r3, r3, #8
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014dc:	2303      	movs	r3, #3
 80014de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80014ec:	2309      	movs	r3, #9
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4619      	mov	r1, r3
 80014f6:	484b      	ldr	r0, [pc, #300]	; (8001624 <HAL_CAN_MspInit+0x1b4>)
 80014f8:	f001 fa16 	bl	8002928 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2100      	movs	r1, #0
 8001500:	2013      	movs	r0, #19
 8001502:	f001 f9da 	bl	80028ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001506:	2013      	movs	r0, #19
 8001508:	f001 f9f3 	bl	80028f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800150c:	2200      	movs	r2, #0
 800150e:	2100      	movs	r1, #0
 8001510:	2014      	movs	r0, #20
 8001512:	f001 f9d2 	bl	80028ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001516:	2014      	movs	r0, #20
 8001518:	f001 f9eb 	bl	80028f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	2015      	movs	r0, #21
 8001522:	f001 f9ca 	bl	80028ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001526:	2015      	movs	r0, #21
 8001528:	f001 f9e3 	bl	80028f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2100      	movs	r1, #0
 8001530:	2016      	movs	r0, #22
 8001532:	f001 f9c2 	bl	80028ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001536:	2016      	movs	r0, #22
 8001538:	f001 f9db 	bl	80028f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800153c:	e068      	b.n	8001610 <HAL_CAN_MspInit+0x1a0>
  else if(hcan->Instance==CAN2)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a39      	ldr	r2, [pc, #228]	; (8001628 <HAL_CAN_MspInit+0x1b8>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d163      	bne.n	8001610 <HAL_CAN_MspInit+0x1a0>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	4b34      	ldr	r3, [pc, #208]	; (8001620 <HAL_CAN_MspInit+0x1b0>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	4a33      	ldr	r2, [pc, #204]	; (8001620 <HAL_CAN_MspInit+0x1b0>)
 8001552:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001556:	6413      	str	r3, [r2, #64]	; 0x40
 8001558:	4b31      	ldr	r3, [pc, #196]	; (8001620 <HAL_CAN_MspInit+0x1b0>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001564:	4b2d      	ldr	r3, [pc, #180]	; (800161c <HAL_CAN_MspInit+0x1ac>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3301      	adds	r3, #1
 800156a:	4a2c      	ldr	r2, [pc, #176]	; (800161c <HAL_CAN_MspInit+0x1ac>)
 800156c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800156e:	4b2b      	ldr	r3, [pc, #172]	; (800161c <HAL_CAN_MspInit+0x1ac>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d10d      	bne.n	8001592 <HAL_CAN_MspInit+0x122>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b29      	ldr	r3, [pc, #164]	; (8001620 <HAL_CAN_MspInit+0x1b0>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	4a28      	ldr	r2, [pc, #160]	; (8001620 <HAL_CAN_MspInit+0x1b0>)
 8001580:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001584:	6413      	str	r3, [r2, #64]	; 0x40
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <HAL_CAN_MspInit+0x1b0>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	4b22      	ldr	r3, [pc, #136]	; (8001620 <HAL_CAN_MspInit+0x1b0>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a21      	ldr	r2, [pc, #132]	; (8001620 <HAL_CAN_MspInit+0x1b0>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <HAL_CAN_MspInit+0x1b0>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80015ae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80015b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80015c0:	2309      	movs	r3, #9
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	4818      	ldr	r0, [pc, #96]	; (800162c <HAL_CAN_MspInit+0x1bc>)
 80015cc:	f001 f9ac 	bl	8002928 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	203f      	movs	r0, #63	; 0x3f
 80015d6:	f001 f970 	bl	80028ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80015da:	203f      	movs	r0, #63	; 0x3f
 80015dc:	f001 f989 	bl	80028f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2100      	movs	r1, #0
 80015e4:	2040      	movs	r0, #64	; 0x40
 80015e6:	f001 f968 	bl	80028ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80015ea:	2040      	movs	r0, #64	; 0x40
 80015ec:	f001 f981 	bl	80028f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2100      	movs	r1, #0
 80015f4:	2041      	movs	r0, #65	; 0x41
 80015f6:	f001 f960 	bl	80028ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80015fa:	2041      	movs	r0, #65	; 0x41
 80015fc:	f001 f979 	bl	80028f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	2100      	movs	r1, #0
 8001604:	2042      	movs	r0, #66	; 0x42
 8001606:	f001 f958 	bl	80028ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 800160a:	2042      	movs	r0, #66	; 0x42
 800160c:	f001 f971 	bl	80028f2 <HAL_NVIC_EnableIRQ>
}
 8001610:	bf00      	nop
 8001612:	3730      	adds	r7, #48	; 0x30
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40006400 	.word	0x40006400
 800161c:	20000364 	.word	0x20000364
 8001620:	40023800 	.word	0x40023800
 8001624:	40020c00 	.word	0x40020c00
 8001628:	40006800 	.word	0x40006800
 800162c:	40020400 	.word	0x40020400

08001630 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a19      	ldr	r2, [pc, #100]	; (80016b4 <HAL_I2C_MspInit+0x84>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d12c      	bne.n	80016ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <HAL_I2C_MspInit+0x88>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a17      	ldr	r2, [pc, #92]	; (80016b8 <HAL_I2C_MspInit+0x88>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <HAL_I2C_MspInit+0x88>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800166e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001674:	2312      	movs	r3, #18
 8001676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001678:	2301      	movs	r3, #1
 800167a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001680:	2304      	movs	r3, #4
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	480c      	ldr	r0, [pc, #48]	; (80016bc <HAL_I2C_MspInit+0x8c>)
 800168c:	f001 f94c 	bl	8002928 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <HAL_I2C_MspInit+0x88>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <HAL_I2C_MspInit+0x88>)
 800169a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800169e:	6413      	str	r3, [r2, #64]	; 0x40
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_I2C_MspInit+0x88>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016ac:	bf00      	nop
 80016ae:	3728      	adds	r7, #40	; 0x28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40005400 	.word	0x40005400
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40020400 	.word	0x40020400

080016c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	; 0x28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a19      	ldr	r2, [pc, #100]	; (8001744 <HAL_SPI_MspInit+0x84>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d12b      	bne.n	800173a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_SPI_MspInit+0x88>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	4a17      	ldr	r2, [pc, #92]	; (8001748 <HAL_SPI_MspInit+0x88>)
 80016ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016f0:	6453      	str	r3, [r2, #68]	; 0x44
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_SPI_MspInit+0x88>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_SPI_MspInit+0x88>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a10      	ldr	r2, [pc, #64]	; (8001748 <HAL_SPI_MspInit+0x88>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <HAL_SPI_MspInit+0x88>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800171a:	23e0      	movs	r3, #224	; 0xe0
 800171c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800172a:	2305      	movs	r3, #5
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4619      	mov	r1, r3
 8001734:	4805      	ldr	r0, [pc, #20]	; (800174c <HAL_SPI_MspInit+0x8c>)
 8001736:	f001 f8f7 	bl	8002928 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800173a:	bf00      	nop
 800173c:	3728      	adds	r7, #40	; 0x28
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40013000 	.word	0x40013000
 8001748:	40023800 	.word	0x40023800
 800174c:	40020000 	.word	0x40020000

08001750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <NMI_Handler+0x4>

08001756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <HardFault_Handler+0x4>

0800175c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <MemManage_Handler+0x4>

08001762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <UsageFault_Handler+0x4>

0800176e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179c:	f000 f92a 	bl	80019f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <WWDG_IRQHandler+0x10>)
 80017aa:	f003 fa3e 	bl	8004c2a <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000bfc 	.word	0x20000bfc

080017b8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <CAN1_TX_IRQHandler+0x10>)
 80017be:	f000 fd90 	bl	80022e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000c6c 	.word	0x20000c6c

080017cc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <CAN1_RX0_IRQHandler+0x10>)
 80017d2:	f000 fd86 	bl	80022e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000c6c 	.word	0x20000c6c

080017e0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <CAN1_RX1_IRQHandler+0x10>)
 80017e6:	f000 fd7c 	bl	80022e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000c6c 	.word	0x20000c6c

080017f4 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <CAN1_SCE_IRQHandler+0x10>)
 80017fa:	f000 fd72 	bl	80022e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000c6c 	.word	0x20000c6c

08001808 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <CAN2_TX_IRQHandler+0x10>)
 800180e:	f000 fd68 	bl	80022e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000bd4 	.word	0x20000bd4

0800181c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <CAN2_RX0_IRQHandler+0x10>)
 8001822:	f000 fd5e 	bl	80022e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000bd4 	.word	0x20000bd4

08001830 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <CAN2_RX1_IRQHandler+0x10>)
 8001836:	f000 fd54 	bl	80022e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000bd4 	.word	0x20000bd4

08001844 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <CAN2_SCE_IRQHandler+0x10>)
 800184a:	f000 fd4a 	bl	80022e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000bd4 	.word	0x20000bd4

08001858 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800185c:	4802      	ldr	r0, [pc, #8]	; (8001868 <OTG_FS_IRQHandler+0x10>)
 800185e:	f001 fcc7 	bl	80031f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20002168 	.word	0x20002168

0800186c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001874:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <_sbrk+0x5c>)
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <_sbrk+0x60>)
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <_sbrk+0x64>)
 800188a:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <_sbrk+0x68>)
 800188c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	429a      	cmp	r2, r3
 800189a:	d207      	bcs.n	80018ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800189c:	f006 ff20 	bl	80086e0 <__errno>
 80018a0:	4603      	mov	r3, r0
 80018a2:	220c      	movs	r2, #12
 80018a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	e009      	b.n	80018c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b2:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <_sbrk+0x64>)
 80018bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20020000 	.word	0x20020000
 80018cc:	00004000 	.word	0x00004000
 80018d0:	20000368 	.word	0x20000368
 80018d4:	20002580 	.word	0x20002580

080018d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <SystemInit+0x20>)
 80018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e2:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <SystemInit+0x20>)
 80018e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001934 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001900:	480d      	ldr	r0, [pc, #52]	; (8001938 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001902:	490e      	ldr	r1, [pc, #56]	; (800193c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001904:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001908:	e002      	b.n	8001910 <LoopCopyDataInit>

0800190a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800190c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190e:	3304      	adds	r3, #4

08001910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001914:	d3f9      	bcc.n	800190a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001918:	4c0b      	ldr	r4, [pc, #44]	; (8001948 <LoopFillZerobss+0x26>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800191c:	e001      	b.n	8001922 <LoopFillZerobss>

0800191e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001920:	3204      	adds	r2, #4

08001922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001924:	d3fb      	bcc.n	800191e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001926:	f7ff ffd7 	bl	80018d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800192a:	f006 fedf 	bl	80086ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800192e:	f7ff fa2d 	bl	8000d8c <main>
  bx  lr    
 8001932:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001934:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800193c:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 8001940:	08009114 	.word	0x08009114
  ldr r2, =_sbss
 8001944:	2000028c 	.word	0x2000028c
  ldr r4, =_ebss
 8001948:	20002580 	.word	0x20002580

0800194c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC_IRQHandler>
	...

08001950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001954:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_Init+0x40>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <HAL_Init+0x40>)
 800195a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_Init+0x40>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <HAL_Init+0x40>)
 8001966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800196a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <HAL_Init+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a07      	ldr	r2, [pc, #28]	; (8001990 <HAL_Init+0x40>)
 8001972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001978:	2003      	movs	r0, #3
 800197a:	f000 ff93 	bl	80028a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197e:	2000      	movs	r0, #0
 8001980:	f000 f808 	bl	8001994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001984:	f7ff fd4c 	bl	8001420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023c00 	.word	0x40023c00

08001994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_InitTick+0x54>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_InitTick+0x58>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 ffab 	bl	800290e <HAL_SYSTICK_Config>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e00e      	b.n	80019e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b0f      	cmp	r3, #15
 80019c6:	d80a      	bhi.n	80019de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c8:	2200      	movs	r2, #0
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f000 ff73 	bl	80028ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d4:	4a06      	ldr	r2, [pc, #24]	; (80019f0 <HAL_InitTick+0x5c>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	e000      	b.n	80019e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200000a8 	.word	0x200000a8
 80019ec:	200000b0 	.word	0x200000b0
 80019f0:	200000ac 	.word	0x200000ac

080019f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_IncTick+0x20>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_IncTick+0x24>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <HAL_IncTick+0x24>)
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	200000b0 	.word	0x200000b0
 8001a18:	20000c94 	.word	0x20000c94

08001a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_GetTick+0x14>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000c94 	.word	0x20000c94

08001a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a3c:	f7ff ffee 	bl	8001a1c <HAL_GetTick>
 8001a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4c:	d005      	beq.n	8001a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_Delay+0x44>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a5a:	bf00      	nop
 8001a5c:	f7ff ffde 	bl	8001a1c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d8f7      	bhi.n	8001a5c <HAL_Delay+0x28>
  {
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200000b0 	.word	0x200000b0

08001a7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e0ed      	b.n	8001c6a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d102      	bne.n	8001aa0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff fce8 	bl	8001470 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ab0:	f7ff ffb4 	bl	8001a1c <HAL_GetTick>
 8001ab4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ab6:	e012      	b.n	8001ade <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ab8:	f7ff ffb0 	bl	8001a1c <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b0a      	cmp	r3, #10
 8001ac4:	d90b      	bls.n	8001ade <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2205      	movs	r2, #5
 8001ad6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e0c5      	b.n	8001c6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0e5      	beq.n	8001ab8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0202 	bic.w	r2, r2, #2
 8001afa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001afc:	f7ff ff8e 	bl	8001a1c <HAL_GetTick>
 8001b00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b02:	e012      	b.n	8001b2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b04:	f7ff ff8a 	bl	8001a1c <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b0a      	cmp	r3, #10
 8001b10:	d90b      	bls.n	8001b2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2205      	movs	r2, #5
 8001b22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e09f      	b.n	8001c6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1e5      	bne.n	8001b04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7e1b      	ldrb	r3, [r3, #24]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d108      	bne.n	8001b52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	e007      	b.n	8001b62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7e5b      	ldrb	r3, [r3, #25]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d108      	bne.n	8001b7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	e007      	b.n	8001b8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	7e9b      	ldrb	r3, [r3, #26]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d108      	bne.n	8001ba6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0220 	orr.w	r2, r2, #32
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	e007      	b.n	8001bb6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0220 	bic.w	r2, r2, #32
 8001bb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7edb      	ldrb	r3, [r3, #27]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d108      	bne.n	8001bd0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0210 	bic.w	r2, r2, #16
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	e007      	b.n	8001be0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0210 	orr.w	r2, r2, #16
 8001bde:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7f1b      	ldrb	r3, [r3, #28]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d108      	bne.n	8001bfa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0208 	orr.w	r2, r2, #8
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	e007      	b.n	8001c0a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0208 	bic.w	r2, r2, #8
 8001c08:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	7f5b      	ldrb	r3, [r3, #29]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d108      	bne.n	8001c24 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0204 	orr.w	r2, r2, #4
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	e007      	b.n	8001c34 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0204 	bic.w	r2, r2, #4
 8001c32:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	ea42 0103 	orr.w	r1, r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	1e5a      	subs	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b087      	sub	sp, #28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c8a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c8c:	7cfb      	ldrb	r3, [r7, #19]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d003      	beq.n	8001c9a <HAL_CAN_ConfigFilter+0x26>
 8001c92:	7cfb      	ldrb	r3, [r7, #19]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	f040 80be 	bne.w	8001e16 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001c9a:	4b65      	ldr	r3, [pc, #404]	; (8001e30 <HAL_CAN_ConfigFilter+0x1bc>)
 8001c9c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ca4:	f043 0201 	orr.w	r2, r3, #1
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cb4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	f003 031f 	and.w	r3, r3, #31
 8001cda:	2201      	movs	r2, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	401a      	ands	r2, r3
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d123      	bne.n	8001d44 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	401a      	ands	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d1e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3248      	adds	r2, #72	; 0x48
 8001d24:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d38:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d3a:	6979      	ldr	r1, [r7, #20]
 8001d3c:	3348      	adds	r3, #72	; 0x48
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	440b      	add	r3, r1
 8001d42:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d122      	bne.n	8001d92 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	431a      	orrs	r2, r3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d6c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	3248      	adds	r2, #72	; 0x48
 8001d72:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d86:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d88:	6979      	ldr	r1, [r7, #20]
 8001d8a:	3348      	adds	r3, #72	; 0x48
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	440b      	add	r3, r1
 8001d90:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d109      	bne.n	8001dae <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	43db      	mvns	r3, r3
 8001da4:	401a      	ands	r2, r3
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001dac:	e007      	b.n	8001dbe <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	431a      	orrs	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d109      	bne.n	8001dda <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	401a      	ands	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001dd8:	e007      	b.n	8001dea <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d107      	bne.n	8001e02 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e08:	f023 0201 	bic.w	r2, r3, #1
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e006      	b.n	8001e24 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
  }
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	40006400 	.word	0x40006400

08001e34 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d12e      	bne.n	8001ea6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0201 	bic.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e60:	f7ff fddc 	bl	8001a1c <HAL_GetTick>
 8001e64:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e66:	e012      	b.n	8001e8e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e68:	f7ff fdd8 	bl	8001a1c <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b0a      	cmp	r3, #10
 8001e74:	d90b      	bls.n	8001e8e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2205      	movs	r2, #5
 8001e86:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e012      	b.n	8001eb4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1e5      	bne.n	8001e68 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e006      	b.n	8001eb4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
  }
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	; 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001eda:	7ffb      	ldrb	r3, [r7, #31]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d003      	beq.n	8001ee8 <HAL_CAN_AddTxMessage+0x2c>
 8001ee0:	7ffb      	ldrb	r3, [r7, #31]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	f040 80b8 	bne.w	8002058 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10a      	bne.n	8001f08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 80a0 	beq.w	8002048 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	0e1b      	lsrs	r3, r3, #24
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d907      	bls.n	8001f28 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e09e      	b.n	8002066 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10d      	bne.n	8001f56 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f44:	68f9      	ldr	r1, [r7, #12]
 8001f46:	6809      	ldr	r1, [r1, #0]
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3318      	adds	r3, #24
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	440b      	add	r3, r1
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	e00f      	b.n	8001f76 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f60:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f66:	68f9      	ldr	r1, [r7, #12]
 8001f68:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001f6a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3318      	adds	r3, #24
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	440b      	add	r3, r1
 8001f74:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6819      	ldr	r1, [r3, #0]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	691a      	ldr	r2, [r3, #16]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3318      	adds	r3, #24
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	440b      	add	r3, r1
 8001f86:	3304      	adds	r3, #4
 8001f88:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	7d1b      	ldrb	r3, [r3, #20]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d111      	bne.n	8001fb6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	3318      	adds	r3, #24
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	6811      	ldr	r1, [r2, #0]
 8001fa6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	3318      	adds	r3, #24
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3307      	adds	r3, #7
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	061a      	lsls	r2, r3, #24
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3306      	adds	r3, #6
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	041b      	lsls	r3, r3, #16
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3305      	adds	r3, #5
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	3204      	adds	r2, #4
 8001fd6:	7812      	ldrb	r2, [r2, #0]
 8001fd8:	4610      	mov	r0, r2
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	6811      	ldr	r1, [r2, #0]
 8001fde:	ea43 0200 	orr.w	r2, r3, r0
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	011b      	lsls	r3, r3, #4
 8001fe6:	440b      	add	r3, r1
 8001fe8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001fec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3303      	adds	r3, #3
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	061a      	lsls	r2, r3, #24
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	041b      	lsls	r3, r3, #16
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3301      	adds	r3, #1
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	4313      	orrs	r3, r2
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	7812      	ldrb	r2, [r2, #0]
 800200e:	4610      	mov	r0, r2
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	6811      	ldr	r1, [r2, #0]
 8002014:	ea43 0200 	orr.w	r2, r3, r0
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	440b      	add	r3, r1
 800201e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002022:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3318      	adds	r3, #24
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	4413      	add	r3, r2
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	6811      	ldr	r1, [r2, #0]
 8002036:	f043 0201 	orr.w	r2, r3, #1
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3318      	adds	r3, #24
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	440b      	add	r3, r1
 8002042:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	e00e      	b.n	8002066 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e006      	b.n	8002066 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
  }
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	; 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002072:	b480      	push	{r7}
 8002074:	b087      	sub	sp, #28
 8002076:	af00      	add	r7, sp, #0
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002086:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002088:	7dfb      	ldrb	r3, [r7, #23]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d003      	beq.n	8002096 <HAL_CAN_GetRxMessage+0x24>
 800208e:	7dfb      	ldrb	r3, [r7, #23]
 8002090:	2b02      	cmp	r3, #2
 8002092:	f040 80f3 	bne.w	800227c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10e      	bne.n	80020ba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d116      	bne.n	80020d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e0e7      	b.n	800228a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d107      	bne.n	80020d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0d8      	b.n	800228a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	331b      	adds	r3, #27
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	4413      	add	r3, r2
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0204 	and.w	r2, r3, #4
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10c      	bne.n	8002110 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	331b      	adds	r3, #27
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	4413      	add	r3, r2
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	0d5b      	lsrs	r3, r3, #21
 8002106:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	e00b      	b.n	8002128 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	331b      	adds	r3, #27
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	4413      	add	r3, r2
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	08db      	lsrs	r3, r3, #3
 8002120:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	331b      	adds	r3, #27
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	4413      	add	r3, r2
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0202 	and.w	r2, r3, #2
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	331b      	adds	r3, #27
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	4413      	add	r3, r2
 800214a:	3304      	adds	r3, #4
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 020f 	and.w	r2, r3, #15
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	331b      	adds	r3, #27
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	4413      	add	r3, r2
 8002162:	3304      	adds	r3, #4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	0a1b      	lsrs	r3, r3, #8
 8002168:	b2da      	uxtb	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	331b      	adds	r3, #27
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	4413      	add	r3, r2
 800217a:	3304      	adds	r3, #4
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	0c1b      	lsrs	r3, r3, #16
 8002180:	b29a      	uxth	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	4413      	add	r3, r2
 8002190:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	b2da      	uxtb	r2, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	0a1a      	lsrs	r2, r3, #8
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	3301      	adds	r3, #1
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	4413      	add	r3, r2
 80021c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	0c1a      	lsrs	r2, r3, #16
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	3302      	adds	r3, #2
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	4413      	add	r3, r2
 80021da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	0e1a      	lsrs	r2, r3, #24
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	3303      	adds	r3, #3
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	3304      	adds	r3, #4
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	4413      	add	r3, r2
 800220c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	0a1a      	lsrs	r2, r3, #8
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	3305      	adds	r3, #5
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	4413      	add	r3, r2
 8002226:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0c1a      	lsrs	r2, r3, #16
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	3306      	adds	r3, #6
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	4413      	add	r3, r2
 8002240:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	0e1a      	lsrs	r2, r3, #24
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	3307      	adds	r3, #7
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d108      	bne.n	8002268 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0220 	orr.w	r2, r2, #32
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	e007      	b.n	8002278 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0220 	orr.w	r2, r2, #32
 8002276:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	e006      	b.n	800228a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
  }
}
 800228a:	4618      	mov	r0, r3
 800228c:	371c      	adds	r7, #28
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002296:	b480      	push	{r7}
 8002298:	b085      	sub	sp, #20
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d002      	beq.n	80022b4 <HAL_CAN_ActivateNotification+0x1e>
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d109      	bne.n	80022c8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6959      	ldr	r1, [r3, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	e006      	b.n	80022d6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
  }
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b08a      	sub	sp, #40	; 0x28
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d07c      	beq.n	8002422 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d023      	beq.n	800237a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2201      	movs	r2, #1
 8002338:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7fe fc61 	bl	8000c0c <HAL_CAN_TxMailbox0CompleteCallback>
 800234a:	e016      	b.n	800237a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b00      	cmp	r3, #0
 8002354:	d004      	beq.n	8002360 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
 800235e:	e00c      	b.n	800237a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d004      	beq.n	8002374 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
 8002372:	e002      	b.n	800237a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f96b 	bl	8002650 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d024      	beq.n	80023ce <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f44f 7280 	mov.w	r2, #256	; 0x100
 800238c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7fe fc77 	bl	8000c8c <HAL_CAN_TxMailbox1CompleteCallback>
 800239e:	e016      	b.n	80023ce <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d004      	beq.n	80023b4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
 80023b2:	e00c      	b.n	80023ce <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d004      	beq.n	80023c8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
 80023c6:	e002      	b.n	80023ce <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f94b 	bl	8002664 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d024      	beq.n	8002422 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7fe fc8d 	bl	8000d0c <HAL_CAN_TxMailbox2CompleteCallback>
 80023f2:	e016      	b.n	8002422 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d004      	beq.n	8002408 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
 8002406:	e00c      	b.n	8002422 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d004      	beq.n	800241c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
 800241a:	e002      	b.n	8002422 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f92b 	bl	8002678 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00c      	beq.n	8002446 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	2b00      	cmp	r3, #0
 8002434:	d007      	beq.n	8002446 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800243c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2210      	movs	r2, #16
 8002444:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00b      	beq.n	8002468 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d006      	beq.n	8002468 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2208      	movs	r2, #8
 8002460:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f912 	bl	800268c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7fe f871 	bl	8000568 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00c      	beq.n	80024aa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2210      	movs	r2, #16
 80024a8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00b      	beq.n	80024cc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d006      	beq.n	80024cc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2208      	movs	r2, #8
 80024c4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f8f4 	bl	80026b4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f8db 	bl	80026a0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00b      	beq.n	800250c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f003 0310 	and.w	r3, r3, #16
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d006      	beq.n	800250c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2210      	movs	r2, #16
 8002504:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f8de 	bl	80026c8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00b      	beq.n	800252e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b00      	cmp	r3, #0
 800251e:	d006      	beq.n	800252e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2208      	movs	r2, #8
 8002526:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f8d7 	bl	80026dc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d07b      	beq.n	8002630 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b00      	cmp	r3, #0
 8002540:	d072      	beq.n	8002628 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002564:	2b00      	cmp	r3, #0
 8002566:	d008      	beq.n	800257a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	f043 0302 	orr.w	r3, r3, #2
 8002578:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800257a:	6a3b      	ldr	r3, [r7, #32]
 800257c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	f043 0304 	orr.w	r3, r3, #4
 8002594:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800259c:	2b00      	cmp	r3, #0
 800259e:	d043      	beq.n	8002628 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d03e      	beq.n	8002628 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025b0:	2b60      	cmp	r3, #96	; 0x60
 80025b2:	d02b      	beq.n	800260c <HAL_CAN_IRQHandler+0x32a>
 80025b4:	2b60      	cmp	r3, #96	; 0x60
 80025b6:	d82e      	bhi.n	8002616 <HAL_CAN_IRQHandler+0x334>
 80025b8:	2b50      	cmp	r3, #80	; 0x50
 80025ba:	d022      	beq.n	8002602 <HAL_CAN_IRQHandler+0x320>
 80025bc:	2b50      	cmp	r3, #80	; 0x50
 80025be:	d82a      	bhi.n	8002616 <HAL_CAN_IRQHandler+0x334>
 80025c0:	2b40      	cmp	r3, #64	; 0x40
 80025c2:	d019      	beq.n	80025f8 <HAL_CAN_IRQHandler+0x316>
 80025c4:	2b40      	cmp	r3, #64	; 0x40
 80025c6:	d826      	bhi.n	8002616 <HAL_CAN_IRQHandler+0x334>
 80025c8:	2b30      	cmp	r3, #48	; 0x30
 80025ca:	d010      	beq.n	80025ee <HAL_CAN_IRQHandler+0x30c>
 80025cc:	2b30      	cmp	r3, #48	; 0x30
 80025ce:	d822      	bhi.n	8002616 <HAL_CAN_IRQHandler+0x334>
 80025d0:	2b10      	cmp	r3, #16
 80025d2:	d002      	beq.n	80025da <HAL_CAN_IRQHandler+0x2f8>
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	d005      	beq.n	80025e4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80025d8:	e01d      	b.n	8002616 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	f043 0308 	orr.w	r3, r3, #8
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025e2:	e019      	b.n	8002618 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	f043 0310 	orr.w	r3, r3, #16
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025ec:	e014      	b.n	8002618 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	f043 0320 	orr.w	r3, r3, #32
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025f6:	e00f      	b.n	8002618 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002600:	e00a      	b.n	8002618 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800260a:	e005      	b.n	8002618 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002614:	e000      	b.n	8002618 <HAL_CAN_IRQHandler+0x336>
            break;
 8002616:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002626:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2204      	movs	r2, #4
 800262e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f854 	bl	80026f0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002648:	bf00      	nop
 800264a:	3728      	adds	r7, #40	; 0x28
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <__NVIC_SetPriorityGrouping+0x44>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002720:	4013      	ands	r3, r2
 8002722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800272c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002736:	4a04      	ldr	r2, [pc, #16]	; (8002748 <__NVIC_SetPriorityGrouping+0x44>)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	60d3      	str	r3, [r2, #12]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002750:	4b04      	ldr	r3, [pc, #16]	; (8002764 <__NVIC_GetPriorityGrouping+0x18>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	0a1b      	lsrs	r3, r3, #8
 8002756:	f003 0307 	and.w	r3, r3, #7
}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	2b00      	cmp	r3, #0
 8002778:	db0b      	blt.n	8002792 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	f003 021f 	and.w	r2, r3, #31
 8002780:	4907      	ldr	r1, [pc, #28]	; (80027a0 <__NVIC_EnableIRQ+0x38>)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	2001      	movs	r0, #1
 800278a:	fa00 f202 	lsl.w	r2, r0, r2
 800278e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	e000e100 	.word	0xe000e100

080027a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	6039      	str	r1, [r7, #0]
 80027ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	db0a      	blt.n	80027ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	490c      	ldr	r1, [pc, #48]	; (80027f0 <__NVIC_SetPriority+0x4c>)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	0112      	lsls	r2, r2, #4
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	440b      	add	r3, r1
 80027c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027cc:	e00a      	b.n	80027e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	4908      	ldr	r1, [pc, #32]	; (80027f4 <__NVIC_SetPriority+0x50>)
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	3b04      	subs	r3, #4
 80027dc:	0112      	lsls	r2, r2, #4
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	440b      	add	r3, r1
 80027e2:	761a      	strb	r2, [r3, #24]
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000e100 	.word	0xe000e100
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b089      	sub	sp, #36	; 0x24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f1c3 0307 	rsb	r3, r3, #7
 8002812:	2b04      	cmp	r3, #4
 8002814:	bf28      	it	cs
 8002816:	2304      	movcs	r3, #4
 8002818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3304      	adds	r3, #4
 800281e:	2b06      	cmp	r3, #6
 8002820:	d902      	bls.n	8002828 <NVIC_EncodePriority+0x30>
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3b03      	subs	r3, #3
 8002826:	e000      	b.n	800282a <NVIC_EncodePriority+0x32>
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	f04f 32ff 	mov.w	r2, #4294967295
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43da      	mvns	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	401a      	ands	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002840:	f04f 31ff 	mov.w	r1, #4294967295
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	43d9      	mvns	r1, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002850:	4313      	orrs	r3, r2
         );
}
 8002852:	4618      	mov	r0, r3
 8002854:	3724      	adds	r7, #36	; 0x24
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3b01      	subs	r3, #1
 800286c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002870:	d301      	bcc.n	8002876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002872:	2301      	movs	r3, #1
 8002874:	e00f      	b.n	8002896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002876:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <SysTick_Config+0x40>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3b01      	subs	r3, #1
 800287c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800287e:	210f      	movs	r1, #15
 8002880:	f04f 30ff 	mov.w	r0, #4294967295
 8002884:	f7ff ff8e 	bl	80027a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002888:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <SysTick_Config+0x40>)
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800288e:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <SysTick_Config+0x40>)
 8002890:	2207      	movs	r2, #7
 8002892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	e000e010 	.word	0xe000e010

080028a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff ff29 	bl	8002704 <__NVIC_SetPriorityGrouping>
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b086      	sub	sp, #24
 80028be:	af00      	add	r7, sp, #0
 80028c0:	4603      	mov	r3, r0
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028cc:	f7ff ff3e 	bl	800274c <__NVIC_GetPriorityGrouping>
 80028d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	6978      	ldr	r0, [r7, #20]
 80028d8:	f7ff ff8e 	bl	80027f8 <NVIC_EncodePriority>
 80028dc:	4602      	mov	r2, r0
 80028de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff5d 	bl	80027a4 <__NVIC_SetPriority>
}
 80028ea:	bf00      	nop
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	4603      	mov	r3, r0
 80028fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff31 	bl	8002768 <__NVIC_EnableIRQ>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff ffa2 	bl	8002860 <SysTick_Config>
 800291c:	4603      	mov	r3, r0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002928:	b480      	push	{r7}
 800292a:	b089      	sub	sp, #36	; 0x24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800293a:	2300      	movs	r3, #0
 800293c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
 8002942:	e16b      	b.n	8002c1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002944:	2201      	movs	r2, #1
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	4013      	ands	r3, r2
 8002956:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	429a      	cmp	r2, r3
 800295e:	f040 815a 	bne.w	8002c16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	2b01      	cmp	r3, #1
 800296c:	d005      	beq.n	800297a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002976:	2b02      	cmp	r3, #2
 8002978:	d130      	bne.n	80029dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	2203      	movs	r2, #3
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029b0:	2201      	movs	r2, #1
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	f003 0201 	and.w	r2, r3, #1
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d017      	beq.n	8002a18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	2203      	movs	r2, #3
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d123      	bne.n	8002a6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	08da      	lsrs	r2, r3, #3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3208      	adds	r2, #8
 8002a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	220f      	movs	r2, #15
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	08da      	lsrs	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3208      	adds	r2, #8
 8002a66:	69b9      	ldr	r1, [r7, #24]
 8002a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	2203      	movs	r2, #3
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 0203 	and.w	r2, r3, #3
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80b4 	beq.w	8002c16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	4b60      	ldr	r3, [pc, #384]	; (8002c34 <HAL_GPIO_Init+0x30c>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	4a5f      	ldr	r2, [pc, #380]	; (8002c34 <HAL_GPIO_Init+0x30c>)
 8002ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002abc:	6453      	str	r3, [r2, #68]	; 0x44
 8002abe:	4b5d      	ldr	r3, [pc, #372]	; (8002c34 <HAL_GPIO_Init+0x30c>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aca:	4a5b      	ldr	r2, [pc, #364]	; (8002c38 <HAL_GPIO_Init+0x310>)
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	089b      	lsrs	r3, r3, #2
 8002ad0:	3302      	adds	r3, #2
 8002ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	220f      	movs	r2, #15
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a52      	ldr	r2, [pc, #328]	; (8002c3c <HAL_GPIO_Init+0x314>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d02b      	beq.n	8002b4e <HAL_GPIO_Init+0x226>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a51      	ldr	r2, [pc, #324]	; (8002c40 <HAL_GPIO_Init+0x318>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d025      	beq.n	8002b4a <HAL_GPIO_Init+0x222>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a50      	ldr	r2, [pc, #320]	; (8002c44 <HAL_GPIO_Init+0x31c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d01f      	beq.n	8002b46 <HAL_GPIO_Init+0x21e>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a4f      	ldr	r2, [pc, #316]	; (8002c48 <HAL_GPIO_Init+0x320>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d019      	beq.n	8002b42 <HAL_GPIO_Init+0x21a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a4e      	ldr	r2, [pc, #312]	; (8002c4c <HAL_GPIO_Init+0x324>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d013      	beq.n	8002b3e <HAL_GPIO_Init+0x216>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a4d      	ldr	r2, [pc, #308]	; (8002c50 <HAL_GPIO_Init+0x328>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00d      	beq.n	8002b3a <HAL_GPIO_Init+0x212>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a4c      	ldr	r2, [pc, #304]	; (8002c54 <HAL_GPIO_Init+0x32c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d007      	beq.n	8002b36 <HAL_GPIO_Init+0x20e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a4b      	ldr	r2, [pc, #300]	; (8002c58 <HAL_GPIO_Init+0x330>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d101      	bne.n	8002b32 <HAL_GPIO_Init+0x20a>
 8002b2e:	2307      	movs	r3, #7
 8002b30:	e00e      	b.n	8002b50 <HAL_GPIO_Init+0x228>
 8002b32:	2308      	movs	r3, #8
 8002b34:	e00c      	b.n	8002b50 <HAL_GPIO_Init+0x228>
 8002b36:	2306      	movs	r3, #6
 8002b38:	e00a      	b.n	8002b50 <HAL_GPIO_Init+0x228>
 8002b3a:	2305      	movs	r3, #5
 8002b3c:	e008      	b.n	8002b50 <HAL_GPIO_Init+0x228>
 8002b3e:	2304      	movs	r3, #4
 8002b40:	e006      	b.n	8002b50 <HAL_GPIO_Init+0x228>
 8002b42:	2303      	movs	r3, #3
 8002b44:	e004      	b.n	8002b50 <HAL_GPIO_Init+0x228>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e002      	b.n	8002b50 <HAL_GPIO_Init+0x228>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <HAL_GPIO_Init+0x228>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	f002 0203 	and.w	r2, r2, #3
 8002b56:	0092      	lsls	r2, r2, #2
 8002b58:	4093      	lsls	r3, r2
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b60:	4935      	ldr	r1, [pc, #212]	; (8002c38 <HAL_GPIO_Init+0x310>)
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	089b      	lsrs	r3, r3, #2
 8002b66:	3302      	adds	r3, #2
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b6e:	4b3b      	ldr	r3, [pc, #236]	; (8002c5c <HAL_GPIO_Init+0x334>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b92:	4a32      	ldr	r2, [pc, #200]	; (8002c5c <HAL_GPIO_Init+0x334>)
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b98:	4b30      	ldr	r3, [pc, #192]	; (8002c5c <HAL_GPIO_Init+0x334>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bbc:	4a27      	ldr	r2, [pc, #156]	; (8002c5c <HAL_GPIO_Init+0x334>)
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bc2:	4b26      	ldr	r3, [pc, #152]	; (8002c5c <HAL_GPIO_Init+0x334>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002be6:	4a1d      	ldr	r2, [pc, #116]	; (8002c5c <HAL_GPIO_Init+0x334>)
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bec:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <HAL_GPIO_Init+0x334>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c10:	4a12      	ldr	r2, [pc, #72]	; (8002c5c <HAL_GPIO_Init+0x334>)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	61fb      	str	r3, [r7, #28]
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	2b0f      	cmp	r3, #15
 8002c20:	f67f ae90 	bls.w	8002944 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	3724      	adds	r7, #36	; 0x24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40013800 	.word	0x40013800
 8002c3c:	40020000 	.word	0x40020000
 8002c40:	40020400 	.word	0x40020400
 8002c44:	40020800 	.word	0x40020800
 8002c48:	40020c00 	.word	0x40020c00
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40021400 	.word	0x40021400
 8002c54:	40021800 	.word	0x40021800
 8002c58:	40021c00 	.word	0x40021c00
 8002c5c:	40013c00 	.word	0x40013c00

08002c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	807b      	strh	r3, [r7, #2]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c70:	787b      	ldrb	r3, [r7, #1]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c76:	887a      	ldrh	r2, [r7, #2]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c7c:	e003      	b.n	8002c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c7e:	887b      	ldrh	r3, [r7, #2]
 8002c80:	041a      	lsls	r2, r3, #16
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	619a      	str	r2, [r3, #24]
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b085      	sub	sp, #20
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ca4:	887a      	ldrh	r2, [r7, #2]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	041a      	lsls	r2, r3, #16
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	43d9      	mvns	r1, r3
 8002cb0:	887b      	ldrh	r3, [r7, #2]
 8002cb2:	400b      	ands	r3, r1
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	619a      	str	r2, [r3, #24]
}
 8002cba:	bf00      	nop
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e12b      	b.n	8002f32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fe fc9e 	bl	8001630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2224      	movs	r2, #36	; 0x24
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d2c:	f001 fee0 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 8002d30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4a81      	ldr	r2, [pc, #516]	; (8002f3c <HAL_I2C_Init+0x274>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d807      	bhi.n	8002d4c <HAL_I2C_Init+0x84>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4a80      	ldr	r2, [pc, #512]	; (8002f40 <HAL_I2C_Init+0x278>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	bf94      	ite	ls
 8002d44:	2301      	movls	r3, #1
 8002d46:	2300      	movhi	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	e006      	b.n	8002d5a <HAL_I2C_Init+0x92>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4a7d      	ldr	r2, [pc, #500]	; (8002f44 <HAL_I2C_Init+0x27c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	bf94      	ite	ls
 8002d54:	2301      	movls	r3, #1
 8002d56:	2300      	movhi	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e0e7      	b.n	8002f32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4a78      	ldr	r2, [pc, #480]	; (8002f48 <HAL_I2C_Init+0x280>)
 8002d66:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6a:	0c9b      	lsrs	r3, r3, #18
 8002d6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4a6a      	ldr	r2, [pc, #424]	; (8002f3c <HAL_I2C_Init+0x274>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d802      	bhi.n	8002d9c <HAL_I2C_Init+0xd4>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	e009      	b.n	8002db0 <HAL_I2C_Init+0xe8>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	4a69      	ldr	r2, [pc, #420]	; (8002f4c <HAL_I2C_Init+0x284>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	099b      	lsrs	r3, r3, #6
 8002dae:	3301      	adds	r3, #1
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	430b      	orrs	r3, r1
 8002db6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	495c      	ldr	r1, [pc, #368]	; (8002f3c <HAL_I2C_Init+0x274>)
 8002dcc:	428b      	cmp	r3, r1
 8002dce:	d819      	bhi.n	8002e04 <HAL_I2C_Init+0x13c>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1e59      	subs	r1, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dde:	1c59      	adds	r1, r3, #1
 8002de0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002de4:	400b      	ands	r3, r1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_I2C_Init+0x138>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1e59      	subs	r1, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df8:	3301      	adds	r3, #1
 8002dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfe:	e051      	b.n	8002ea4 <HAL_I2C_Init+0x1dc>
 8002e00:	2304      	movs	r3, #4
 8002e02:	e04f      	b.n	8002ea4 <HAL_I2C_Init+0x1dc>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d111      	bne.n	8002e30 <HAL_I2C_Init+0x168>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1e58      	subs	r0, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6859      	ldr	r1, [r3, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	440b      	add	r3, r1
 8002e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	e012      	b.n	8002e56 <HAL_I2C_Init+0x18e>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1e58      	subs	r0, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6859      	ldr	r1, [r3, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	0099      	lsls	r1, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e46:	3301      	adds	r3, #1
 8002e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_I2C_Init+0x196>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e022      	b.n	8002ea4 <HAL_I2C_Init+0x1dc>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10e      	bne.n	8002e84 <HAL_I2C_Init+0x1bc>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1e58      	subs	r0, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6859      	ldr	r1, [r3, #4]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	440b      	add	r3, r1
 8002e74:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e78:	3301      	adds	r3, #1
 8002e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e82:	e00f      	b.n	8002ea4 <HAL_I2C_Init+0x1dc>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1e58      	subs	r0, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	0099      	lsls	r1, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	6809      	ldr	r1, [r1, #0]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69da      	ldr	r2, [r3, #28]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ed2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6911      	ldr	r1, [r2, #16]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68d2      	ldr	r2, [r2, #12]
 8002ede:	4311      	orrs	r1, r2
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	000186a0 	.word	0x000186a0
 8002f40:	001e847f 	.word	0x001e847f
 8002f44:	003d08ff 	.word	0x003d08ff
 8002f48:	431bde83 	.word	0x431bde83
 8002f4c:	10624dd3 	.word	0x10624dd3

08002f50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f52:	b08f      	sub	sp, #60	; 0x3c
 8002f54:	af0a      	add	r7, sp, #40	; 0x28
 8002f56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e10f      	b.n	8003182 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d106      	bne.n	8002f82 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f005 f88d 	bl	800809c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2203      	movs	r2, #3
 8002f86:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d102      	bne.n	8002f9c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f001 ff80 	bl	8004ea6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	687e      	ldr	r6, [r7, #4]
 8002fae:	466d      	mov	r5, sp
 8002fb0:	f106 0410 	add.w	r4, r6, #16
 8002fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fc4:	1d33      	adds	r3, r6, #4
 8002fc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fc8:	6838      	ldr	r0, [r7, #0]
 8002fca:	f001 fe57 	bl	8004c7c <USB_CoreInit>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0d0      	b.n	8003182 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f001 ff6e 	bl	8004ec8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fec:	2300      	movs	r3, #0
 8002fee:	73fb      	strb	r3, [r7, #15]
 8002ff0:	e04a      	b.n	8003088 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ff2:	7bfa      	ldrb	r2, [r7, #15]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	333d      	adds	r3, #61	; 0x3d
 8003002:	2201      	movs	r2, #1
 8003004:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003006:	7bfa      	ldrb	r2, [r7, #15]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	1a9b      	subs	r3, r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	333c      	adds	r3, #60	; 0x3c
 8003016:	7bfa      	ldrb	r2, [r7, #15]
 8003018:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800301a:	7bfa      	ldrb	r2, [r7, #15]
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	b298      	uxth	r0, r3
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	3342      	adds	r3, #66	; 0x42
 800302e:	4602      	mov	r2, r0
 8003030:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003032:	7bfa      	ldrb	r2, [r7, #15]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	333f      	adds	r3, #63	; 0x3f
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003046:	7bfa      	ldrb	r2, [r7, #15]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	3344      	adds	r3, #68	; 0x44
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800305a:	7bfa      	ldrb	r2, [r7, #15]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	3348      	adds	r3, #72	; 0x48
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800306e:	7bfa      	ldrb	r2, [r7, #15]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	3350      	adds	r3, #80	; 0x50
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	3301      	adds	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
 8003088:	7bfa      	ldrb	r2, [r7, #15]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	429a      	cmp	r2, r3
 8003090:	d3af      	bcc.n	8002ff2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003092:	2300      	movs	r3, #0
 8003094:	73fb      	strb	r3, [r7, #15]
 8003096:	e044      	b.n	8003122 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003098:	7bfa      	ldrb	r2, [r7, #15]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80030aa:	2200      	movs	r2, #0
 80030ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030ae:	7bfa      	ldrb	r2, [r7, #15]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80030c0:	7bfa      	ldrb	r2, [r7, #15]
 80030c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030c4:	7bfa      	ldrb	r2, [r7, #15]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80030d6:	2200      	movs	r2, #0
 80030d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030da:	7bfa      	ldrb	r2, [r7, #15]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030f0:	7bfa      	ldrb	r2, [r7, #15]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003106:	7bfa      	ldrb	r2, [r7, #15]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	3301      	adds	r3, #1
 8003120:	73fb      	strb	r3, [r7, #15]
 8003122:	7bfa      	ldrb	r2, [r7, #15]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	429a      	cmp	r2, r3
 800312a:	d3b5      	bcc.n	8003098 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	603b      	str	r3, [r7, #0]
 8003132:	687e      	ldr	r6, [r7, #4]
 8003134:	466d      	mov	r5, sp
 8003136:	f106 0410 	add.w	r4, r6, #16
 800313a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800313c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800313e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003140:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003142:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003146:	e885 0003 	stmia.w	r5, {r0, r1}
 800314a:	1d33      	adds	r3, r6, #4
 800314c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800314e:	6838      	ldr	r0, [r7, #0]
 8003150:	f001 ff06 	bl	8004f60 <USB_DevInit>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d005      	beq.n	8003166 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e00d      	b.n	8003182 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f002 ff82 	bl	8006084 <USB_DevDisconnect>

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800318a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b084      	sub	sp, #16
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_PCD_Start+0x1c>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e020      	b.n	80031e8 <HAL_PCD_Start+0x5e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d109      	bne.n	80031ca <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d005      	beq.n	80031ca <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f001 fe58 	bl	8004e84 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f002 ff32 	bl	8006042 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031f0:	b590      	push	{r4, r7, lr}
 80031f2:	b08d      	sub	sp, #52	; 0x34
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f002 fff0 	bl	80061ec <USB_GetMode>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	f040 839d 	bne.w	800394e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f002 ff54 	bl	80060c6 <USB_ReadInterrupts>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8393 	beq.w	800394c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f002 ff4b 	bl	80060c6 <USB_ReadInterrupts>
 8003230:	4603      	mov	r3, r0
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b02      	cmp	r3, #2
 8003238:	d107      	bne.n	800324a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695a      	ldr	r2, [r3, #20]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f002 0202 	and.w	r2, r2, #2
 8003248:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f002 ff39 	bl	80060c6 <USB_ReadInterrupts>
 8003254:	4603      	mov	r3, r0
 8003256:	f003 0310 	and.w	r3, r3, #16
 800325a:	2b10      	cmp	r3, #16
 800325c:	d161      	bne.n	8003322 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699a      	ldr	r2, [r3, #24]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0210 	bic.w	r2, r2, #16
 800326c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	f003 020f 	and.w	r2, r3, #15
 800327a:	4613      	mov	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	4413      	add	r3, r2
 800328a:	3304      	adds	r3, #4
 800328c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	0c5b      	lsrs	r3, r3, #17
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	2b02      	cmp	r3, #2
 8003298:	d124      	bne.n	80032e4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d035      	beq.n	8003312 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	091b      	lsrs	r3, r3, #4
 80032ae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	461a      	mov	r2, r3
 80032b8:	6a38      	ldr	r0, [r7, #32]
 80032ba:	f002 fd70 	bl	8005d9e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	091b      	lsrs	r3, r3, #4
 80032c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032ca:	441a      	add	r2, r3
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	699a      	ldr	r2, [r3, #24]
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	091b      	lsrs	r3, r3, #4
 80032d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032dc:	441a      	add	r2, r3
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	619a      	str	r2, [r3, #24]
 80032e2:	e016      	b.n	8003312 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	0c5b      	lsrs	r3, r3, #17
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	2b06      	cmp	r3, #6
 80032ee:	d110      	bne.n	8003312 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032f6:	2208      	movs	r2, #8
 80032f8:	4619      	mov	r1, r3
 80032fa:	6a38      	ldr	r0, [r7, #32]
 80032fc:	f002 fd4f 	bl	8005d9e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	699a      	ldr	r2, [r3, #24]
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	091b      	lsrs	r3, r3, #4
 8003308:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800330c:	441a      	add	r2, r3
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699a      	ldr	r2, [r3, #24]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0210 	orr.w	r2, r2, #16
 8003320:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f002 fecd 	bl	80060c6 <USB_ReadInterrupts>
 800332c:	4603      	mov	r3, r0
 800332e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003332:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003336:	d16e      	bne.n	8003416 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f002 fed3 	bl	80060ec <USB_ReadDevAllOutEpInterrupt>
 8003346:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003348:	e062      	b.n	8003410 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800334a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d057      	beq.n	8003404 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	4611      	mov	r1, r2
 800335e:	4618      	mov	r0, r3
 8003360:	f002 fef8 	bl	8006154 <USB_ReadDevOutEPInterrupt>
 8003364:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00c      	beq.n	800338a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	4413      	add	r3, r2
 8003378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800337c:	461a      	mov	r2, r3
 800337e:	2301      	movs	r3, #1
 8003380:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003382:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 fdb1 	bl	8003eec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00c      	beq.n	80033ae <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	4413      	add	r3, r2
 800339c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a0:	461a      	mov	r2, r3
 80033a2:	2308      	movs	r3, #8
 80033a4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80033a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 feab 	bl	8004104 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c4:	461a      	mov	r2, r3
 80033c6:	2310      	movs	r3, #16
 80033c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f003 0320 	and.w	r3, r3, #32
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e0:	461a      	mov	r2, r3
 80033e2:	2320      	movs	r3, #32
 80033e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d009      	beq.n	8003404 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fc:	461a      	mov	r2, r3
 80033fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003402:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	3301      	adds	r3, #1
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800340a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340c:	085b      	lsrs	r3, r3, #1
 800340e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003412:	2b00      	cmp	r3, #0
 8003414:	d199      	bne.n	800334a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f002 fe53 	bl	80060c6 <USB_ReadInterrupts>
 8003420:	4603      	mov	r3, r0
 8003422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003426:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800342a:	f040 80c0 	bne.w	80035ae <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f002 fe74 	bl	8006120 <USB_ReadDevAllInEpInterrupt>
 8003438:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800343e:	e0b2      	b.n	80035a6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 80a7 	beq.w	800359a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	4611      	mov	r1, r2
 8003456:	4618      	mov	r0, r3
 8003458:	f002 fe9a 	bl	8006190 <USB_ReadDevInEPInterrupt>
 800345c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d057      	beq.n	8003518 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	2201      	movs	r2, #1
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	43db      	mvns	r3, r3
 8003482:	69f9      	ldr	r1, [r7, #28]
 8003484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003488:	4013      	ands	r3, r2
 800348a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	4413      	add	r3, r2
 8003494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003498:	461a      	mov	r2, r3
 800349a:	2301      	movs	r3, #1
 800349c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d132      	bne.n	800350c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	3348      	adds	r3, #72	; 0x48
 80034b6:	6819      	ldr	r1, [r3, #0]
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4403      	add	r3, r0
 80034c6:	3344      	adds	r3, #68	; 0x44
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4419      	add	r1, r3
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d0:	4613      	mov	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4403      	add	r3, r0
 80034da:	3348      	adds	r3, #72	; 0x48
 80034dc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d113      	bne.n	800350c <HAL_PCD_IRQHandler+0x31c>
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e8:	4613      	mov	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	3350      	adds	r3, #80	; 0x50
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d108      	bne.n	800350c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6818      	ldr	r0, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003504:	461a      	mov	r2, r3
 8003506:	2101      	movs	r1, #1
 8003508:	f002 fea2 	bl	8006250 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	b2db      	uxtb	r3, r3
 8003510:	4619      	mov	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f004 fe51 	bl	80081ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d008      	beq.n	8003534 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	4413      	add	r3, r2
 800352a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800352e:	461a      	mov	r2, r3
 8003530:	2308      	movs	r3, #8
 8003532:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f003 0310 	and.w	r3, r3, #16
 800353a:	2b00      	cmp	r3, #0
 800353c:	d008      	beq.n	8003550 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	4413      	add	r3, r2
 8003546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800354a:	461a      	mov	r2, r3
 800354c:	2310      	movs	r3, #16
 800354e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d008      	beq.n	800356c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	4413      	add	r3, r2
 8003562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003566:	461a      	mov	r2, r3
 8003568:	2340      	movs	r3, #64	; 0x40
 800356a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d008      	beq.n	8003588 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003582:	461a      	mov	r2, r3
 8003584:	2302      	movs	r3, #2
 8003586:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003592:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fc1b 	bl	8003dd0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	3301      	adds	r3, #1
 800359e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a2:	085b      	lsrs	r3, r3, #1
 80035a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f47f af49 	bne.w	8003440 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f002 fd87 	bl	80060c6 <USB_ReadInterrupts>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035c2:	d122      	bne.n	800360a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	69fa      	ldr	r2, [r7, #28]
 80035ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035d2:	f023 0301 	bic.w	r3, r3, #1
 80035d6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d108      	bne.n	80035f4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80035ea:	2100      	movs	r1, #0
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fe27 	bl	8004240 <HAL_PCDEx_LPM_Callback>
 80035f2:	e002      	b.n	80035fa <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f004 fe57 	bl	80082a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695a      	ldr	r2, [r3, #20]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003608:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f002 fd59 	bl	80060c6 <USB_ReadInterrupts>
 8003614:	4603      	mov	r3, r0
 8003616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800361a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800361e:	d112      	bne.n	8003646 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b01      	cmp	r3, #1
 800362e:	d102      	bne.n	8003636 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f004 fe13 	bl	800825c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003644:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f002 fd3b 	bl	80060c6 <USB_ReadInterrupts>
 8003650:	4603      	mov	r3, r0
 8003652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365a:	f040 80c7 	bne.w	80037ec <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800366c:	f023 0301 	bic.w	r3, r3, #1
 8003670:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2110      	movs	r1, #16
 8003678:	4618      	mov	r0, r3
 800367a:	f001 fdd5 	bl	8005228 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800367e:	2300      	movs	r3, #0
 8003680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003682:	e056      	b.n	8003732 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003690:	461a      	mov	r2, r3
 8003692:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003696:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036a8:	0151      	lsls	r1, r2, #5
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	440a      	add	r2, r1
 80036ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036b6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80036b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036c8:	0151      	lsls	r1, r2, #5
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	440a      	add	r2, r1
 80036ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80036d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80036d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e4:	461a      	mov	r2, r3
 80036e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036ea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80036ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036fc:	0151      	lsls	r1, r2, #5
 80036fe:	69fa      	ldr	r2, [r7, #28]
 8003700:	440a      	add	r2, r1
 8003702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003706:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800370a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800370c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	4413      	add	r3, r2
 8003714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800371c:	0151      	lsls	r1, r2, #5
 800371e:	69fa      	ldr	r2, [r7, #28]
 8003720:	440a      	add	r2, r1
 8003722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003726:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800372a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800372c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372e:	3301      	adds	r3, #1
 8003730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003738:	429a      	cmp	r2, r3
 800373a:	d3a3      	bcc.n	8003684 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800374a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800374e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	2b00      	cmp	r3, #0
 8003756:	d016      	beq.n	8003786 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800375e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003768:	f043 030b 	orr.w	r3, r3, #11
 800376c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800377e:	f043 030b 	orr.w	r3, r3, #11
 8003782:	6453      	str	r3, [r2, #68]	; 0x44
 8003784:	e015      	b.n	80037b2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	69fa      	ldr	r2, [r7, #28]
 8003790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003794:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003798:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800379c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	69fa      	ldr	r2, [r7, #28]
 80037a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ac:	f043 030b 	orr.w	r3, r3, #11
 80037b0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037c0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80037c4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037d6:	461a      	mov	r2, r3
 80037d8:	f002 fd3a 	bl	8006250 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695a      	ldr	r2, [r3, #20]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80037ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f002 fc68 	bl	80060c6 <USB_ReadInterrupts>
 80037f6:	4603      	mov	r3, r0
 80037f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003800:	d124      	bne.n	800384c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f002 fcfe 	bl	8006208 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f001 fd66 	bl	80052e2 <USB_GetDevSpeed>
 8003816:	4603      	mov	r3, r0
 8003818:	461a      	mov	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681c      	ldr	r4, [r3, #0]
 8003822:	f001 f959 	bl	8004ad8 <HAL_RCC_GetHCLKFreq>
 8003826:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800382c:	b2db      	uxtb	r3, r3
 800382e:	461a      	mov	r2, r3
 8003830:	4620      	mov	r0, r4
 8003832:	f001 fa85 	bl	8004d40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f004 fce7 	bl	800820a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800384a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f002 fc38 	bl	80060c6 <USB_ReadInterrupts>
 8003856:	4603      	mov	r3, r0
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b08      	cmp	r3, #8
 800385e:	d10a      	bne.n	8003876 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f004 fcc4 	bl	80081ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695a      	ldr	r2, [r3, #20]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f002 0208 	and.w	r2, r2, #8
 8003874:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f002 fc23 	bl	80060c6 <USB_ReadInterrupts>
 8003880:	4603      	mov	r3, r0
 8003882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800388a:	d10f      	bne.n	80038ac <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	b2db      	uxtb	r3, r3
 8003894:	4619      	mov	r1, r3
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f004 fd26 	bl	80082e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80038aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f002 fc08 	bl	80060c6 <USB_ReadInterrupts>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038c0:	d10f      	bne.n	80038e2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	4619      	mov	r1, r3
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f004 fcf9 	bl	80082c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695a      	ldr	r2, [r3, #20]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80038e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f002 fbed 	bl	80060c6 <USB_ReadInterrupts>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80038f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f6:	d10a      	bne.n	800390e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f004 fd07 	bl	800830c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800390c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f002 fbd7 	bl	80060c6 <USB_ReadInterrupts>
 8003918:	4603      	mov	r3, r0
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b04      	cmp	r3, #4
 8003920:	d115      	bne.n	800394e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f004 fcf7 	bl	8008328 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6859      	ldr	r1, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
 800394a:	e000      	b.n	800394e <HAL_PCD_IRQHandler+0x75e>
      return;
 800394c:	bf00      	nop
    }
  }
}
 800394e:	3734      	adds	r7, #52	; 0x34
 8003950:	46bd      	mov	sp, r7
 8003952:	bd90      	pop	{r4, r7, pc}

08003954 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_PCD_SetAddress+0x1a>
 800396a:	2302      	movs	r3, #2
 800396c:	e013      	b.n	8003996 <HAL_PCD_SetAddress+0x42>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	78fa      	ldrb	r2, [r7, #3]
 8003984:	4611      	mov	r1, r2
 8003986:	4618      	mov	r0, r3
 8003988:	f002 fb35 	bl	8005ff6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	4608      	mov	r0, r1
 80039a8:	4611      	mov	r1, r2
 80039aa:	461a      	mov	r2, r3
 80039ac:	4603      	mov	r3, r0
 80039ae:	70fb      	strb	r3, [r7, #3]
 80039b0:	460b      	mov	r3, r1
 80039b2:	803b      	strh	r3, [r7, #0]
 80039b4:	4613      	mov	r3, r2
 80039b6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	da0f      	bge.n	80039e4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039c4:	78fb      	ldrb	r3, [r7, #3]
 80039c6:	f003 020f 	and.w	r2, r3, #15
 80039ca:	4613      	mov	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	1a9b      	subs	r3, r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	3338      	adds	r3, #56	; 0x38
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	4413      	add	r3, r2
 80039d8:	3304      	adds	r3, #4
 80039da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2201      	movs	r2, #1
 80039e0:	705a      	strb	r2, [r3, #1]
 80039e2:	e00f      	b.n	8003a04 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039e4:	78fb      	ldrb	r3, [r7, #3]
 80039e6:	f003 020f 	and.w	r2, r3, #15
 80039ea:	4613      	mov	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	1a9b      	subs	r3, r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	4413      	add	r3, r2
 80039fa:	3304      	adds	r3, #4
 80039fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a10:	883a      	ldrh	r2, [r7, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	78ba      	ldrb	r2, [r7, #2]
 8003a1a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	785b      	ldrb	r3, [r3, #1]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a2e:	78bb      	ldrb	r3, [r7, #2]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d102      	bne.n	8003a3a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_PCD_EP_Open+0xaa>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e00e      	b.n	8003a66 <HAL_PCD_EP_Open+0xc8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68f9      	ldr	r1, [r7, #12]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f001 fc68 	bl	800532c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003a64:	7afb      	ldrb	r3, [r7, #11]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	460b      	mov	r3, r1
 8003a78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	da0f      	bge.n	8003aa2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a82:	78fb      	ldrb	r3, [r7, #3]
 8003a84:	f003 020f 	and.w	r2, r3, #15
 8003a88:	4613      	mov	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	3338      	adds	r3, #56	; 0x38
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	4413      	add	r3, r2
 8003a96:	3304      	adds	r3, #4
 8003a98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	705a      	strb	r2, [r3, #1]
 8003aa0:	e00f      	b.n	8003ac2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	f003 020f 	and.w	r2, r3, #15
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3304      	adds	r3, #4
 8003aba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ac2:	78fb      	ldrb	r3, [r7, #3]
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_PCD_EP_Close+0x6e>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e00e      	b.n	8003afa <HAL_PCD_EP_Close+0x8c>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68f9      	ldr	r1, [r7, #12]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f001 fca6 	bl	800543c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b086      	sub	sp, #24
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	460b      	mov	r3, r1
 8003b10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b12:	7afb      	ldrb	r3, [r7, #11]
 8003b14:	f003 020f 	and.w	r2, r3, #15
 8003b18:	4613      	mov	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	1a9b      	subs	r3, r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4413      	add	r3, r2
 8003b28:	3304      	adds	r3, #4
 8003b2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2200      	movs	r2, #0
 8003b42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b44:	7afb      	ldrb	r3, [r7, #11]
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d102      	bne.n	8003b5e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b5e:	7afb      	ldrb	r3, [r7, #11]
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d109      	bne.n	8003b7c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	461a      	mov	r2, r3
 8003b74:	6979      	ldr	r1, [r7, #20]
 8003b76:	f001 ff81 	bl	8005a7c <USB_EP0StartXfer>
 8003b7a:	e008      	b.n	8003b8e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	461a      	mov	r2, r3
 8003b88:	6979      	ldr	r1, [r7, #20]
 8003b8a:	f001 fd33 	bl	80055f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	f003 020f 	and.w	r2, r3, #15
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003bba:	681b      	ldr	r3, [r3, #0]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	607a      	str	r2, [r7, #4]
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bd8:	7afb      	ldrb	r3, [r7, #11]
 8003bda:	f003 020f 	and.w	r2, r3, #15
 8003bde:	4613      	mov	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	3338      	adds	r3, #56	; 0x38
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4413      	add	r3, r2
 8003bec:	3304      	adds	r3, #4
 8003bee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2201      	movs	r2, #1
 8003c06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c08:	7afb      	ldrb	r3, [r7, #11]
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d102      	bne.n	8003c22 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c22:	7afb      	ldrb	r3, [r7, #11]
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d109      	bne.n	8003c40 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6818      	ldr	r0, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	6979      	ldr	r1, [r7, #20]
 8003c3a:	f001 ff1f 	bl	8005a7c <USB_EP0StartXfer>
 8003c3e:	e008      	b.n	8003c52 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	6979      	ldr	r1, [r7, #20]
 8003c4e:	f001 fcd1 	bl	80055f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	f003 020f 	and.w	r2, r3, #15
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d901      	bls.n	8003c7a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e050      	b.n	8003d1c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	da0f      	bge.n	8003ca2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	f003 020f 	and.w	r2, r3, #15
 8003c88:	4613      	mov	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	3338      	adds	r3, #56	; 0x38
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	3304      	adds	r3, #4
 8003c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	705a      	strb	r2, [r3, #1]
 8003ca0:	e00d      	b.n	8003cbe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ca2:	78fa      	ldrb	r2, [r7, #3]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_PCD_EP_SetStall+0x82>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e01e      	b.n	8003d1c <HAL_PCD_EP_SetStall+0xc0>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68f9      	ldr	r1, [r7, #12]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f002 f8ae 	bl	8005e4e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cf2:	78fb      	ldrb	r3, [r7, #3]
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10a      	bne.n	8003d12 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6818      	ldr	r0, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	b2d9      	uxtb	r1, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	f002 fa9f 	bl	8006250 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d30:	78fb      	ldrb	r3, [r7, #3]
 8003d32:	f003 020f 	and.w	r2, r3, #15
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d901      	bls.n	8003d42 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e042      	b.n	8003dc8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	da0f      	bge.n	8003d6a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d4a:	78fb      	ldrb	r3, [r7, #3]
 8003d4c:	f003 020f 	and.w	r2, r3, #15
 8003d50:	4613      	mov	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	1a9b      	subs	r3, r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	3338      	adds	r3, #56	; 0x38
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	3304      	adds	r3, #4
 8003d60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2201      	movs	r2, #1
 8003d66:	705a      	strb	r2, [r3, #1]
 8003d68:	e00f      	b.n	8003d8a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d6a:	78fb      	ldrb	r3, [r7, #3]
 8003d6c:	f003 020f 	and.w	r2, r3, #15
 8003d70:	4613      	mov	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	1a9b      	subs	r3, r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	4413      	add	r3, r2
 8003d80:	3304      	adds	r3, #4
 8003d82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_PCD_EP_ClrStall+0x86>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e00e      	b.n	8003dc8 <HAL_PCD_EP_ClrStall+0xa4>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68f9      	ldr	r1, [r7, #12]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f002 f8b6 	bl	8005f2a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08a      	sub	sp, #40	; 0x28
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	4613      	mov	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	3338      	adds	r3, #56	; 0x38
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	4413      	add	r3, r2
 8003df4:	3304      	adds	r3, #4
 8003df6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	699a      	ldr	r2, [r3, #24]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d901      	bls.n	8003e08 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e06c      	b.n	8003ee2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	69fa      	ldr	r2, [r7, #28]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d902      	bls.n	8003e24 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	3303      	adds	r3, #3
 8003e28:	089b      	lsrs	r3, r3, #2
 8003e2a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e2c:	e02b      	b.n	8003e86 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	69fa      	ldr	r2, [r7, #28]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d902      	bls.n	8003e4a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	3303      	adds	r3, #3
 8003e4e:	089b      	lsrs	r3, r3, #2
 8003e50:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	68d9      	ldr	r1, [r3, #12]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	4603      	mov	r3, r0
 8003e68:	6978      	ldr	r0, [r7, #20]
 8003e6a:	f001 ff5a 	bl	8005d22 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	441a      	add	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	441a      	add	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d809      	bhi.n	8003eb0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	699a      	ldr	r2, [r3, #24]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d203      	bcs.n	8003eb0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1be      	bne.n	8003e2e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	695a      	ldr	r2, [r3, #20]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d811      	bhi.n	8003ee0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	6939      	ldr	r1, [r7, #16]
 8003ed8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003edc:	4013      	ands	r3, r2
 8003ede:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3720      	adds	r7, #32
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	333c      	adds	r3, #60	; 0x3c
 8003f04:	3304      	adds	r3, #4
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	f040 80a0 	bne.w	8004064 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d015      	beq.n	8003f5a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4a72      	ldr	r2, [pc, #456]	; (80040fc <PCD_EP_OutXfrComplete_int+0x210>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	f240 80dd 	bls.w	80040f2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 80d7 	beq.w	80040f2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f50:	461a      	mov	r2, r3
 8003f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f56:	6093      	str	r3, [r2, #8]
 8003f58:	e0cb      	b.n	80040f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f003 0320 	and.w	r3, r3, #32
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d009      	beq.n	8003f78 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f70:	461a      	mov	r2, r3
 8003f72:	2320      	movs	r3, #32
 8003f74:	6093      	str	r3, [r2, #8]
 8003f76:	e0bc      	b.n	80040f2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f040 80b7 	bne.w	80040f2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4a5d      	ldr	r2, [pc, #372]	; (80040fc <PCD_EP_OutXfrComplete_int+0x210>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d90f      	bls.n	8003fac <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fa8:	6093      	str	r3, [r2, #8]
 8003faa:	e0a2      	b.n	80040f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003fbe:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	0159      	lsls	r1, r3, #5
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	440b      	add	r3, r1
 8003fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003fd2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	1a9b      	subs	r3, r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4403      	add	r3, r0
 8003fe2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003fe6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	4613      	mov	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	1a9b      	subs	r3, r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ffa:	6819      	ldr	r1, [r3, #0]
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	4613      	mov	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4403      	add	r3, r0
 800400a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4419      	add	r1, r3
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	4613      	mov	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	1a9b      	subs	r3, r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4403      	add	r3, r0
 8004020:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004024:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d114      	bne.n	8004056 <PCD_EP_OutXfrComplete_int+0x16a>
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	4613      	mov	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	1a9b      	subs	r3, r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d108      	bne.n	8004056 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6818      	ldr	r0, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800404e:	461a      	mov	r2, r3
 8004050:	2101      	movs	r1, #1
 8004052:	f002 f8fd 	bl	8006250 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	b2db      	uxtb	r3, r3
 800405a:	4619      	mov	r1, r3
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f004 f891 	bl	8008184 <HAL_PCD_DataOutStageCallback>
 8004062:	e046      	b.n	80040f2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4a26      	ldr	r2, [pc, #152]	; (8004100 <PCD_EP_OutXfrComplete_int+0x214>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d124      	bne.n	80040b6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004082:	461a      	mov	r2, r3
 8004084:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004088:	6093      	str	r3, [r2, #8]
 800408a:	e032      	b.n	80040f2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f003 0320 	and.w	r3, r3, #32
 8004092:	2b00      	cmp	r3, #0
 8004094:	d008      	beq.n	80040a8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a2:	461a      	mov	r2, r3
 80040a4:	2320      	movs	r3, #32
 80040a6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	4619      	mov	r1, r3
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f004 f868 	bl	8008184 <HAL_PCD_DataOutStageCallback>
 80040b4:	e01d      	b.n	80040f2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d114      	bne.n	80040e6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	4613      	mov	r3, r2
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	1a9b      	subs	r3, r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d108      	bne.n	80040e6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040de:	461a      	mov	r2, r3
 80040e0:	2100      	movs	r1, #0
 80040e2:	f002 f8b5 	bl	8006250 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	4619      	mov	r1, r3
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f004 f849 	bl	8008184 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	4f54300a 	.word	0x4f54300a
 8004100:	4f54310a 	.word	0x4f54310a

08004104 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	333c      	adds	r3, #60	; 0x3c
 800411c:	3304      	adds	r3, #4
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4a15      	ldr	r2, [pc, #84]	; (800418c <PCD_EP_OutSetupPacket_int+0x88>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d90e      	bls.n	8004158 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004140:	2b00      	cmp	r3, #0
 8004142:	d009      	beq.n	8004158 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004150:	461a      	mov	r2, r3
 8004152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004156:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f004 f801 	bl	8008160 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4a0a      	ldr	r2, [pc, #40]	; (800418c <PCD_EP_OutSetupPacket_int+0x88>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d90c      	bls.n	8004180 <PCD_EP_OutSetupPacket_int+0x7c>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d108      	bne.n	8004180 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004178:	461a      	mov	r2, r3
 800417a:	2101      	movs	r1, #1
 800417c:	f002 f868 	bl	8006250 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	4f54300a 	.word	0x4f54300a

08004190 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	70fb      	strb	r3, [r7, #3]
 800419c:	4613      	mov	r3, r2
 800419e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80041a8:	78fb      	ldrb	r3, [r7, #3]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d107      	bne.n	80041be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80041ae:	883b      	ldrh	r3, [r7, #0]
 80041b0:	0419      	lsls	r1, r3, #16
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	629a      	str	r2, [r3, #40]	; 0x28
 80041bc:	e028      	b.n	8004210 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c4:	0c1b      	lsrs	r3, r3, #16
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	4413      	add	r3, r2
 80041ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041cc:	2300      	movs	r3, #0
 80041ce:	73fb      	strb	r3, [r7, #15]
 80041d0:	e00d      	b.n	80041ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	3340      	adds	r3, #64	; 0x40
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	0c1b      	lsrs	r3, r3, #16
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	4413      	add	r3, r2
 80041e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	3301      	adds	r3, #1
 80041ec:	73fb      	strb	r3, [r7, #15]
 80041ee:	7bfa      	ldrb	r2, [r7, #15]
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d3ec      	bcc.n	80041d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80041f8:	883b      	ldrh	r3, [r7, #0]
 80041fa:	0418      	lsls	r0, r3, #16
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6819      	ldr	r1, [r3, #0]
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	3b01      	subs	r3, #1
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	4302      	orrs	r2, r0
 8004208:	3340      	adds	r3, #64	; 0x40
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	460b      	mov	r3, r1
 8004228:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	887a      	ldrh	r2, [r7, #2]
 8004230:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e264      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d075      	beq.n	8004362 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004276:	4ba3      	ldr	r3, [pc, #652]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 030c 	and.w	r3, r3, #12
 800427e:	2b04      	cmp	r3, #4
 8004280:	d00c      	beq.n	800429c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004282:	4ba0      	ldr	r3, [pc, #640]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800428a:	2b08      	cmp	r3, #8
 800428c:	d112      	bne.n	80042b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800428e:	4b9d      	ldr	r3, [pc, #628]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800429a:	d10b      	bne.n	80042b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800429c:	4b99      	ldr	r3, [pc, #612]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d05b      	beq.n	8004360 <HAL_RCC_OscConfig+0x108>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d157      	bne.n	8004360 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e23f      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042bc:	d106      	bne.n	80042cc <HAL_RCC_OscConfig+0x74>
 80042be:	4b91      	ldr	r3, [pc, #580]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a90      	ldr	r2, [pc, #576]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80042c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	e01d      	b.n	8004308 <HAL_RCC_OscConfig+0xb0>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042d4:	d10c      	bne.n	80042f0 <HAL_RCC_OscConfig+0x98>
 80042d6:	4b8b      	ldr	r3, [pc, #556]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a8a      	ldr	r2, [pc, #552]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80042dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	4b88      	ldr	r3, [pc, #544]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a87      	ldr	r2, [pc, #540]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80042e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	e00b      	b.n	8004308 <HAL_RCC_OscConfig+0xb0>
 80042f0:	4b84      	ldr	r3, [pc, #528]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a83      	ldr	r2, [pc, #524]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80042f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	4b81      	ldr	r3, [pc, #516]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a80      	ldr	r2, [pc, #512]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 8004302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d013      	beq.n	8004338 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004310:	f7fd fb84 	bl	8001a1c <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004318:	f7fd fb80 	bl	8001a1c <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b64      	cmp	r3, #100	; 0x64
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e204      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432a:	4b76      	ldr	r3, [pc, #472]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0f0      	beq.n	8004318 <HAL_RCC_OscConfig+0xc0>
 8004336:	e014      	b.n	8004362 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004338:	f7fd fb70 	bl	8001a1c <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004340:	f7fd fb6c 	bl	8001a1c <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b64      	cmp	r3, #100	; 0x64
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e1f0      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004352:	4b6c      	ldr	r3, [pc, #432]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0xe8>
 800435e:	e000      	b.n	8004362 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d063      	beq.n	8004436 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800436e:	4b65      	ldr	r3, [pc, #404]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 030c 	and.w	r3, r3, #12
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00b      	beq.n	8004392 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800437a:	4b62      	ldr	r3, [pc, #392]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004382:	2b08      	cmp	r3, #8
 8004384:	d11c      	bne.n	80043c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004386:	4b5f      	ldr	r3, [pc, #380]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d116      	bne.n	80043c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004392:	4b5c      	ldr	r3, [pc, #368]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d005      	beq.n	80043aa <HAL_RCC_OscConfig+0x152>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d001      	beq.n	80043aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e1c4      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043aa:	4b56      	ldr	r3, [pc, #344]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	4952      	ldr	r1, [pc, #328]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043be:	e03a      	b.n	8004436 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d020      	beq.n	800440a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043c8:	4b4f      	ldr	r3, [pc, #316]	; (8004508 <HAL_RCC_OscConfig+0x2b0>)
 80043ca:	2201      	movs	r2, #1
 80043cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ce:	f7fd fb25 	bl	8001a1c <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043d6:	f7fd fb21 	bl	8001a1c <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e1a5      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e8:	4b46      	ldr	r3, [pc, #280]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f0      	beq.n	80043d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f4:	4b43      	ldr	r3, [pc, #268]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	4940      	ldr	r1, [pc, #256]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 8004404:	4313      	orrs	r3, r2
 8004406:	600b      	str	r3, [r1, #0]
 8004408:	e015      	b.n	8004436 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800440a:	4b3f      	ldr	r3, [pc, #252]	; (8004508 <HAL_RCC_OscConfig+0x2b0>)
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004410:	f7fd fb04 	bl	8001a1c <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004418:	f7fd fb00 	bl	8001a1c <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e184      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800442a:	4b36      	ldr	r3, [pc, #216]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f0      	bne.n	8004418 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d030      	beq.n	80044a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d016      	beq.n	8004478 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800444a:	4b30      	ldr	r3, [pc, #192]	; (800450c <HAL_RCC_OscConfig+0x2b4>)
 800444c:	2201      	movs	r2, #1
 800444e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004450:	f7fd fae4 	bl	8001a1c <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004458:	f7fd fae0 	bl	8001a1c <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e164      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800446a:	4b26      	ldr	r3, [pc, #152]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0x200>
 8004476:	e015      	b.n	80044a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004478:	4b24      	ldr	r3, [pc, #144]	; (800450c <HAL_RCC_OscConfig+0x2b4>)
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800447e:	f7fd facd 	bl	8001a1c <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004486:	f7fd fac9 	bl	8001a1c <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e14d      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004498:	4b1a      	ldr	r3, [pc, #104]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 800449a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1f0      	bne.n	8004486 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 80a0 	beq.w	80045f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b2:	2300      	movs	r3, #0
 80044b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b6:	4b13      	ldr	r3, [pc, #76]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10f      	bne.n	80044e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	4b0f      	ldr	r3, [pc, #60]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	4a0e      	ldr	r2, [pc, #56]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80044cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d0:	6413      	str	r3, [r2, #64]	; 0x40
 80044d2:	4b0c      	ldr	r3, [pc, #48]	; (8004504 <HAL_RCC_OscConfig+0x2ac>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044da:	60bb      	str	r3, [r7, #8]
 80044dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044de:	2301      	movs	r3, #1
 80044e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e2:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <HAL_RCC_OscConfig+0x2b8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d121      	bne.n	8004532 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ee:	4b08      	ldr	r3, [pc, #32]	; (8004510 <HAL_RCC_OscConfig+0x2b8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a07      	ldr	r2, [pc, #28]	; (8004510 <HAL_RCC_OscConfig+0x2b8>)
 80044f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044fa:	f7fd fa8f 	bl	8001a1c <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004500:	e011      	b.n	8004526 <HAL_RCC_OscConfig+0x2ce>
 8004502:	bf00      	nop
 8004504:	40023800 	.word	0x40023800
 8004508:	42470000 	.word	0x42470000
 800450c:	42470e80 	.word	0x42470e80
 8004510:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004514:	f7fd fa82 	bl	8001a1c <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e106      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004526:	4b85      	ldr	r3, [pc, #532]	; (800473c <HAL_RCC_OscConfig+0x4e4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d106      	bne.n	8004548 <HAL_RCC_OscConfig+0x2f0>
 800453a:	4b81      	ldr	r3, [pc, #516]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453e:	4a80      	ldr	r2, [pc, #512]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 8004540:	f043 0301 	orr.w	r3, r3, #1
 8004544:	6713      	str	r3, [r2, #112]	; 0x70
 8004546:	e01c      	b.n	8004582 <HAL_RCC_OscConfig+0x32a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	2b05      	cmp	r3, #5
 800454e:	d10c      	bne.n	800456a <HAL_RCC_OscConfig+0x312>
 8004550:	4b7b      	ldr	r3, [pc, #492]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 8004552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004554:	4a7a      	ldr	r2, [pc, #488]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 8004556:	f043 0304 	orr.w	r3, r3, #4
 800455a:	6713      	str	r3, [r2, #112]	; 0x70
 800455c:	4b78      	ldr	r3, [pc, #480]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 800455e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004560:	4a77      	ldr	r2, [pc, #476]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	6713      	str	r3, [r2, #112]	; 0x70
 8004568:	e00b      	b.n	8004582 <HAL_RCC_OscConfig+0x32a>
 800456a:	4b75      	ldr	r3, [pc, #468]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 800456c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456e:	4a74      	ldr	r2, [pc, #464]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 8004570:	f023 0301 	bic.w	r3, r3, #1
 8004574:	6713      	str	r3, [r2, #112]	; 0x70
 8004576:	4b72      	ldr	r3, [pc, #456]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 8004578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457a:	4a71      	ldr	r2, [pc, #452]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 800457c:	f023 0304 	bic.w	r3, r3, #4
 8004580:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d015      	beq.n	80045b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458a:	f7fd fa47 	bl	8001a1c <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004590:	e00a      	b.n	80045a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004592:	f7fd fa43 	bl	8001a1c <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e0c5      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a8:	4b65      	ldr	r3, [pc, #404]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 80045aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0ee      	beq.n	8004592 <HAL_RCC_OscConfig+0x33a>
 80045b4:	e014      	b.n	80045e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b6:	f7fd fa31 	bl	8001a1c <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045bc:	e00a      	b.n	80045d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045be:	f7fd fa2d 	bl	8001a1c <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e0af      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d4:	4b5a      	ldr	r3, [pc, #360]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 80045d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1ee      	bne.n	80045be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d105      	bne.n	80045f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045e6:	4b56      	ldr	r3, [pc, #344]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	4a55      	ldr	r2, [pc, #340]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 80045ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 809b 	beq.w	8004732 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045fc:	4b50      	ldr	r3, [pc, #320]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 030c 	and.w	r3, r3, #12
 8004604:	2b08      	cmp	r3, #8
 8004606:	d05c      	beq.n	80046c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	2b02      	cmp	r3, #2
 800460e:	d141      	bne.n	8004694 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004610:	4b4c      	ldr	r3, [pc, #304]	; (8004744 <HAL_RCC_OscConfig+0x4ec>)
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004616:	f7fd fa01 	bl	8001a1c <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800461e:	f7fd f9fd 	bl	8001a1c <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e081      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004630:	4b43      	ldr	r3, [pc, #268]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1f0      	bne.n	800461e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69da      	ldr	r2, [r3, #28]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	019b      	lsls	r3, r3, #6
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004652:	085b      	lsrs	r3, r3, #1
 8004654:	3b01      	subs	r3, #1
 8004656:	041b      	lsls	r3, r3, #16
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465e:	061b      	lsls	r3, r3, #24
 8004660:	4937      	ldr	r1, [pc, #220]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 8004662:	4313      	orrs	r3, r2
 8004664:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004666:	4b37      	ldr	r3, [pc, #220]	; (8004744 <HAL_RCC_OscConfig+0x4ec>)
 8004668:	2201      	movs	r2, #1
 800466a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466c:	f7fd f9d6 	bl	8001a1c <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004674:	f7fd f9d2 	bl	8001a1c <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e056      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004686:	4b2e      	ldr	r3, [pc, #184]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0f0      	beq.n	8004674 <HAL_RCC_OscConfig+0x41c>
 8004692:	e04e      	b.n	8004732 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004694:	4b2b      	ldr	r3, [pc, #172]	; (8004744 <HAL_RCC_OscConfig+0x4ec>)
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469a:	f7fd f9bf 	bl	8001a1c <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a2:	f7fd f9bb 	bl	8001a1c <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e03f      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b4:	4b22      	ldr	r3, [pc, #136]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1f0      	bne.n	80046a2 <HAL_RCC_OscConfig+0x44a>
 80046c0:	e037      	b.n	8004732 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e032      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046ce:	4b1c      	ldr	r3, [pc, #112]	; (8004740 <HAL_RCC_OscConfig+0x4e8>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d028      	beq.n	800472e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d121      	bne.n	800472e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d11a      	bne.n	800472e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046fe:	4013      	ands	r3, r2
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004704:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004706:	4293      	cmp	r3, r2
 8004708:	d111      	bne.n	800472e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	085b      	lsrs	r3, r3, #1
 8004716:	3b01      	subs	r3, #1
 8004718:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800471a:	429a      	cmp	r2, r3
 800471c:	d107      	bne.n	800472e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800472a:	429a      	cmp	r2, r3
 800472c:	d001      	beq.n	8004732 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40007000 	.word	0x40007000
 8004740:	40023800 	.word	0x40023800
 8004744:	42470060 	.word	0x42470060

08004748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0cc      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800475c:	4b68      	ldr	r3, [pc, #416]	; (8004900 <HAL_RCC_ClockConfig+0x1b8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d90c      	bls.n	8004784 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476a:	4b65      	ldr	r3, [pc, #404]	; (8004900 <HAL_RCC_ClockConfig+0x1b8>)
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004772:	4b63      	ldr	r3, [pc, #396]	; (8004900 <HAL_RCC_ClockConfig+0x1b8>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d001      	beq.n	8004784 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e0b8      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d020      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d005      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800479c:	4b59      	ldr	r3, [pc, #356]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	4a58      	ldr	r2, [pc, #352]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80047a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047b4:	4b53      	ldr	r3, [pc, #332]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	4a52      	ldr	r2, [pc, #328]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c0:	4b50      	ldr	r3, [pc, #320]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	494d      	ldr	r1, [pc, #308]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d044      	beq.n	8004868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d107      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e6:	4b47      	ldr	r3, [pc, #284]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d119      	bne.n	8004826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e07f      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d003      	beq.n	8004806 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004802:	2b03      	cmp	r3, #3
 8004804:	d107      	bne.n	8004816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004806:	4b3f      	ldr	r3, [pc, #252]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d109      	bne.n	8004826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e06f      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004816:	4b3b      	ldr	r3, [pc, #236]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e067      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004826:	4b37      	ldr	r3, [pc, #220]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f023 0203 	bic.w	r2, r3, #3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	4934      	ldr	r1, [pc, #208]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 8004834:	4313      	orrs	r3, r2
 8004836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004838:	f7fd f8f0 	bl	8001a1c <HAL_GetTick>
 800483c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483e:	e00a      	b.n	8004856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004840:	f7fd f8ec 	bl	8001a1c <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	f241 3288 	movw	r2, #5000	; 0x1388
 800484e:	4293      	cmp	r3, r2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e04f      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004856:	4b2b      	ldr	r3, [pc, #172]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 020c 	and.w	r2, r3, #12
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	429a      	cmp	r2, r3
 8004866:	d1eb      	bne.n	8004840 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004868:	4b25      	ldr	r3, [pc, #148]	; (8004900 <HAL_RCC_ClockConfig+0x1b8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d20c      	bcs.n	8004890 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004876:	4b22      	ldr	r3, [pc, #136]	; (8004900 <HAL_RCC_ClockConfig+0x1b8>)
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800487e:	4b20      	ldr	r3, [pc, #128]	; (8004900 <HAL_RCC_ClockConfig+0x1b8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d001      	beq.n	8004890 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e032      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d008      	beq.n	80048ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800489c:	4b19      	ldr	r3, [pc, #100]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	4916      	ldr	r1, [pc, #88]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d009      	beq.n	80048ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ba:	4b12      	ldr	r3, [pc, #72]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	490e      	ldr	r1, [pc, #56]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048ce:	f000 f821 	bl	8004914 <HAL_RCC_GetSysClockFreq>
 80048d2:	4602      	mov	r2, r0
 80048d4:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	091b      	lsrs	r3, r3, #4
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	490a      	ldr	r1, [pc, #40]	; (8004908 <HAL_RCC_ClockConfig+0x1c0>)
 80048e0:	5ccb      	ldrb	r3, [r1, r3]
 80048e2:	fa22 f303 	lsr.w	r3, r2, r3
 80048e6:	4a09      	ldr	r2, [pc, #36]	; (800490c <HAL_RCC_ClockConfig+0x1c4>)
 80048e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048ea:	4b09      	ldr	r3, [pc, #36]	; (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fd f850 	bl	8001994 <HAL_InitTick>

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40023c00 	.word	0x40023c00
 8004904:	40023800 	.word	0x40023800
 8004908:	080090b8 	.word	0x080090b8
 800490c:	200000a8 	.word	0x200000a8
 8004910:	200000ac 	.word	0x200000ac

08004914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004914:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004918:	b084      	sub	sp, #16
 800491a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	607b      	str	r3, [r7, #4]
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	2300      	movs	r3, #0
 8004926:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800492c:	4b67      	ldr	r3, [pc, #412]	; (8004acc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 030c 	and.w	r3, r3, #12
 8004934:	2b08      	cmp	r3, #8
 8004936:	d00d      	beq.n	8004954 <HAL_RCC_GetSysClockFreq+0x40>
 8004938:	2b08      	cmp	r3, #8
 800493a:	f200 80bd 	bhi.w	8004ab8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800493e:	2b00      	cmp	r3, #0
 8004940:	d002      	beq.n	8004948 <HAL_RCC_GetSysClockFreq+0x34>
 8004942:	2b04      	cmp	r3, #4
 8004944:	d003      	beq.n	800494e <HAL_RCC_GetSysClockFreq+0x3a>
 8004946:	e0b7      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004948:	4b61      	ldr	r3, [pc, #388]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800494a:	60bb      	str	r3, [r7, #8]
       break;
 800494c:	e0b7      	b.n	8004abe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800494e:	4b61      	ldr	r3, [pc, #388]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004950:	60bb      	str	r3, [r7, #8]
      break;
 8004952:	e0b4      	b.n	8004abe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004954:	4b5d      	ldr	r3, [pc, #372]	; (8004acc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800495c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800495e:	4b5b      	ldr	r3, [pc, #364]	; (8004acc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d04d      	beq.n	8004a06 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800496a:	4b58      	ldr	r3, [pc, #352]	; (8004acc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	099b      	lsrs	r3, r3, #6
 8004970:	461a      	mov	r2, r3
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	f240 10ff 	movw	r0, #511	; 0x1ff
 800497a:	f04f 0100 	mov.w	r1, #0
 800497e:	ea02 0800 	and.w	r8, r2, r0
 8004982:	ea03 0901 	and.w	r9, r3, r1
 8004986:	4640      	mov	r0, r8
 8004988:	4649      	mov	r1, r9
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	014b      	lsls	r3, r1, #5
 8004994:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004998:	0142      	lsls	r2, r0, #5
 800499a:	4610      	mov	r0, r2
 800499c:	4619      	mov	r1, r3
 800499e:	ebb0 0008 	subs.w	r0, r0, r8
 80049a2:	eb61 0109 	sbc.w	r1, r1, r9
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	f04f 0300 	mov.w	r3, #0
 80049ae:	018b      	lsls	r3, r1, #6
 80049b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80049b4:	0182      	lsls	r2, r0, #6
 80049b6:	1a12      	subs	r2, r2, r0
 80049b8:	eb63 0301 	sbc.w	r3, r3, r1
 80049bc:	f04f 0000 	mov.w	r0, #0
 80049c0:	f04f 0100 	mov.w	r1, #0
 80049c4:	00d9      	lsls	r1, r3, #3
 80049c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049ca:	00d0      	lsls	r0, r2, #3
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	eb12 0208 	adds.w	r2, r2, r8
 80049d4:	eb43 0309 	adc.w	r3, r3, r9
 80049d8:	f04f 0000 	mov.w	r0, #0
 80049dc:	f04f 0100 	mov.w	r1, #0
 80049e0:	0259      	lsls	r1, r3, #9
 80049e2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80049e6:	0250      	lsls	r0, r2, #9
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4610      	mov	r0, r2
 80049ee:	4619      	mov	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	461a      	mov	r2, r3
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	f7fb fc3a 	bl	8000270 <__aeabi_uldivmod>
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4613      	mov	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	e04a      	b.n	8004a9c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a06:	4b31      	ldr	r3, [pc, #196]	; (8004acc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	099b      	lsrs	r3, r3, #6
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a16:	f04f 0100 	mov.w	r1, #0
 8004a1a:	ea02 0400 	and.w	r4, r2, r0
 8004a1e:	ea03 0501 	and.w	r5, r3, r1
 8004a22:	4620      	mov	r0, r4
 8004a24:	4629      	mov	r1, r5
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	014b      	lsls	r3, r1, #5
 8004a30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a34:	0142      	lsls	r2, r0, #5
 8004a36:	4610      	mov	r0, r2
 8004a38:	4619      	mov	r1, r3
 8004a3a:	1b00      	subs	r0, r0, r4
 8004a3c:	eb61 0105 	sbc.w	r1, r1, r5
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	f04f 0300 	mov.w	r3, #0
 8004a48:	018b      	lsls	r3, r1, #6
 8004a4a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a4e:	0182      	lsls	r2, r0, #6
 8004a50:	1a12      	subs	r2, r2, r0
 8004a52:	eb63 0301 	sbc.w	r3, r3, r1
 8004a56:	f04f 0000 	mov.w	r0, #0
 8004a5a:	f04f 0100 	mov.w	r1, #0
 8004a5e:	00d9      	lsls	r1, r3, #3
 8004a60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a64:	00d0      	lsls	r0, r2, #3
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	1912      	adds	r2, r2, r4
 8004a6c:	eb45 0303 	adc.w	r3, r5, r3
 8004a70:	f04f 0000 	mov.w	r0, #0
 8004a74:	f04f 0100 	mov.w	r1, #0
 8004a78:	0299      	lsls	r1, r3, #10
 8004a7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a7e:	0290      	lsls	r0, r2, #10
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4610      	mov	r0, r2
 8004a86:	4619      	mov	r1, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	f04f 0300 	mov.w	r3, #0
 8004a90:	f7fb fbee 	bl	8000270 <__aeabi_uldivmod>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	4613      	mov	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	0c1b      	lsrs	r3, r3, #16
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab4:	60bb      	str	r3, [r7, #8]
      break;
 8004ab6:	e002      	b.n	8004abe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004aba:	60bb      	str	r3, [r7, #8]
      break;
 8004abc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004abe:	68bb      	ldr	r3, [r7, #8]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004aca:	bf00      	nop
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	00f42400 	.word	0x00f42400
 8004ad4:	007a1200 	.word	0x007a1200

08004ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004adc:	4b03      	ldr	r3, [pc, #12]	; (8004aec <HAL_RCC_GetHCLKFreq+0x14>)
 8004ade:	681b      	ldr	r3, [r3, #0]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	200000a8 	.word	0x200000a8

08004af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004af4:	f7ff fff0 	bl	8004ad8 <HAL_RCC_GetHCLKFreq>
 8004af8:	4602      	mov	r2, r0
 8004afa:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	0a9b      	lsrs	r3, r3, #10
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	4903      	ldr	r1, [pc, #12]	; (8004b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b06:	5ccb      	ldrb	r3, [r1, r3]
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40023800 	.word	0x40023800
 8004b14:	080090c8 	.word	0x080090c8

08004b18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e07b      	b.n	8004c22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d108      	bne.n	8004b44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b3a:	d009      	beq.n	8004b50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	61da      	str	r2, [r3, #28]
 8004b42:	e005      	b.n	8004b50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d106      	bne.n	8004b70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fc fda8 	bl	80016c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd4:	ea42 0103 	orr.w	r1, r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bdc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	0c1b      	lsrs	r3, r3, #16
 8004bee:	f003 0104 	and.w	r1, r3, #4
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	f003 0210 	and.w	r2, r3, #16
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69da      	ldr	r2, [r3, #28]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b082      	sub	sp, #8
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c40:	d10e      	bne.n	8004c60 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d107      	bne.n	8004c60 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0201 	mvn.w	r2, #1
 8004c58:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f804 	bl	8004c68 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8004c60:	bf00      	nop
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b084      	sub	sp, #16
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	f107 001c 	add.w	r0, r7, #28
 8004c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d122      	bne.n	8004cda <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d105      	bne.n	8004cce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f001 fb1c 	bl	800630c <USB_CoreReset>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	73fb      	strb	r3, [r7, #15]
 8004cd8:	e01a      	b.n	8004d10 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f001 fb10 	bl	800630c <USB_CoreReset>
 8004cec:	4603      	mov	r3, r0
 8004cee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	639a      	str	r2, [r3, #56]	; 0x38
 8004d02:	e005      	b.n	8004d10 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d10b      	bne.n	8004d2e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f043 0206 	orr.w	r2, r3, #6
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f043 0220 	orr.w	r2, r3, #32
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d3a:	b004      	add	sp, #16
 8004d3c:	4770      	bx	lr
	...

08004d40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d4e:	79fb      	ldrb	r3, [r7, #7]
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d165      	bne.n	8004e20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4a41      	ldr	r2, [pc, #260]	; (8004e5c <USB_SetTurnaroundTime+0x11c>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d906      	bls.n	8004d6a <USB_SetTurnaroundTime+0x2a>
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4a40      	ldr	r2, [pc, #256]	; (8004e60 <USB_SetTurnaroundTime+0x120>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d202      	bcs.n	8004d6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d64:	230f      	movs	r3, #15
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	e062      	b.n	8004e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	4a3c      	ldr	r2, [pc, #240]	; (8004e60 <USB_SetTurnaroundTime+0x120>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d306      	bcc.n	8004d80 <USB_SetTurnaroundTime+0x40>
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	4a3b      	ldr	r2, [pc, #236]	; (8004e64 <USB_SetTurnaroundTime+0x124>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d202      	bcs.n	8004d80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d7a:	230e      	movs	r3, #14
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	e057      	b.n	8004e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4a38      	ldr	r2, [pc, #224]	; (8004e64 <USB_SetTurnaroundTime+0x124>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d306      	bcc.n	8004d96 <USB_SetTurnaroundTime+0x56>
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4a37      	ldr	r2, [pc, #220]	; (8004e68 <USB_SetTurnaroundTime+0x128>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d202      	bcs.n	8004d96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d90:	230d      	movs	r3, #13
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	e04c      	b.n	8004e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4a33      	ldr	r2, [pc, #204]	; (8004e68 <USB_SetTurnaroundTime+0x128>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d306      	bcc.n	8004dac <USB_SetTurnaroundTime+0x6c>
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	4a32      	ldr	r2, [pc, #200]	; (8004e6c <USB_SetTurnaroundTime+0x12c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d802      	bhi.n	8004dac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004da6:	230c      	movs	r3, #12
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	e041      	b.n	8004e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4a2f      	ldr	r2, [pc, #188]	; (8004e6c <USB_SetTurnaroundTime+0x12c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d906      	bls.n	8004dc2 <USB_SetTurnaroundTime+0x82>
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4a2e      	ldr	r2, [pc, #184]	; (8004e70 <USB_SetTurnaroundTime+0x130>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d802      	bhi.n	8004dc2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004dbc:	230b      	movs	r3, #11
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	e036      	b.n	8004e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	4a2a      	ldr	r2, [pc, #168]	; (8004e70 <USB_SetTurnaroundTime+0x130>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d906      	bls.n	8004dd8 <USB_SetTurnaroundTime+0x98>
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4a29      	ldr	r2, [pc, #164]	; (8004e74 <USB_SetTurnaroundTime+0x134>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d802      	bhi.n	8004dd8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004dd2:	230a      	movs	r3, #10
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	e02b      	b.n	8004e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4a26      	ldr	r2, [pc, #152]	; (8004e74 <USB_SetTurnaroundTime+0x134>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d906      	bls.n	8004dee <USB_SetTurnaroundTime+0xae>
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4a25      	ldr	r2, [pc, #148]	; (8004e78 <USB_SetTurnaroundTime+0x138>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d202      	bcs.n	8004dee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004de8:	2309      	movs	r3, #9
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	e020      	b.n	8004e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	4a21      	ldr	r2, [pc, #132]	; (8004e78 <USB_SetTurnaroundTime+0x138>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d306      	bcc.n	8004e04 <USB_SetTurnaroundTime+0xc4>
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	4a20      	ldr	r2, [pc, #128]	; (8004e7c <USB_SetTurnaroundTime+0x13c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d802      	bhi.n	8004e04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004dfe:	2308      	movs	r3, #8
 8004e00:	617b      	str	r3, [r7, #20]
 8004e02:	e015      	b.n	8004e30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4a1d      	ldr	r2, [pc, #116]	; (8004e7c <USB_SetTurnaroundTime+0x13c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d906      	bls.n	8004e1a <USB_SetTurnaroundTime+0xda>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4a1c      	ldr	r2, [pc, #112]	; (8004e80 <USB_SetTurnaroundTime+0x140>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d202      	bcs.n	8004e1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e14:	2307      	movs	r3, #7
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	e00a      	b.n	8004e30 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e1a:	2306      	movs	r3, #6
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	e007      	b.n	8004e30 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e20:	79fb      	ldrb	r3, [r7, #7]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d102      	bne.n	8004e2c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e26:	2309      	movs	r3, #9
 8004e28:	617b      	str	r3, [r7, #20]
 8004e2a:	e001      	b.n	8004e30 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e2c:	2309      	movs	r3, #9
 8004e2e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	029b      	lsls	r3, r3, #10
 8004e44:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	00d8acbf 	.word	0x00d8acbf
 8004e60:	00e4e1c0 	.word	0x00e4e1c0
 8004e64:	00f42400 	.word	0x00f42400
 8004e68:	01067380 	.word	0x01067380
 8004e6c:	011a499f 	.word	0x011a499f
 8004e70:	01312cff 	.word	0x01312cff
 8004e74:	014ca43f 	.word	0x014ca43f
 8004e78:	016e3600 	.word	0x016e3600
 8004e7c:	01a6ab1f 	.word	0x01a6ab1f
 8004e80:	01e84800 	.word	0x01e84800

08004e84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f043 0201 	orr.w	r2, r3, #1
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f023 0201 	bic.w	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ee4:	78fb      	ldrb	r3, [r7, #3]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d115      	bne.n	8004f16 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ef6:	2001      	movs	r0, #1
 8004ef8:	f7fc fd9c 	bl	8001a34 <HAL_Delay>
      ms++;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3301      	adds	r3, #1
 8004f00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f001 f972 	bl	80061ec <USB_GetMode>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d01e      	beq.n	8004f4c <USB_SetCurrentMode+0x84>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b31      	cmp	r3, #49	; 0x31
 8004f12:	d9f0      	bls.n	8004ef6 <USB_SetCurrentMode+0x2e>
 8004f14:	e01a      	b.n	8004f4c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f16:	78fb      	ldrb	r3, [r7, #3]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d115      	bne.n	8004f48 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f28:	2001      	movs	r0, #1
 8004f2a:	f7fc fd83 	bl	8001a34 <HAL_Delay>
      ms++;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	3301      	adds	r3, #1
 8004f32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f001 f959 	bl	80061ec <USB_GetMode>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d005      	beq.n	8004f4c <USB_SetCurrentMode+0x84>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2b31      	cmp	r3, #49	; 0x31
 8004f44:	d9f0      	bls.n	8004f28 <USB_SetCurrentMode+0x60>
 8004f46:	e001      	b.n	8004f4c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e005      	b.n	8004f58 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2b32      	cmp	r3, #50	; 0x32
 8004f50:	d101      	bne.n	8004f56 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e000      	b.n	8004f58 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f60:	b084      	sub	sp, #16
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b086      	sub	sp, #24
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	e009      	b.n	8004f94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	3340      	adds	r3, #64	; 0x40
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	3301      	adds	r3, #1
 8004f92:	613b      	str	r3, [r7, #16]
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	2b0e      	cmp	r3, #14
 8004f98:	d9f2      	bls.n	8004f80 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d11c      	bne.n	8004fda <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fae:	f043 0302 	orr.w	r3, r3, #2
 8004fb2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	639a      	str	r2, [r3, #56]	; 0x38
 8004fd8:	e00b      	b.n	8004ff2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fde:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005004:	4619      	mov	r1, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500c:	461a      	mov	r2, r3
 800500e:	680b      	ldr	r3, [r1, #0]
 8005010:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005014:	2b01      	cmp	r3, #1
 8005016:	d10c      	bne.n	8005032 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501a:	2b00      	cmp	r3, #0
 800501c:	d104      	bne.n	8005028 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800501e:	2100      	movs	r1, #0
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f945 	bl	80052b0 <USB_SetDevSpeed>
 8005026:	e008      	b.n	800503a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005028:	2101      	movs	r1, #1
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f940 	bl	80052b0 <USB_SetDevSpeed>
 8005030:	e003      	b.n	800503a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005032:	2103      	movs	r1, #3
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f93b 	bl	80052b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800503a:	2110      	movs	r1, #16
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f8f3 	bl	8005228 <USB_FlushTxFifo>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f90f 	bl	8005270 <USB_FlushRxFifo>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005062:	461a      	mov	r2, r3
 8005064:	2300      	movs	r3, #0
 8005066:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506e:	461a      	mov	r2, r3
 8005070:	2300      	movs	r3, #0
 8005072:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507a:	461a      	mov	r2, r3
 800507c:	2300      	movs	r3, #0
 800507e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005080:	2300      	movs	r3, #0
 8005082:	613b      	str	r3, [r7, #16]
 8005084:	e043      	b.n	800510e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4413      	add	r3, r2
 800508e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005098:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800509c:	d118      	bne.n	80050d0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10a      	bne.n	80050ba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b0:	461a      	mov	r2, r3
 80050b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	e013      	b.n	80050e2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c6:	461a      	mov	r2, r3
 80050c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	e008      	b.n	80050e2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050dc:	461a      	mov	r2, r3
 80050de:	2300      	movs	r3, #0
 80050e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ee:	461a      	mov	r2, r3
 80050f0:	2300      	movs	r3, #0
 80050f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005100:	461a      	mov	r2, r3
 8005102:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005106:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	3301      	adds	r3, #1
 800510c:	613b      	str	r3, [r7, #16]
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	429a      	cmp	r2, r3
 8005114:	d3b7      	bcc.n	8005086 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005116:	2300      	movs	r3, #0
 8005118:	613b      	str	r3, [r7, #16]
 800511a:	e043      	b.n	80051a4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800512e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005132:	d118      	bne.n	8005166 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10a      	bne.n	8005150 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005146:	461a      	mov	r2, r3
 8005148:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	e013      	b.n	8005178 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515c:	461a      	mov	r2, r3
 800515e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005162:	6013      	str	r3, [r2, #0]
 8005164:	e008      	b.n	8005178 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005172:	461a      	mov	r2, r3
 8005174:	2300      	movs	r3, #0
 8005176:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005184:	461a      	mov	r2, r3
 8005186:	2300      	movs	r3, #0
 8005188:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005196:	461a      	mov	r2, r3
 8005198:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800519c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	3301      	adds	r3, #1
 80051a2:	613b      	str	r3, [r7, #16]
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d3b7      	bcc.n	800511c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80051cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d105      	bne.n	80051e0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	f043 0210 	orr.w	r2, r3, #16
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699a      	ldr	r2, [r3, #24]
 80051e4:	4b0f      	ldr	r3, [pc, #60]	; (8005224 <USB_DevInit+0x2c4>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d005      	beq.n	80051fe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	f043 0208 	orr.w	r2, r3, #8
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005200:	2b01      	cmp	r3, #1
 8005202:	d107      	bne.n	8005214 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800520c:	f043 0304 	orr.w	r3, r3, #4
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005214:	7dfb      	ldrb	r3, [r7, #23]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005220:	b004      	add	sp, #16
 8005222:	4770      	bx	lr
 8005224:	803c3800 	.word	0x803c3800

08005228 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	019b      	lsls	r3, r3, #6
 800523a:	f043 0220 	orr.w	r2, r3, #32
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3301      	adds	r3, #1
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	4a08      	ldr	r2, [pc, #32]	; (800526c <USB_FlushTxFifo+0x44>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e006      	b.n	8005260 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f003 0320 	and.w	r3, r3, #32
 800525a:	2b20      	cmp	r3, #32
 800525c:	d0f1      	beq.n	8005242 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	00030d40 	.word	0x00030d40

08005270 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2210      	movs	r2, #16
 8005280:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	3301      	adds	r3, #1
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	4a08      	ldr	r2, [pc, #32]	; (80052ac <USB_FlushRxFifo+0x3c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d901      	bls.n	8005292 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e006      	b.n	80052a0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f003 0310 	and.w	r3, r3, #16
 800529a:	2b10      	cmp	r3, #16
 800529c:	d0f1      	beq.n	8005282 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	00030d40 	.word	0x00030d40

080052b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	460b      	mov	r3, r1
 80052ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	78fb      	ldrb	r3, [r7, #3]
 80052ca:	68f9      	ldr	r1, [r7, #12]
 80052cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052d0:	4313      	orrs	r3, r2
 80052d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b087      	sub	sp, #28
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 0306 	and.w	r3, r3, #6
 80052fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d102      	bne.n	8005308 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005302:	2300      	movs	r3, #0
 8005304:	75fb      	strb	r3, [r7, #23]
 8005306:	e00a      	b.n	800531e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b02      	cmp	r3, #2
 800530c:	d002      	beq.n	8005314 <USB_GetDevSpeed+0x32>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2b06      	cmp	r3, #6
 8005312:	d102      	bne.n	800531a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005314:	2302      	movs	r3, #2
 8005316:	75fb      	strb	r3, [r7, #23]
 8005318:	e001      	b.n	800531e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800531a:	230f      	movs	r3, #15
 800531c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800531e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005320:	4618      	mov	r0, r3
 8005322:	371c      	adds	r7, #28
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	785b      	ldrb	r3, [r3, #1]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d13a      	bne.n	80053be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534e:	69da      	ldr	r2, [r3, #28]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	2101      	movs	r1, #1
 800535a:	fa01 f303 	lsl.w	r3, r1, r3
 800535e:	b29b      	uxth	r3, r3
 8005360:	68f9      	ldr	r1, [r7, #12]
 8005362:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005366:	4313      	orrs	r3, r2
 8005368:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d155      	bne.n	800542c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	78db      	ldrb	r3, [r3, #3]
 800539a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800539c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	059b      	lsls	r3, r3, #22
 80053a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053a4:	4313      	orrs	r3, r2
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	0151      	lsls	r1, r2, #5
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	440a      	add	r2, r1
 80053ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ba:	6013      	str	r3, [r2, #0]
 80053bc:	e036      	b.n	800542c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c4:	69da      	ldr	r2, [r3, #28]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	2101      	movs	r1, #1
 80053d0:	fa01 f303 	lsl.w	r3, r1, r3
 80053d4:	041b      	lsls	r3, r3, #16
 80053d6:	68f9      	ldr	r1, [r7, #12]
 80053d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053dc:	4313      	orrs	r3, r2
 80053de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d11a      	bne.n	800542c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	78db      	ldrb	r3, [r3, #3]
 8005410:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005412:	430b      	orrs	r3, r1
 8005414:	4313      	orrs	r3, r2
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	0151      	lsls	r1, r2, #5
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	440a      	add	r2, r1
 800541e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	785b      	ldrb	r3, [r3, #1]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d161      	bne.n	800551c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800546a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800546e:	d11f      	bne.n	80054b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	0151      	lsls	r1, r2, #5
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	440a      	add	r2, r1
 8005486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800548a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800548e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	0151      	lsls	r1, r2, #5
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	440a      	add	r2, r1
 80054a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	f003 030f 	and.w	r3, r3, #15
 80054c0:	2101      	movs	r1, #1
 80054c2:	fa01 f303 	lsl.w	r3, r1, r3
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	43db      	mvns	r3, r3
 80054ca:	68f9      	ldr	r1, [r7, #12]
 80054cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054d0:	4013      	ands	r3, r2
 80054d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054da:	69da      	ldr	r2, [r3, #28]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	f003 030f 	and.w	r3, r3, #15
 80054e4:	2101      	movs	r1, #1
 80054e6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	43db      	mvns	r3, r3
 80054ee:	68f9      	ldr	r1, [r7, #12]
 80054f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054f4:	4013      	ands	r3, r2
 80054f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	0159      	lsls	r1, r3, #5
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	440b      	add	r3, r1
 800550e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005512:	4619      	mov	r1, r3
 8005514:	4b35      	ldr	r3, [pc, #212]	; (80055ec <USB_DeactivateEndpoint+0x1b0>)
 8005516:	4013      	ands	r3, r2
 8005518:	600b      	str	r3, [r1, #0]
 800551a:	e060      	b.n	80055de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800552e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005532:	d11f      	bne.n	8005574 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	0151      	lsls	r1, r2, #5
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	440a      	add	r2, r1
 800554a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800554e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005552:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	0151      	lsls	r1, r2, #5
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	440a      	add	r2, r1
 800556a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800556e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005572:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	f003 030f 	and.w	r3, r3, #15
 8005584:	2101      	movs	r1, #1
 8005586:	fa01 f303 	lsl.w	r3, r1, r3
 800558a:	041b      	lsls	r3, r3, #16
 800558c:	43db      	mvns	r3, r3
 800558e:	68f9      	ldr	r1, [r7, #12]
 8005590:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005594:	4013      	ands	r3, r2
 8005596:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559e:	69da      	ldr	r2, [r3, #28]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	2101      	movs	r1, #1
 80055aa:	fa01 f303 	lsl.w	r3, r1, r3
 80055ae:	041b      	lsls	r3, r3, #16
 80055b0:	43db      	mvns	r3, r3
 80055b2:	68f9      	ldr	r1, [r7, #12]
 80055b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055b8:	4013      	ands	r3, r2
 80055ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	0159      	lsls	r1, r3, #5
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	440b      	add	r3, r1
 80055d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d6:	4619      	mov	r1, r3
 80055d8:	4b05      	ldr	r3, [pc, #20]	; (80055f0 <USB_DeactivateEndpoint+0x1b4>)
 80055da:	4013      	ands	r3, r2
 80055dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	ec337800 	.word	0xec337800
 80055f0:	eff37800 	.word	0xeff37800

080055f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08a      	sub	sp, #40	; 0x28
 80055f8:	af02      	add	r7, sp, #8
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	4613      	mov	r3, r2
 8005600:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	785b      	ldrb	r3, [r3, #1]
 8005610:	2b01      	cmp	r3, #1
 8005612:	f040 815c 	bne.w	80058ce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d132      	bne.n	8005684 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	4413      	add	r3, r2
 8005626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	0151      	lsls	r1, r2, #5
 8005630:	69fa      	ldr	r2, [r7, #28]
 8005632:	440a      	add	r2, r1
 8005634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005638:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800563c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005640:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	0151      	lsls	r1, r2, #5
 8005654:	69fa      	ldr	r2, [r7, #28]
 8005656:	440a      	add	r2, r1
 8005658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800565c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005660:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	0151      	lsls	r1, r2, #5
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	440a      	add	r2, r1
 8005678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800567c:	0cdb      	lsrs	r3, r3, #19
 800567e:	04db      	lsls	r3, r3, #19
 8005680:	6113      	str	r3, [r2, #16]
 8005682:	e074      	b.n	800576e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	0151      	lsls	r1, r2, #5
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	440a      	add	r2, r1
 800569a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800569e:	0cdb      	lsrs	r3, r3, #19
 80056a0:	04db      	lsls	r3, r3, #19
 80056a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	0151      	lsls	r1, r2, #5
 80056b6:	69fa      	ldr	r2, [r7, #28]
 80056b8:	440a      	add	r2, r1
 80056ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	6959      	ldr	r1, [r3, #20]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	440b      	add	r3, r1
 80056e0:	1e59      	subs	r1, r3, #1
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80056ea:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80056ec:	4b9d      	ldr	r3, [pc, #628]	; (8005964 <USB_EPStartXfer+0x370>)
 80056ee:	400b      	ands	r3, r1
 80056f0:	69b9      	ldr	r1, [r7, #24]
 80056f2:	0148      	lsls	r0, r1, #5
 80056f4:	69f9      	ldr	r1, [r7, #28]
 80056f6:	4401      	add	r1, r0
 80056f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056fc:	4313      	orrs	r3, r2
 80056fe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005716:	69b9      	ldr	r1, [r7, #24]
 8005718:	0148      	lsls	r0, r1, #5
 800571a:	69f9      	ldr	r1, [r7, #28]
 800571c:	4401      	add	r1, r0
 800571e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005722:	4313      	orrs	r3, r2
 8005724:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	78db      	ldrb	r3, [r3, #3]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d11f      	bne.n	800576e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	4413      	add	r3, r2
 8005736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	0151      	lsls	r1, r2, #5
 8005740:	69fa      	ldr	r2, [r7, #28]
 8005742:	440a      	add	r2, r1
 8005744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005748:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800574c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	0151      	lsls	r1, r2, #5
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	440a      	add	r2, r1
 8005764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005768:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800576c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d14b      	bne.n	800580c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d009      	beq.n	8005790 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005788:	461a      	mov	r2, r3
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	78db      	ldrb	r3, [r3, #3]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d128      	bne.n	80057ea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d110      	bne.n	80057ca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	0151      	lsls	r1, r2, #5
 80057ba:	69fa      	ldr	r2, [r7, #28]
 80057bc:	440a      	add	r2, r1
 80057be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	e00f      	b.n	80057ea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	0151      	lsls	r1, r2, #5
 80057dc:	69fa      	ldr	r2, [r7, #28]
 80057de:	440a      	add	r2, r1
 80057e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	0151      	lsls	r1, r2, #5
 80057fc:	69fa      	ldr	r2, [r7, #28]
 80057fe:	440a      	add	r2, r1
 8005800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005804:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	e12f      	b.n	8005a6c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	0151      	lsls	r1, r2, #5
 800581e:	69fa      	ldr	r2, [r7, #28]
 8005820:	440a      	add	r2, r1
 8005822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005826:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800582a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	78db      	ldrb	r3, [r3, #3]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d015      	beq.n	8005860 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 8117 	beq.w	8005a6c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	f003 030f 	and.w	r3, r3, #15
 800584e:	2101      	movs	r1, #1
 8005850:	fa01 f303 	lsl.w	r3, r1, r3
 8005854:	69f9      	ldr	r1, [r7, #28]
 8005856:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800585a:	4313      	orrs	r3, r2
 800585c:	634b      	str	r3, [r1, #52]	; 0x34
 800585e:	e105      	b.n	8005a6c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586c:	2b00      	cmp	r3, #0
 800586e:	d110      	bne.n	8005892 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	0151      	lsls	r1, r2, #5
 8005882:	69fa      	ldr	r2, [r7, #28]
 8005884:	440a      	add	r2, r1
 8005886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800588a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	e00f      	b.n	80058b2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	0151      	lsls	r1, r2, #5
 80058a4:	69fa      	ldr	r2, [r7, #28]
 80058a6:	440a      	add	r2, r1
 80058a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	68d9      	ldr	r1, [r3, #12]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	781a      	ldrb	r2, [r3, #0]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	b298      	uxth	r0, r3
 80058c0:	79fb      	ldrb	r3, [r7, #7]
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	4603      	mov	r3, r0
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 fa2b 	bl	8005d22 <USB_WritePacket>
 80058cc:	e0ce      	b.n	8005a6c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	0151      	lsls	r1, r2, #5
 80058e0:	69fa      	ldr	r2, [r7, #28]
 80058e2:	440a      	add	r2, r1
 80058e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058e8:	0cdb      	lsrs	r3, r3, #19
 80058ea:	04db      	lsls	r3, r3, #19
 80058ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	0151      	lsls	r1, r2, #5
 8005900:	69fa      	ldr	r2, [r7, #28]
 8005902:	440a      	add	r2, r1
 8005904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005908:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800590c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005910:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d126      	bne.n	8005968 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005926:	691a      	ldr	r2, [r3, #16]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005930:	69b9      	ldr	r1, [r7, #24]
 8005932:	0148      	lsls	r0, r1, #5
 8005934:	69f9      	ldr	r1, [r7, #28]
 8005936:	4401      	add	r1, r0
 8005938:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800593c:	4313      	orrs	r3, r2
 800593e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	0151      	lsls	r1, r2, #5
 8005952:	69fa      	ldr	r2, [r7, #28]
 8005954:	440a      	add	r2, r1
 8005956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800595a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800595e:	6113      	str	r3, [r2, #16]
 8005960:	e036      	b.n	80059d0 <USB_EPStartXfer+0x3dc>
 8005962:	bf00      	nop
 8005964:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	695a      	ldr	r2, [r3, #20]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	4413      	add	r3, r2
 8005972:	1e5a      	subs	r2, r3, #1
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	fbb2 f3f3 	udiv	r3, r2, r3
 800597c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	8afb      	ldrh	r3, [r7, #22]
 800598e:	04d9      	lsls	r1, r3, #19
 8005990:	4b39      	ldr	r3, [pc, #228]	; (8005a78 <USB_EPStartXfer+0x484>)
 8005992:	400b      	ands	r3, r1
 8005994:	69b9      	ldr	r1, [r7, #24]
 8005996:	0148      	lsls	r0, r1, #5
 8005998:	69f9      	ldr	r1, [r7, #28]
 800599a:	4401      	add	r1, r0
 800599c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059a0:	4313      	orrs	r3, r2
 80059a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b0:	691a      	ldr	r2, [r3, #16]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	8af9      	ldrh	r1, [r7, #22]
 80059b8:	fb01 f303 	mul.w	r3, r1, r3
 80059bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059c0:	69b9      	ldr	r1, [r7, #24]
 80059c2:	0148      	lsls	r0, r1, #5
 80059c4:	69f9      	ldr	r1, [r7, #28]
 80059c6:	4401      	add	r1, r0
 80059c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059cc:	4313      	orrs	r3, r2
 80059ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80059d0:	79fb      	ldrb	r3, [r7, #7]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d10d      	bne.n	80059f2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d009      	beq.n	80059f2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	68d9      	ldr	r1, [r3, #12]
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ee:	460a      	mov	r2, r1
 80059f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	78db      	ldrb	r3, [r3, #3]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d128      	bne.n	8005a4c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d110      	bne.n	8005a2c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	0151      	lsls	r1, r2, #5
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	440a      	add	r2, r1
 8005a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a28:	6013      	str	r3, [r2, #0]
 8005a2a:	e00f      	b.n	8005a4c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	0151      	lsls	r1, r2, #5
 8005a3e:	69fa      	ldr	r2, [r7, #28]
 8005a40:	440a      	add	r2, r1
 8005a42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a4a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	0151      	lsls	r1, r2, #5
 8005a5e:	69fa      	ldr	r2, [r7, #28]
 8005a60:	440a      	add	r2, r1
 8005a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3720      	adds	r7, #32
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	1ff80000 	.word	0x1ff80000

08005a7c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	4613      	mov	r3, r2
 8005a88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	785b      	ldrb	r3, [r3, #1]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	f040 80cd 	bne.w	8005c38 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d132      	bne.n	8005b0c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	0151      	lsls	r1, r2, #5
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	440a      	add	r2, r1
 8005abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ac4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ac8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	0151      	lsls	r1, r2, #5
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	440a      	add	r2, r1
 8005ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ae8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	0151      	lsls	r1, r2, #5
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	440a      	add	r2, r1
 8005b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b04:	0cdb      	lsrs	r3, r3, #19
 8005b06:	04db      	lsls	r3, r3, #19
 8005b08:	6113      	str	r3, [r2, #16]
 8005b0a:	e04e      	b.n	8005baa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	0151      	lsls	r1, r2, #5
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	440a      	add	r2, r1
 8005b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b26:	0cdb      	lsrs	r3, r3, #19
 8005b28:	04db      	lsls	r3, r3, #19
 8005b2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	0151      	lsls	r1, r2, #5
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	440a      	add	r2, r1
 8005b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b4e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	695a      	ldr	r2, [r3, #20]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d903      	bls.n	8005b64 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	0151      	lsls	r1, r2, #5
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	440a      	add	r2, r1
 8005b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b90:	691a      	ldr	r2, [r3, #16]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b9a:	6939      	ldr	r1, [r7, #16]
 8005b9c:	0148      	lsls	r0, r1, #5
 8005b9e:	6979      	ldr	r1, [r7, #20]
 8005ba0:	4401      	add	r1, r0
 8005ba2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005baa:	79fb      	ldrb	r3, [r7, #7]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d11e      	bne.n	8005bee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d009      	beq.n	8005bcc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	0151      	lsls	r1, r2, #5
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	440a      	add	r2, r1
 8005be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bea:	6013      	str	r3, [r2, #0]
 8005bec:	e092      	b.n	8005d14 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	0151      	lsls	r1, r2, #5
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	440a      	add	r2, r1
 8005c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c0c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d07e      	beq.n	8005d14 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	2101      	movs	r1, #1
 8005c28:	fa01 f303 	lsl.w	r3, r1, r3
 8005c2c:	6979      	ldr	r1, [r7, #20]
 8005c2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c32:	4313      	orrs	r3, r2
 8005c34:	634b      	str	r3, [r1, #52]	; 0x34
 8005c36:	e06d      	b.n	8005d14 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	0151      	lsls	r1, r2, #5
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	440a      	add	r2, r1
 8005c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c52:	0cdb      	lsrs	r3, r3, #19
 8005c54:	04db      	lsls	r3, r3, #19
 8005c56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	0151      	lsls	r1, r2, #5
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	440a      	add	r2, r1
 8005c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c7a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	689a      	ldr	r2, [r3, #8]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	0151      	lsls	r1, r2, #5
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	440a      	add	r2, r1
 8005ca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ca6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005caa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb8:	691a      	ldr	r2, [r3, #16]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cc2:	6939      	ldr	r1, [r7, #16]
 8005cc4:	0148      	lsls	r0, r1, #5
 8005cc6:	6979      	ldr	r1, [r7, #20]
 8005cc8:	4401      	add	r1, r0
 8005cca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005cd2:	79fb      	ldrb	r3, [r7, #7]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d10d      	bne.n	8005cf4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d009      	beq.n	8005cf4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	68d9      	ldr	r1, [r3, #12]
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf0:	460a      	mov	r2, r1
 8005cf2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b089      	sub	sp, #36	; 0x24
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	60f8      	str	r0, [r7, #12]
 8005d2a:	60b9      	str	r1, [r7, #8]
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	461a      	mov	r2, r3
 8005d30:	460b      	mov	r3, r1
 8005d32:	71fb      	strb	r3, [r7, #7]
 8005d34:	4613      	mov	r3, r2
 8005d36:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005d40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d123      	bne.n	8005d90 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d48:	88bb      	ldrh	r3, [r7, #4]
 8005d4a:	3303      	adds	r3, #3
 8005d4c:	089b      	lsrs	r3, r3, #2
 8005d4e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d50:	2300      	movs	r3, #0
 8005d52:	61bb      	str	r3, [r7, #24]
 8005d54:	e018      	b.n	8005d88 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d56:	79fb      	ldrb	r3, [r7, #7]
 8005d58:	031a      	lsls	r2, r3, #12
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d62:	461a      	mov	r2, r3
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	3301      	adds	r3, #1
 8005d74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	3301      	adds	r3, #1
 8005d86:	61bb      	str	r3, [r7, #24]
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d3e2      	bcc.n	8005d56 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3724      	adds	r7, #36	; 0x24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b08b      	sub	sp, #44	; 0x2c
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	60f8      	str	r0, [r7, #12]
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	4613      	mov	r3, r2
 8005daa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005db4:	88fb      	ldrh	r3, [r7, #6]
 8005db6:	089b      	lsrs	r3, r3, #2
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005dbc:	88fb      	ldrh	r3, [r7, #6]
 8005dbe:	f003 0303 	and.w	r3, r3, #3
 8005dc2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	623b      	str	r3, [r7, #32]
 8005dc8:	e014      	b.n	8005df4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	601a      	str	r2, [r3, #0]
    pDest++;
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	3301      	adds	r3, #1
 8005dda:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	3301      	adds	r3, #1
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	3301      	adds	r3, #1
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	3301      	adds	r3, #1
 8005dec:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	3301      	adds	r3, #1
 8005df2:	623b      	str	r3, [r7, #32]
 8005df4:	6a3a      	ldr	r2, [r7, #32]
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d3e6      	bcc.n	8005dca <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005dfc:	8bfb      	ldrh	r3, [r7, #30]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d01e      	beq.n	8005e40 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f107 0310 	add.w	r3, r7, #16
 8005e12:	6812      	ldr	r2, [r2, #0]
 8005e14:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	701a      	strb	r2, [r3, #0]
      i++;
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	623b      	str	r3, [r7, #32]
      pDest++;
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	3301      	adds	r3, #1
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005e34:	8bfb      	ldrh	r3, [r7, #30]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e3a:	8bfb      	ldrh	r3, [r7, #30]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1ea      	bne.n	8005e16 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	372c      	adds	r7, #44	; 0x2c
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b085      	sub	sp, #20
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	785b      	ldrb	r3, [r3, #1]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d12c      	bne.n	8005ec4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	db12      	blt.n	8005ea2 <USB_EPSetStall+0x54>
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00f      	beq.n	8005ea2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	0151      	lsls	r1, r2, #5
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	440a      	add	r2, r1
 8005e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ea0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	0151      	lsls	r1, r2, #5
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	440a      	add	r2, r1
 8005eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ebc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ec0:	6013      	str	r3, [r2, #0]
 8005ec2:	e02b      	b.n	8005f1c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	db12      	blt.n	8005efc <USB_EPSetStall+0xae>
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00f      	beq.n	8005efc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	0151      	lsls	r1, r2, #5
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	440a      	add	r2, r1
 8005ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005efa:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	0151      	lsls	r1, r2, #5
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	440a      	add	r2, r1
 8005f12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3714      	adds	r7, #20
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b085      	sub	sp, #20
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	785b      	ldrb	r3, [r3, #1]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d128      	bne.n	8005f98 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	0151      	lsls	r1, r2, #5
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f64:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	78db      	ldrb	r3, [r3, #3]
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d003      	beq.n	8005f76 <USB_EPClearStall+0x4c>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	78db      	ldrb	r3, [r3, #3]
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d138      	bne.n	8005fe8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	0151      	lsls	r1, r2, #5
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	440a      	add	r2, r1
 8005f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	e027      	b.n	8005fe8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	0151      	lsls	r1, r2, #5
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	440a      	add	r2, r1
 8005fae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fb6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	78db      	ldrb	r3, [r3, #3]
 8005fbc:	2b03      	cmp	r3, #3
 8005fbe:	d003      	beq.n	8005fc8 <USB_EPClearStall+0x9e>
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	78db      	ldrb	r3, [r3, #3]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d10f      	bne.n	8005fe8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b085      	sub	sp, #20
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	460b      	mov	r3, r1
 8006000:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006014:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006018:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	78fb      	ldrb	r3, [r7, #3]
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800602a:	68f9      	ldr	r1, [r7, #12]
 800602c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006030:	4313      	orrs	r3, r2
 8006032:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006042:	b480      	push	{r7}
 8006044:	b085      	sub	sp, #20
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800605c:	f023 0303 	bic.w	r3, r3, #3
 8006060:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006070:	f023 0302 	bic.w	r3, r3, #2
 8006074:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800609e:	f023 0303 	bic.w	r3, r3, #3
 80060a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060b2:	f043 0302 	orr.w	r3, r3, #2
 80060b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b085      	sub	sp, #20
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4013      	ands	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80060de:	68fb      	ldr	r3, [r7, #12]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	4013      	ands	r3, r2
 800610e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	0c1b      	lsrs	r3, r3, #16
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	4013      	ands	r3, r2
 8006142:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	b29b      	uxth	r3, r3
}
 8006148:	4618      	mov	r0, r3
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	4013      	ands	r3, r2
 8006180:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006182:	68bb      	ldr	r3, [r7, #8]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	460b      	mov	r3, r1
 800619a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80061b4:	78fb      	ldrb	r3, [r7, #3]
 80061b6:	f003 030f 	and.w	r3, r3, #15
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	fa22 f303 	lsr.w	r3, r2, r3
 80061c0:	01db      	lsls	r3, r3, #7
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80061ca:	78fb      	ldrb	r3, [r7, #3]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	4013      	ands	r3, r2
 80061dc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061de:	68bb      	ldr	r3, [r7, #8]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	371c      	adds	r7, #28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	f003 0301 	and.w	r3, r3, #1
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006222:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006226:	f023 0307 	bic.w	r3, r3, #7
 800622a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800623a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800623e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
	...

08006250 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	460b      	mov	r3, r1
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	333c      	adds	r3, #60	; 0x3c
 8006266:	3304      	adds	r3, #4
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	4a26      	ldr	r2, [pc, #152]	; (8006308 <USB_EP0_OutStart+0xb8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d90a      	bls.n	800628a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006280:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006284:	d101      	bne.n	800628a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	e037      	b.n	80062fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006290:	461a      	mov	r2, r3
 8006292:	2300      	movs	r3, #0
 8006294:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b8:	f043 0318 	orr.w	r3, r3, #24
 80062bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062cc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80062d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80062d2:	7afb      	ldrb	r3, [r7, #11]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d10f      	bne.n	80062f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062de:	461a      	mov	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80062f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	4f54300a 	.word	0x4f54300a

0800630c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	3301      	adds	r3, #1
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	4a13      	ldr	r2, [pc, #76]	; (800636c <USB_CoreReset+0x60>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d901      	bls.n	8006328 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e01a      	b.n	800635e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	daf3      	bge.n	8006318 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006330:	2300      	movs	r3, #0
 8006332:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	f043 0201 	orr.w	r2, r3, #1
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	3301      	adds	r3, #1
 8006344:	60fb      	str	r3, [r7, #12]
 8006346:	4a09      	ldr	r2, [pc, #36]	; (800636c <USB_CoreReset+0x60>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d901      	bls.n	8006350 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e006      	b.n	800635e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b01      	cmp	r3, #1
 800635a:	d0f1      	beq.n	8006340 <USB_CoreReset+0x34>

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	00030d40 	.word	0x00030d40

08006370 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	460b      	mov	r3, r1
 800637a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800637c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006380:	f002 f96a 	bl	8008658 <USBD_static_malloc>
 8006384:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d105      	bne.n	8006398 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006394:	2302      	movs	r3, #2
 8006396:	e066      	b.n	8006466 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	7c1b      	ldrb	r3, [r3, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d119      	bne.n	80063dc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80063a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063ac:	2202      	movs	r2, #2
 80063ae:	2181      	movs	r1, #129	; 0x81
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f002 f82e 	bl	8008412 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80063bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063c0:	2202      	movs	r2, #2
 80063c2:	2101      	movs	r1, #1
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f002 f824 	bl	8008412 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2210      	movs	r2, #16
 80063d6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80063da:	e016      	b.n	800640a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80063dc:	2340      	movs	r3, #64	; 0x40
 80063de:	2202      	movs	r2, #2
 80063e0:	2181      	movs	r1, #129	; 0x81
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f002 f815 	bl	8008412 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80063ee:	2340      	movs	r3, #64	; 0x40
 80063f0:	2202      	movs	r2, #2
 80063f2:	2101      	movs	r1, #1
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f002 f80c 	bl	8008412 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2210      	movs	r2, #16
 8006406:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800640a:	2308      	movs	r3, #8
 800640c:	2203      	movs	r2, #3
 800640e:	2182      	movs	r1, #130	; 0x82
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f001 fffe 	bl	8008412 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	7c1b      	ldrb	r3, [r3, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d109      	bne.n	8006454 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006446:	f44f 7300 	mov.w	r3, #512	; 0x200
 800644a:	2101      	movs	r1, #1
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f002 f8cf 	bl	80085f0 <USBD_LL_PrepareReceive>
 8006452:	e007      	b.n	8006464 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800645a:	2340      	movs	r3, #64	; 0x40
 800645c:	2101      	movs	r1, #1
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f002 f8c6 	bl	80085f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b082      	sub	sp, #8
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	460b      	mov	r3, r1
 8006478:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800647a:	2181      	movs	r1, #129	; 0x81
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f001 ffee 	bl	800845e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006488:	2101      	movs	r1, #1
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f001 ffe7 	bl	800845e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006498:	2182      	movs	r1, #130	; 0x82
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f001 ffdf 	bl	800845e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00e      	beq.n	80064d8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064ca:	4618      	mov	r0, r3
 80064cc:	f002 f8d2 	bl	8008674 <USBD_static_free>
    pdev->pClassData = NULL;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006508:	2303      	movs	r3, #3
 800650a:	e0af      	b.n	800666c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006514:	2b00      	cmp	r3, #0
 8006516:	d03f      	beq.n	8006598 <USBD_CDC_Setup+0xb4>
 8006518:	2b20      	cmp	r3, #32
 800651a:	f040 809f 	bne.w	800665c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	88db      	ldrh	r3, [r3, #6]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d02e      	beq.n	8006584 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	b25b      	sxtb	r3, r3
 800652c:	2b00      	cmp	r3, #0
 800652e:	da16      	bge.n	800655e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800653c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	88d2      	ldrh	r2, [r2, #6]
 8006542:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	88db      	ldrh	r3, [r3, #6]
 8006548:	2b07      	cmp	r3, #7
 800654a:	bf28      	it	cs
 800654c:	2307      	movcs	r3, #7
 800654e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	89fa      	ldrh	r2, [r7, #14]
 8006554:	4619      	mov	r1, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f001 fb19 	bl	8007b8e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800655c:	e085      	b.n	800666a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	785a      	ldrb	r2, [r3, #1]
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	88db      	ldrh	r3, [r3, #6]
 800656c:	b2da      	uxtb	r2, r3
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006574:	6939      	ldr	r1, [r7, #16]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	88db      	ldrh	r3, [r3, #6]
 800657a:	461a      	mov	r2, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 fb32 	bl	8007be6 <USBD_CtlPrepareRx>
      break;
 8006582:	e072      	b.n	800666a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	7850      	ldrb	r0, [r2, #1]
 8006590:	2200      	movs	r2, #0
 8006592:	6839      	ldr	r1, [r7, #0]
 8006594:	4798      	blx	r3
      break;
 8006596:	e068      	b.n	800666a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	785b      	ldrb	r3, [r3, #1]
 800659c:	2b0b      	cmp	r3, #11
 800659e:	d852      	bhi.n	8006646 <USBD_CDC_Setup+0x162>
 80065a0:	a201      	add	r2, pc, #4	; (adr r2, 80065a8 <USBD_CDC_Setup+0xc4>)
 80065a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a6:	bf00      	nop
 80065a8:	080065d9 	.word	0x080065d9
 80065ac:	08006655 	.word	0x08006655
 80065b0:	08006647 	.word	0x08006647
 80065b4:	08006647 	.word	0x08006647
 80065b8:	08006647 	.word	0x08006647
 80065bc:	08006647 	.word	0x08006647
 80065c0:	08006647 	.word	0x08006647
 80065c4:	08006647 	.word	0x08006647
 80065c8:	08006647 	.word	0x08006647
 80065cc:	08006647 	.word	0x08006647
 80065d0:	08006603 	.word	0x08006603
 80065d4:	0800662d 	.word	0x0800662d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	d107      	bne.n	80065f4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80065e4:	f107 030a 	add.w	r3, r7, #10
 80065e8:	2202      	movs	r2, #2
 80065ea:	4619      	mov	r1, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f001 face 	bl	8007b8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065f2:	e032      	b.n	800665a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80065f4:	6839      	ldr	r1, [r7, #0]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f001 fa58 	bl	8007aac <USBD_CtlError>
            ret = USBD_FAIL;
 80065fc:	2303      	movs	r3, #3
 80065fe:	75fb      	strb	r3, [r7, #23]
          break;
 8006600:	e02b      	b.n	800665a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b03      	cmp	r3, #3
 800660c:	d107      	bne.n	800661e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800660e:	f107 030d 	add.w	r3, r7, #13
 8006612:	2201      	movs	r2, #1
 8006614:	4619      	mov	r1, r3
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f001 fab9 	bl	8007b8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800661c:	e01d      	b.n	800665a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800661e:	6839      	ldr	r1, [r7, #0]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 fa43 	bl	8007aac <USBD_CtlError>
            ret = USBD_FAIL;
 8006626:	2303      	movs	r3, #3
 8006628:	75fb      	strb	r3, [r7, #23]
          break;
 800662a:	e016      	b.n	800665a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b03      	cmp	r3, #3
 8006636:	d00f      	beq.n	8006658 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006638:	6839      	ldr	r1, [r7, #0]
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 fa36 	bl	8007aac <USBD_CtlError>
            ret = USBD_FAIL;
 8006640:	2303      	movs	r3, #3
 8006642:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006644:	e008      	b.n	8006658 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006646:	6839      	ldr	r1, [r7, #0]
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f001 fa2f 	bl	8007aac <USBD_CtlError>
          ret = USBD_FAIL;
 800664e:	2303      	movs	r3, #3
 8006650:	75fb      	strb	r3, [r7, #23]
          break;
 8006652:	e002      	b.n	800665a <USBD_CDC_Setup+0x176>
          break;
 8006654:	bf00      	nop
 8006656:	e008      	b.n	800666a <USBD_CDC_Setup+0x186>
          break;
 8006658:	bf00      	nop
      }
      break;
 800665a:	e006      	b.n	800666a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800665c:	6839      	ldr	r1, [r7, #0]
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f001 fa24 	bl	8007aac <USBD_CtlError>
      ret = USBD_FAIL;
 8006664:	2303      	movs	r3, #3
 8006666:	75fb      	strb	r3, [r7, #23]
      break;
 8006668:	bf00      	nop
  }

  return (uint8_t)ret;
 800666a:	7dfb      	ldrb	r3, [r7, #23]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3718      	adds	r7, #24
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006686:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006692:	2303      	movs	r3, #3
 8006694:	e04f      	b.n	8006736 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800669c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800669e:	78fa      	ldrb	r2, [r7, #3]
 80066a0:	6879      	ldr	r1, [r7, #4]
 80066a2:	4613      	mov	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	440b      	add	r3, r1
 80066ac:	3318      	adds	r3, #24
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d029      	beq.n	8006708 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80066b4:	78fa      	ldrb	r2, [r7, #3]
 80066b6:	6879      	ldr	r1, [r7, #4]
 80066b8:	4613      	mov	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	440b      	add	r3, r1
 80066c2:	3318      	adds	r3, #24
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	78f9      	ldrb	r1, [r7, #3]
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	460b      	mov	r3, r1
 80066cc:	00db      	lsls	r3, r3, #3
 80066ce:	1a5b      	subs	r3, r3, r1
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4403      	add	r3, r0
 80066d4:	3344      	adds	r3, #68	; 0x44
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80066dc:	fb03 f301 	mul.w	r3, r3, r1
 80066e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d110      	bne.n	8006708 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80066e6:	78fa      	ldrb	r2, [r7, #3]
 80066e8:	6879      	ldr	r1, [r7, #4]
 80066ea:	4613      	mov	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	440b      	add	r3, r1
 80066f4:	3318      	adds	r3, #24
 80066f6:	2200      	movs	r2, #0
 80066f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80066fa:	78f9      	ldrb	r1, [r7, #3]
 80066fc:	2300      	movs	r3, #0
 80066fe:	2200      	movs	r2, #0
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f001 ff54 	bl	80085ae <USBD_LL_Transmit>
 8006706:	e015      	b.n	8006734 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	2200      	movs	r2, #0
 800670c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00b      	beq.n	8006734 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006730:	78fa      	ldrb	r2, [r7, #3]
 8006732:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b084      	sub	sp, #16
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	460b      	mov	r3, r1
 8006748:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006750:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800675c:	2303      	movs	r3, #3
 800675e:	e015      	b.n	800678c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006760:	78fb      	ldrb	r3, [r7, #3]
 8006762:	4619      	mov	r1, r3
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f001 ff64 	bl	8008632 <USBD_LL_GetRxDataSize>
 800676a:	4602      	mov	r2, r0
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006786:	4611      	mov	r1, r2
 8006788:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067a2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e01b      	b.n	80067e6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d015      	beq.n	80067e4 <USBD_CDC_EP0_RxReady+0x50>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80067be:	2bff      	cmp	r3, #255	; 0xff
 80067c0:	d010      	beq.n	80067e4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80067d0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80067d8:	b292      	uxth	r2, r2
 80067da:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	22ff      	movs	r2, #255	; 0xff
 80067e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
	...

080067f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2243      	movs	r2, #67	; 0x43
 80067fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80067fe:	4b03      	ldr	r3, [pc, #12]	; (800680c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006800:	4618      	mov	r0, r3
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	2000013c 	.word	0x2000013c

08006810 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2243      	movs	r2, #67	; 0x43
 800681c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800681e:	4b03      	ldr	r3, [pc, #12]	; (800682c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006820:	4618      	mov	r0, r3
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	200000f8 	.word	0x200000f8

08006830 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2243      	movs	r2, #67	; 0x43
 800683c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800683e:	4b03      	ldr	r3, [pc, #12]	; (800684c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006840:	4618      	mov	r0, r3
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	20000180 	.word	0x20000180

08006850 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	220a      	movs	r2, #10
 800685c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800685e:	4b03      	ldr	r3, [pc, #12]	; (800686c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	200000b4 	.word	0x200000b4

08006870 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006880:	2303      	movs	r3, #3
 8006882:	e004      	b.n	800688e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800689a:	b480      	push	{r7}
 800689c:	b087      	sub	sp, #28
 800689e:	af00      	add	r7, sp, #0
 80068a0:	60f8      	str	r0, [r7, #12]
 80068a2:	60b9      	str	r1, [r7, #8]
 80068a4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068ac:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e008      	b.n	80068ca <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b085      	sub	sp, #20
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e004      	b.n	80068fc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006916:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006918:	2301      	movs	r3, #1
 800691a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006926:	2303      	movs	r3, #3
 8006928:	e01a      	b.n	8006960 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006930:	2b00      	cmp	r3, #0
 8006932:	d114      	bne.n	800695e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2201      	movs	r2, #1
 8006938:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006952:	2181      	movs	r1, #129	; 0x81
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f001 fe2a 	bl	80085ae <USBD_LL_Transmit>

    ret = USBD_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800695e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006976:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006982:	2303      	movs	r3, #3
 8006984:	e016      	b.n	80069b4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	7c1b      	ldrb	r3, [r3, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d109      	bne.n	80069a2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006994:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006998:	2101      	movs	r1, #1
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f001 fe28 	bl	80085f0 <USBD_LL_PrepareReceive>
 80069a0:	e007      	b.n	80069b2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069a8:	2340      	movs	r3, #64	; 0x40
 80069aa:	2101      	movs	r1, #1
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f001 fe1f 	bl	80085f0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	4613      	mov	r3, r2
 80069c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e01f      	b.n	8006a14 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	79fa      	ldrb	r2, [r7, #7]
 8006a06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f001 fc9b 	bl	8008344 <USBD_LL_Init>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a26:	2300      	movs	r3, #0
 8006a28:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e016      	b.n	8006a62 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00b      	beq.n	8006a60 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a50:	f107 020e 	add.w	r2, r7, #14
 8006a54:	4610      	mov	r0, r2
 8006a56:	4798      	blx	r3
 8006a58:	4602      	mov	r2, r0
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b082      	sub	sp, #8
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f001 fcb2 	bl	80083dc <USBD_LL_Start>
 8006a78:	4603      	mov	r3, r0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b083      	sub	sp, #12
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d009      	beq.n	8006ac6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	78fa      	ldrb	r2, [r7, #3]
 8006abc:	4611      	mov	r1, r2
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	4798      	blx	r3
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	460b      	mov	r3, r1
 8006ada:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d007      	beq.n	8006af6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	78fa      	ldrb	r2, [r7, #3]
 8006af0:	4611      	mov	r1, r2
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	4798      	blx	r3
  }

  return USBD_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 ff90 	bl	8007a38 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006b26:	461a      	mov	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b34:	f003 031f 	and.w	r3, r3, #31
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d01a      	beq.n	8006b72 <USBD_LL_SetupStage+0x72>
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d822      	bhi.n	8006b86 <USBD_LL_SetupStage+0x86>
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <USBD_LL_SetupStage+0x4a>
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d00a      	beq.n	8006b5e <USBD_LL_SetupStage+0x5e>
 8006b48:	e01d      	b.n	8006b86 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b50:	4619      	mov	r1, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fa62 	bl	800701c <USBD_StdDevReq>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b5c:	e020      	b.n	8006ba0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fac6 	bl	80070f8 <USBD_StdItfReq>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b70:	e016      	b.n	8006ba0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fb05 	bl	800718a <USBD_StdEPReq>
 8006b80:	4603      	mov	r3, r0
 8006b82:	73fb      	strb	r3, [r7, #15]
      break;
 8006b84:	e00c      	b.n	8006ba0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f001 fc81 	bl	800849c <USBD_LL_StallEP>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b9e:	bf00      	nop
  }

  return ret;
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b086      	sub	sp, #24
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	60f8      	str	r0, [r7, #12]
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	607a      	str	r2, [r7, #4]
 8006bb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006bb8:	7afb      	ldrb	r3, [r7, #11]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d138      	bne.n	8006c30 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006bc4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bcc:	2b03      	cmp	r3, #3
 8006bce:	d14a      	bne.n	8006c66 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	689a      	ldr	r2, [r3, #8]
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d913      	bls.n	8006c04 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	689a      	ldr	r2, [r3, #8]
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	1ad2      	subs	r2, r2, r3
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	68da      	ldr	r2, [r3, #12]
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	bf28      	it	cs
 8006bf6:	4613      	movcs	r3, r2
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	6879      	ldr	r1, [r7, #4]
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f001 f80f 	bl	8007c20 <USBD_CtlContinueRx>
 8006c02:	e030      	b.n	8006c66 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b03      	cmp	r3, #3
 8006c0e:	d10b      	bne.n	8006c28 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d005      	beq.n	8006c28 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f001 f80a 	bl	8007c42 <USBD_CtlSendStatus>
 8006c2e:	e01a      	b.n	8006c66 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b03      	cmp	r3, #3
 8006c3a:	d114      	bne.n	8006c66 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00e      	beq.n	8006c66 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	7afa      	ldrb	r2, [r7, #11]
 8006c52:	4611      	mov	r1, r2
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	4798      	blx	r3
 8006c58:	4603      	mov	r3, r0
 8006c5a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
 8006c64:	e000      	b.n	8006c68 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	460b      	mov	r3, r1
 8006c7a:	607a      	str	r2, [r7, #4]
 8006c7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006c7e:	7afb      	ldrb	r3, [r7, #11]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d16b      	bne.n	8006d5c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	3314      	adds	r3, #20
 8006c88:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d156      	bne.n	8006d42 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	689a      	ldr	r2, [r3, #8]
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d914      	bls.n	8006cca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	1ad2      	subs	r2, r2, r3
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	6879      	ldr	r1, [r7, #4]
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f000 ff84 	bl	8007bc4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f001 fc94 	bl	80085f0 <USBD_LL_PrepareReceive>
 8006cc8:	e03b      	b.n	8006d42 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	68da      	ldr	r2, [r3, #12]
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d11c      	bne.n	8006d10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d316      	bcc.n	8006d10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d20f      	bcs.n	8006d10 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 ff65 	bl	8007bc4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d02:	2300      	movs	r3, #0
 8006d04:	2200      	movs	r2, #0
 8006d06:	2100      	movs	r1, #0
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f001 fc71 	bl	80085f0 <USBD_LL_PrepareReceive>
 8006d0e:	e018      	b.n	8006d42 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b03      	cmp	r3, #3
 8006d1a:	d10b      	bne.n	8006d34 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d005      	beq.n	8006d34 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d34:	2180      	movs	r1, #128	; 0x80
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f001 fbb0 	bl	800849c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 ff93 	bl	8007c68 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d122      	bne.n	8006d92 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f7ff fe98 	bl	8006a82 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d5a:	e01a      	b.n	8006d92 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b03      	cmp	r3, #3
 8006d66:	d114      	bne.n	8006d92 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00e      	beq.n	8006d92 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	7afa      	ldrb	r2, [r7, #11]
 8006d7e:	4611      	mov	r1, r2
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	4798      	blx	r3
 8006d84:	4603      	mov	r3, r0
 8006d86:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006d88:	7dfb      	ldrb	r3, [r7, #23]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006d8e:	7dfb      	ldrb	r3, [r7, #23]
 8006d90:	e000      	b.n	8006d94 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3718      	adds	r7, #24
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e02f      	b.n	8006e30 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00f      	beq.n	8006dfa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d009      	beq.n	8006dfa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	6852      	ldr	r2, [r2, #4]
 8006df2:	b2d2      	uxtb	r2, r2
 8006df4:	4611      	mov	r1, r2
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dfa:	2340      	movs	r3, #64	; 0x40
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	2100      	movs	r1, #0
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f001 fb06 	bl	8008412 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2240      	movs	r2, #64	; 0x40
 8006e12:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e16:	2340      	movs	r3, #64	; 0x40
 8006e18:	2200      	movs	r2, #0
 8006e1a:	2180      	movs	r1, #128	; 0x80
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f001 faf8 	bl	8008412 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2240      	movs	r2, #64	; 0x40
 8006e2c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	460b      	mov	r3, r1
 8006e42:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	78fa      	ldrb	r2, [r7, #3]
 8006e48:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2204      	movs	r2, #4
 8006e72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	d106      	bne.n	8006ea6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e012      	b.n	8006ef0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d10b      	bne.n	8006eee <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d005      	beq.n	8006eee <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	460b      	mov	r3, r1
 8006f02:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e014      	b.n	8006f3c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d10d      	bne.n	8006f3a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d007      	beq.n	8006f3a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	78fa      	ldrb	r2, [r7, #3]
 8006f34:	4611      	mov	r1, r2
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e014      	b.n	8006f88 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d10d      	bne.n	8006f86 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d007      	beq.n	8006f86 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	78fa      	ldrb	r2, [r7, #3]
 8006f80:	4611      	mov	r1, r2
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b082      	sub	sp, #8
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d009      	beq.n	8006fd4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	6852      	ldr	r2, [r2, #4]
 8006fcc:	b2d2      	uxtb	r2, r2
 8006fce:	4611      	mov	r1, r2
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	4798      	blx	r3
  }

  return USBD_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b087      	sub	sp, #28
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006ffc:	8a3b      	ldrh	r3, [r7, #16]
 8006ffe:	021b      	lsls	r3, r3, #8
 8007000:	b21a      	sxth	r2, r3
 8007002:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007006:	4313      	orrs	r3, r2
 8007008:	b21b      	sxth	r3, r3
 800700a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800700c:	89fb      	ldrh	r3, [r7, #14]
}
 800700e:	4618      	mov	r0, r3
 8007010:	371c      	adds	r7, #28
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
	...

0800701c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007032:	2b40      	cmp	r3, #64	; 0x40
 8007034:	d005      	beq.n	8007042 <USBD_StdDevReq+0x26>
 8007036:	2b40      	cmp	r3, #64	; 0x40
 8007038:	d853      	bhi.n	80070e2 <USBD_StdDevReq+0xc6>
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00b      	beq.n	8007056 <USBD_StdDevReq+0x3a>
 800703e:	2b20      	cmp	r3, #32
 8007040:	d14f      	bne.n	80070e2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	4798      	blx	r3
 8007050:	4603      	mov	r3, r0
 8007052:	73fb      	strb	r3, [r7, #15]
      break;
 8007054:	e04a      	b.n	80070ec <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	785b      	ldrb	r3, [r3, #1]
 800705a:	2b09      	cmp	r3, #9
 800705c:	d83b      	bhi.n	80070d6 <USBD_StdDevReq+0xba>
 800705e:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <USBD_StdDevReq+0x48>)
 8007060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007064:	080070b9 	.word	0x080070b9
 8007068:	080070cd 	.word	0x080070cd
 800706c:	080070d7 	.word	0x080070d7
 8007070:	080070c3 	.word	0x080070c3
 8007074:	080070d7 	.word	0x080070d7
 8007078:	08007097 	.word	0x08007097
 800707c:	0800708d 	.word	0x0800708d
 8007080:	080070d7 	.word	0x080070d7
 8007084:	080070af 	.word	0x080070af
 8007088:	080070a1 	.word	0x080070a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f9de 	bl	8007450 <USBD_GetDescriptor>
          break;
 8007094:	e024      	b.n	80070e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fb43 	bl	8007724 <USBD_SetAddress>
          break;
 800709e:	e01f      	b.n	80070e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fb82 	bl	80077ac <USBD_SetConfig>
 80070a8:	4603      	mov	r3, r0
 80070aa:	73fb      	strb	r3, [r7, #15]
          break;
 80070ac:	e018      	b.n	80070e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fc21 	bl	80078f8 <USBD_GetConfig>
          break;
 80070b6:	e013      	b.n	80070e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fc52 	bl	8007964 <USBD_GetStatus>
          break;
 80070c0:	e00e      	b.n	80070e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fc81 	bl	80079cc <USBD_SetFeature>
          break;
 80070ca:	e009      	b.n	80070e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fc90 	bl	80079f4 <USBD_ClrFeature>
          break;
 80070d4:	e004      	b.n	80070e0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fce7 	bl	8007aac <USBD_CtlError>
          break;
 80070de:	bf00      	nop
      }
      break;
 80070e0:	e004      	b.n	80070ec <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fce1 	bl	8007aac <USBD_CtlError>
      break;
 80070ea:	bf00      	nop
  }

  return ret;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop

080070f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800710e:	2b40      	cmp	r3, #64	; 0x40
 8007110:	d005      	beq.n	800711e <USBD_StdItfReq+0x26>
 8007112:	2b40      	cmp	r3, #64	; 0x40
 8007114:	d82f      	bhi.n	8007176 <USBD_StdItfReq+0x7e>
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <USBD_StdItfReq+0x26>
 800711a:	2b20      	cmp	r3, #32
 800711c:	d12b      	bne.n	8007176 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007124:	b2db      	uxtb	r3, r3
 8007126:	3b01      	subs	r3, #1
 8007128:	2b02      	cmp	r3, #2
 800712a:	d81d      	bhi.n	8007168 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	889b      	ldrh	r3, [r3, #4]
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b01      	cmp	r3, #1
 8007134:	d813      	bhi.n	800715e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	6839      	ldr	r1, [r7, #0]
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	4798      	blx	r3
 8007144:	4603      	mov	r3, r0
 8007146:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	88db      	ldrh	r3, [r3, #6]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d110      	bne.n	8007172 <USBD_StdItfReq+0x7a>
 8007150:	7bfb      	ldrb	r3, [r7, #15]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10d      	bne.n	8007172 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fd73 	bl	8007c42 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800715c:	e009      	b.n	8007172 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fca3 	bl	8007aac <USBD_CtlError>
          break;
 8007166:	e004      	b.n	8007172 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fc9e 	bl	8007aac <USBD_CtlError>
          break;
 8007170:	e000      	b.n	8007174 <USBD_StdItfReq+0x7c>
          break;
 8007172:	bf00      	nop
      }
      break;
 8007174:	e004      	b.n	8007180 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fc97 	bl	8007aac <USBD_CtlError>
      break;
 800717e:	bf00      	nop
  }

  return ret;
 8007180:	7bfb      	ldrb	r3, [r7, #15]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	889b      	ldrh	r3, [r3, #4]
 800719c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071a6:	2b40      	cmp	r3, #64	; 0x40
 80071a8:	d007      	beq.n	80071ba <USBD_StdEPReq+0x30>
 80071aa:	2b40      	cmp	r3, #64	; 0x40
 80071ac:	f200 8145 	bhi.w	800743a <USBD_StdEPReq+0x2b0>
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00c      	beq.n	80071ce <USBD_StdEPReq+0x44>
 80071b4:	2b20      	cmp	r3, #32
 80071b6:	f040 8140 	bne.w	800743a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	4798      	blx	r3
 80071c8:	4603      	mov	r3, r0
 80071ca:	73fb      	strb	r3, [r7, #15]
      break;
 80071cc:	e13a      	b.n	8007444 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	785b      	ldrb	r3, [r3, #1]
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	d007      	beq.n	80071e6 <USBD_StdEPReq+0x5c>
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	f300 8129 	bgt.w	800742e <USBD_StdEPReq+0x2a4>
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d07f      	beq.n	80072e0 <USBD_StdEPReq+0x156>
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d03c      	beq.n	800725e <USBD_StdEPReq+0xd4>
 80071e4:	e123      	b.n	800742e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d002      	beq.n	80071f8 <USBD_StdEPReq+0x6e>
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d016      	beq.n	8007224 <USBD_StdEPReq+0x9a>
 80071f6:	e02c      	b.n	8007252 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071f8:	7bbb      	ldrb	r3, [r7, #14]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00d      	beq.n	800721a <USBD_StdEPReq+0x90>
 80071fe:	7bbb      	ldrb	r3, [r7, #14]
 8007200:	2b80      	cmp	r3, #128	; 0x80
 8007202:	d00a      	beq.n	800721a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007204:	7bbb      	ldrb	r3, [r7, #14]
 8007206:	4619      	mov	r1, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 f947 	bl	800849c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800720e:	2180      	movs	r1, #128	; 0x80
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f001 f943 	bl	800849c <USBD_LL_StallEP>
 8007216:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007218:	e020      	b.n	800725c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fc45 	bl	8007aac <USBD_CtlError>
              break;
 8007222:	e01b      	b.n	800725c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	885b      	ldrh	r3, [r3, #2]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10e      	bne.n	800724a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800722c:	7bbb      	ldrb	r3, [r7, #14]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00b      	beq.n	800724a <USBD_StdEPReq+0xc0>
 8007232:	7bbb      	ldrb	r3, [r7, #14]
 8007234:	2b80      	cmp	r3, #128	; 0x80
 8007236:	d008      	beq.n	800724a <USBD_StdEPReq+0xc0>
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	88db      	ldrh	r3, [r3, #6]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d104      	bne.n	800724a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007240:	7bbb      	ldrb	r3, [r7, #14]
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f001 f929 	bl	800849c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fcf9 	bl	8007c42 <USBD_CtlSendStatus>

              break;
 8007250:	e004      	b.n	800725c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fc29 	bl	8007aac <USBD_CtlError>
              break;
 800725a:	bf00      	nop
          }
          break;
 800725c:	e0ec      	b.n	8007438 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d002      	beq.n	8007270 <USBD_StdEPReq+0xe6>
 800726a:	2b03      	cmp	r3, #3
 800726c:	d016      	beq.n	800729c <USBD_StdEPReq+0x112>
 800726e:	e030      	b.n	80072d2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00d      	beq.n	8007292 <USBD_StdEPReq+0x108>
 8007276:	7bbb      	ldrb	r3, [r7, #14]
 8007278:	2b80      	cmp	r3, #128	; 0x80
 800727a:	d00a      	beq.n	8007292 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800727c:	7bbb      	ldrb	r3, [r7, #14]
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f001 f90b 	bl	800849c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007286:	2180      	movs	r1, #128	; 0x80
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f001 f907 	bl	800849c <USBD_LL_StallEP>
 800728e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007290:	e025      	b.n	80072de <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007292:	6839      	ldr	r1, [r7, #0]
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fc09 	bl	8007aac <USBD_CtlError>
              break;
 800729a:	e020      	b.n	80072de <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	885b      	ldrh	r3, [r3, #2]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d11b      	bne.n	80072dc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072a4:	7bbb      	ldrb	r3, [r7, #14]
 80072a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d004      	beq.n	80072b8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80072ae:	7bbb      	ldrb	r3, [r7, #14]
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f001 f911 	bl	80084da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fcc2 	bl	8007c42 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	4798      	blx	r3
 80072cc:	4603      	mov	r3, r0
 80072ce:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80072d0:	e004      	b.n	80072dc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fbe9 	bl	8007aac <USBD_CtlError>
              break;
 80072da:	e000      	b.n	80072de <USBD_StdEPReq+0x154>
              break;
 80072dc:	bf00      	nop
          }
          break;
 80072de:	e0ab      	b.n	8007438 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d002      	beq.n	80072f2 <USBD_StdEPReq+0x168>
 80072ec:	2b03      	cmp	r3, #3
 80072ee:	d032      	beq.n	8007356 <USBD_StdEPReq+0x1cc>
 80072f0:	e097      	b.n	8007422 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072f2:	7bbb      	ldrb	r3, [r7, #14]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d007      	beq.n	8007308 <USBD_StdEPReq+0x17e>
 80072f8:	7bbb      	ldrb	r3, [r7, #14]
 80072fa:	2b80      	cmp	r3, #128	; 0x80
 80072fc:	d004      	beq.n	8007308 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fbd3 	bl	8007aac <USBD_CtlError>
                break;
 8007306:	e091      	b.n	800742c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007308:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800730c:	2b00      	cmp	r3, #0
 800730e:	da0b      	bge.n	8007328 <USBD_StdEPReq+0x19e>
 8007310:	7bbb      	ldrb	r3, [r7, #14]
 8007312:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007316:	4613      	mov	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	3310      	adds	r3, #16
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	4413      	add	r3, r2
 8007324:	3304      	adds	r3, #4
 8007326:	e00b      	b.n	8007340 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800732e:	4613      	mov	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	4413      	add	r3, r2
 800733e:	3304      	adds	r3, #4
 8007340:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	2200      	movs	r2, #0
 8007346:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2202      	movs	r2, #2
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fc1d 	bl	8007b8e <USBD_CtlSendData>
              break;
 8007354:	e06a      	b.n	800742c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007356:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800735a:	2b00      	cmp	r3, #0
 800735c:	da11      	bge.n	8007382 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800735e:	7bbb      	ldrb	r3, [r7, #14]
 8007360:	f003 020f 	and.w	r2, r3, #15
 8007364:	6879      	ldr	r1, [r7, #4]
 8007366:	4613      	mov	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	440b      	add	r3, r1
 8007370:	3324      	adds	r3, #36	; 0x24
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d117      	bne.n	80073a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fb96 	bl	8007aac <USBD_CtlError>
                  break;
 8007380:	e054      	b.n	800742c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007382:	7bbb      	ldrb	r3, [r7, #14]
 8007384:	f003 020f 	and.w	r2, r3, #15
 8007388:	6879      	ldr	r1, [r7, #4]
 800738a:	4613      	mov	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	440b      	add	r3, r1
 8007394:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d104      	bne.n	80073a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800739e:	6839      	ldr	r1, [r7, #0]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fb83 	bl	8007aac <USBD_CtlError>
                  break;
 80073a6:	e041      	b.n	800742c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	da0b      	bge.n	80073c8 <USBD_StdEPReq+0x23e>
 80073b0:	7bbb      	ldrb	r3, [r7, #14]
 80073b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073b6:	4613      	mov	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	3310      	adds	r3, #16
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	4413      	add	r3, r2
 80073c4:	3304      	adds	r3, #4
 80073c6:	e00b      	b.n	80073e0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073ce:	4613      	mov	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	4413      	add	r3, r2
 80073de:	3304      	adds	r3, #4
 80073e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <USBD_StdEPReq+0x264>
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	2b80      	cmp	r3, #128	; 0x80
 80073ec:	d103      	bne.n	80073f6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	e00e      	b.n	8007414 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80073f6:	7bbb      	ldrb	r3, [r7, #14]
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f001 f88c 	bl	8008518 <USBD_LL_IsStallEP>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2201      	movs	r2, #1
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	e002      	b.n	8007414 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	2200      	movs	r2, #0
 8007412:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2202      	movs	r2, #2
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fbb7 	bl	8007b8e <USBD_CtlSendData>
              break;
 8007420:	e004      	b.n	800742c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fb41 	bl	8007aac <USBD_CtlError>
              break;
 800742a:	bf00      	nop
          }
          break;
 800742c:	e004      	b.n	8007438 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800742e:	6839      	ldr	r1, [r7, #0]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fb3b 	bl	8007aac <USBD_CtlError>
          break;
 8007436:	bf00      	nop
      }
      break;
 8007438:	e004      	b.n	8007444 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fb35 	bl	8007aac <USBD_CtlError>
      break;
 8007442:	bf00      	nop
  }

  return ret;
 8007444:	7bfb      	ldrb	r3, [r7, #15]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
	...

08007450 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800745a:	2300      	movs	r3, #0
 800745c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	885b      	ldrh	r3, [r3, #2]
 800746a:	0a1b      	lsrs	r3, r3, #8
 800746c:	b29b      	uxth	r3, r3
 800746e:	3b01      	subs	r3, #1
 8007470:	2b06      	cmp	r3, #6
 8007472:	f200 8128 	bhi.w	80076c6 <USBD_GetDescriptor+0x276>
 8007476:	a201      	add	r2, pc, #4	; (adr r2, 800747c <USBD_GetDescriptor+0x2c>)
 8007478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747c:	08007499 	.word	0x08007499
 8007480:	080074b1 	.word	0x080074b1
 8007484:	080074f1 	.word	0x080074f1
 8007488:	080076c7 	.word	0x080076c7
 800748c:	080076c7 	.word	0x080076c7
 8007490:	08007667 	.word	0x08007667
 8007494:	08007693 	.word	0x08007693
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	7c12      	ldrb	r2, [r2, #16]
 80074a4:	f107 0108 	add.w	r1, r7, #8
 80074a8:	4610      	mov	r0, r2
 80074aa:	4798      	blx	r3
 80074ac:	60f8      	str	r0, [r7, #12]
      break;
 80074ae:	e112      	b.n	80076d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	7c1b      	ldrb	r3, [r3, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10d      	bne.n	80074d4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c0:	f107 0208 	add.w	r2, r7, #8
 80074c4:	4610      	mov	r0, r2
 80074c6:	4798      	blx	r3
 80074c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3301      	adds	r3, #1
 80074ce:	2202      	movs	r2, #2
 80074d0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80074d2:	e100      	b.n	80076d6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074dc:	f107 0208 	add.w	r2, r7, #8
 80074e0:	4610      	mov	r0, r2
 80074e2:	4798      	blx	r3
 80074e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	3301      	adds	r3, #1
 80074ea:	2202      	movs	r2, #2
 80074ec:	701a      	strb	r2, [r3, #0]
      break;
 80074ee:	e0f2      	b.n	80076d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	885b      	ldrh	r3, [r3, #2]
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b05      	cmp	r3, #5
 80074f8:	f200 80ac 	bhi.w	8007654 <USBD_GetDescriptor+0x204>
 80074fc:	a201      	add	r2, pc, #4	; (adr r2, 8007504 <USBD_GetDescriptor+0xb4>)
 80074fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007502:	bf00      	nop
 8007504:	0800751d 	.word	0x0800751d
 8007508:	08007551 	.word	0x08007551
 800750c:	08007585 	.word	0x08007585
 8007510:	080075b9 	.word	0x080075b9
 8007514:	080075ed 	.word	0x080075ed
 8007518:	08007621 	.word	0x08007621
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00b      	beq.n	8007540 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	7c12      	ldrb	r2, [r2, #16]
 8007534:	f107 0108 	add.w	r1, r7, #8
 8007538:	4610      	mov	r0, r2
 800753a:	4798      	blx	r3
 800753c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800753e:	e091      	b.n	8007664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007540:	6839      	ldr	r1, [r7, #0]
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fab2 	bl	8007aac <USBD_CtlError>
            err++;
 8007548:	7afb      	ldrb	r3, [r7, #11]
 800754a:	3301      	adds	r3, #1
 800754c:	72fb      	strb	r3, [r7, #11]
          break;
 800754e:	e089      	b.n	8007664 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00b      	beq.n	8007574 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	7c12      	ldrb	r2, [r2, #16]
 8007568:	f107 0108 	add.w	r1, r7, #8
 800756c:	4610      	mov	r0, r2
 800756e:	4798      	blx	r3
 8007570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007572:	e077      	b.n	8007664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fa98 	bl	8007aac <USBD_CtlError>
            err++;
 800757c:	7afb      	ldrb	r3, [r7, #11]
 800757e:	3301      	adds	r3, #1
 8007580:	72fb      	strb	r3, [r7, #11]
          break;
 8007582:	e06f      	b.n	8007664 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00b      	beq.n	80075a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	7c12      	ldrb	r2, [r2, #16]
 800759c:	f107 0108 	add.w	r1, r7, #8
 80075a0:	4610      	mov	r0, r2
 80075a2:	4798      	blx	r3
 80075a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075a6:	e05d      	b.n	8007664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fa7e 	bl	8007aac <USBD_CtlError>
            err++;
 80075b0:	7afb      	ldrb	r3, [r7, #11]
 80075b2:	3301      	adds	r3, #1
 80075b4:	72fb      	strb	r3, [r7, #11]
          break;
 80075b6:	e055      	b.n	8007664 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00b      	beq.n	80075dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	7c12      	ldrb	r2, [r2, #16]
 80075d0:	f107 0108 	add.w	r1, r7, #8
 80075d4:	4610      	mov	r0, r2
 80075d6:	4798      	blx	r3
 80075d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075da:	e043      	b.n	8007664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fa64 	bl	8007aac <USBD_CtlError>
            err++;
 80075e4:	7afb      	ldrb	r3, [r7, #11]
 80075e6:	3301      	adds	r3, #1
 80075e8:	72fb      	strb	r3, [r7, #11]
          break;
 80075ea:	e03b      	b.n	8007664 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075f2:	695b      	ldr	r3, [r3, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00b      	beq.n	8007610 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	7c12      	ldrb	r2, [r2, #16]
 8007604:	f107 0108 	add.w	r1, r7, #8
 8007608:	4610      	mov	r0, r2
 800760a:	4798      	blx	r3
 800760c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800760e:	e029      	b.n	8007664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fa4a 	bl	8007aac <USBD_CtlError>
            err++;
 8007618:	7afb      	ldrb	r3, [r7, #11]
 800761a:	3301      	adds	r3, #1
 800761c:	72fb      	strb	r3, [r7, #11]
          break;
 800761e:	e021      	b.n	8007664 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00b      	beq.n	8007644 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	7c12      	ldrb	r2, [r2, #16]
 8007638:	f107 0108 	add.w	r1, r7, #8
 800763c:	4610      	mov	r0, r2
 800763e:	4798      	blx	r3
 8007640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007642:	e00f      	b.n	8007664 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fa30 	bl	8007aac <USBD_CtlError>
            err++;
 800764c:	7afb      	ldrb	r3, [r7, #11]
 800764e:	3301      	adds	r3, #1
 8007650:	72fb      	strb	r3, [r7, #11]
          break;
 8007652:	e007      	b.n	8007664 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fa28 	bl	8007aac <USBD_CtlError>
          err++;
 800765c:	7afb      	ldrb	r3, [r7, #11]
 800765e:	3301      	adds	r3, #1
 8007660:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007662:	bf00      	nop
      }
      break;
 8007664:	e037      	b.n	80076d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	7c1b      	ldrb	r3, [r3, #16]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d109      	bne.n	8007682 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007676:	f107 0208 	add.w	r2, r7, #8
 800767a:	4610      	mov	r0, r2
 800767c:	4798      	blx	r3
 800767e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007680:	e029      	b.n	80076d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fa11 	bl	8007aac <USBD_CtlError>
        err++;
 800768a:	7afb      	ldrb	r3, [r7, #11]
 800768c:	3301      	adds	r3, #1
 800768e:	72fb      	strb	r3, [r7, #11]
      break;
 8007690:	e021      	b.n	80076d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	7c1b      	ldrb	r3, [r3, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10d      	bne.n	80076b6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a2:	f107 0208 	add.w	r2, r7, #8
 80076a6:	4610      	mov	r0, r2
 80076a8:	4798      	blx	r3
 80076aa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	3301      	adds	r3, #1
 80076b0:	2207      	movs	r2, #7
 80076b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076b4:	e00f      	b.n	80076d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f9f7 	bl	8007aac <USBD_CtlError>
        err++;
 80076be:	7afb      	ldrb	r3, [r7, #11]
 80076c0:	3301      	adds	r3, #1
 80076c2:	72fb      	strb	r3, [r7, #11]
      break;
 80076c4:	e007      	b.n	80076d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f9ef 	bl	8007aac <USBD_CtlError>
      err++;
 80076ce:	7afb      	ldrb	r3, [r7, #11]
 80076d0:	3301      	adds	r3, #1
 80076d2:	72fb      	strb	r3, [r7, #11]
      break;
 80076d4:	bf00      	nop
  }

  if (err != 0U)
 80076d6:	7afb      	ldrb	r3, [r7, #11]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d11e      	bne.n	800771a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	88db      	ldrh	r3, [r3, #6]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d016      	beq.n	8007712 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80076e4:	893b      	ldrh	r3, [r7, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00e      	beq.n	8007708 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	88da      	ldrh	r2, [r3, #6]
 80076ee:	893b      	ldrh	r3, [r7, #8]
 80076f0:	4293      	cmp	r3, r2
 80076f2:	bf28      	it	cs
 80076f4:	4613      	movcs	r3, r2
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076fa:	893b      	ldrh	r3, [r7, #8]
 80076fc:	461a      	mov	r2, r3
 80076fe:	68f9      	ldr	r1, [r7, #12]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fa44 	bl	8007b8e <USBD_CtlSendData>
 8007706:	e009      	b.n	800771c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f9ce 	bl	8007aac <USBD_CtlError>
 8007710:	e004      	b.n	800771c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fa95 	bl	8007c42 <USBD_CtlSendStatus>
 8007718:	e000      	b.n	800771c <USBD_GetDescriptor+0x2cc>
    return;
 800771a:	bf00      	nop
  }
}
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop

08007724 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	889b      	ldrh	r3, [r3, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d131      	bne.n	800779a <USBD_SetAddress+0x76>
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	88db      	ldrh	r3, [r3, #6]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d12d      	bne.n	800779a <USBD_SetAddress+0x76>
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	885b      	ldrh	r3, [r3, #2]
 8007742:	2b7f      	cmp	r3, #127	; 0x7f
 8007744:	d829      	bhi.n	800779a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	885b      	ldrh	r3, [r3, #2]
 800774a:	b2db      	uxtb	r3, r3
 800774c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007750:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b03      	cmp	r3, #3
 800775c:	d104      	bne.n	8007768 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f9a3 	bl	8007aac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007766:	e01d      	b.n	80077a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	7bfa      	ldrb	r2, [r7, #15]
 800776c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007770:	7bfb      	ldrb	r3, [r7, #15]
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fefb 	bl	8008570 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fa61 	bl	8007c42 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007780:	7bfb      	ldrb	r3, [r7, #15]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d004      	beq.n	8007790 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2202      	movs	r2, #2
 800778a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800778e:	e009      	b.n	80077a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007798:	e004      	b.n	80077a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f985 	bl	8007aac <USBD_CtlError>
  }
}
 80077a2:	bf00      	nop
 80077a4:	bf00      	nop
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	885b      	ldrh	r3, [r3, #2]
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	4b4c      	ldr	r3, [pc, #304]	; (80078f4 <USBD_SetConfig+0x148>)
 80077c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80077c4:	4b4b      	ldr	r3, [pc, #300]	; (80078f4 <USBD_SetConfig+0x148>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d905      	bls.n	80077d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f96c 	bl	8007aac <USBD_CtlError>
    return USBD_FAIL;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e088      	b.n	80078ea <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d002      	beq.n	80077ea <USBD_SetConfig+0x3e>
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d025      	beq.n	8007834 <USBD_SetConfig+0x88>
 80077e8:	e071      	b.n	80078ce <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80077ea:	4b42      	ldr	r3, [pc, #264]	; (80078f4 <USBD_SetConfig+0x148>)
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d01c      	beq.n	800782c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80077f2:	4b40      	ldr	r3, [pc, #256]	; (80078f4 <USBD_SetConfig+0x148>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	461a      	mov	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077fc:	4b3d      	ldr	r3, [pc, #244]	; (80078f4 <USBD_SetConfig+0x148>)
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	4619      	mov	r1, r3
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7ff f948 	bl	8006a98 <USBD_SetClassConfig>
 8007808:	4603      	mov	r3, r0
 800780a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800780c:	7bfb      	ldrb	r3, [r7, #15]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d004      	beq.n	800781c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f949 	bl	8007aac <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800781a:	e065      	b.n	80078e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fa10 	bl	8007c42 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2203      	movs	r2, #3
 8007826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800782a:	e05d      	b.n	80078e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fa08 	bl	8007c42 <USBD_CtlSendStatus>
      break;
 8007832:	e059      	b.n	80078e8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007834:	4b2f      	ldr	r3, [pc, #188]	; (80078f4 <USBD_SetConfig+0x148>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d112      	bne.n	8007862 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2202      	movs	r2, #2
 8007840:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007844:	4b2b      	ldr	r3, [pc, #172]	; (80078f4 <USBD_SetConfig+0x148>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	461a      	mov	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800784e:	4b29      	ldr	r3, [pc, #164]	; (80078f4 <USBD_SetConfig+0x148>)
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	4619      	mov	r1, r3
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f7ff f93b 	bl	8006ad0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f9f1 	bl	8007c42 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007860:	e042      	b.n	80078e8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007862:	4b24      	ldr	r3, [pc, #144]	; (80078f4 <USBD_SetConfig+0x148>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	429a      	cmp	r2, r3
 800786e:	d02a      	beq.n	80078c6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	b2db      	uxtb	r3, r3
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7ff f929 	bl	8006ad0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800787e:	4b1d      	ldr	r3, [pc, #116]	; (80078f4 <USBD_SetConfig+0x148>)
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	461a      	mov	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007888:	4b1a      	ldr	r3, [pc, #104]	; (80078f4 <USBD_SetConfig+0x148>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff f902 	bl	8006a98 <USBD_SetClassConfig>
 8007894:	4603      	mov	r3, r0
 8007896:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007898:	7bfb      	ldrb	r3, [r7, #15]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00f      	beq.n	80078be <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f903 	bl	8007aac <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7ff f90e 	bl	8006ad0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2202      	movs	r2, #2
 80078b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80078bc:	e014      	b.n	80078e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f9bf 	bl	8007c42 <USBD_CtlSendStatus>
      break;
 80078c4:	e010      	b.n	80078e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f9bb 	bl	8007c42 <USBD_CtlSendStatus>
      break;
 80078cc:	e00c      	b.n	80078e8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f8eb 	bl	8007aac <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078d6:	4b07      	ldr	r3, [pc, #28]	; (80078f4 <USBD_SetConfig+0x148>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7ff f8f7 	bl	8006ad0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80078e2:	2303      	movs	r3, #3
 80078e4:	73fb      	strb	r3, [r7, #15]
      break;
 80078e6:	bf00      	nop
  }

  return ret;
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	2000036c 	.word	0x2000036c

080078f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	88db      	ldrh	r3, [r3, #6]
 8007906:	2b01      	cmp	r3, #1
 8007908:	d004      	beq.n	8007914 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f8cd 	bl	8007aac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007912:	e023      	b.n	800795c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b02      	cmp	r3, #2
 800791e:	dc02      	bgt.n	8007926 <USBD_GetConfig+0x2e>
 8007920:	2b00      	cmp	r3, #0
 8007922:	dc03      	bgt.n	800792c <USBD_GetConfig+0x34>
 8007924:	e015      	b.n	8007952 <USBD_GetConfig+0x5a>
 8007926:	2b03      	cmp	r3, #3
 8007928:	d00b      	beq.n	8007942 <USBD_GetConfig+0x4a>
 800792a:	e012      	b.n	8007952 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	3308      	adds	r3, #8
 8007936:	2201      	movs	r2, #1
 8007938:	4619      	mov	r1, r3
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f927 	bl	8007b8e <USBD_CtlSendData>
        break;
 8007940:	e00c      	b.n	800795c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	3304      	adds	r3, #4
 8007946:	2201      	movs	r2, #1
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f91f 	bl	8007b8e <USBD_CtlSendData>
        break;
 8007950:	e004      	b.n	800795c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f8a9 	bl	8007aac <USBD_CtlError>
        break;
 800795a:	bf00      	nop
}
 800795c:	bf00      	nop
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007974:	b2db      	uxtb	r3, r3
 8007976:	3b01      	subs	r3, #1
 8007978:	2b02      	cmp	r3, #2
 800797a:	d81e      	bhi.n	80079ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	88db      	ldrh	r3, [r3, #6]
 8007980:	2b02      	cmp	r3, #2
 8007982:	d004      	beq.n	800798e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007984:	6839      	ldr	r1, [r7, #0]
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f890 	bl	8007aac <USBD_CtlError>
        break;
 800798c:	e01a      	b.n	80079c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800799a:	2b00      	cmp	r3, #0
 800799c:	d005      	beq.n	80079aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	f043 0202 	orr.w	r2, r3, #2
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	330c      	adds	r3, #12
 80079ae:	2202      	movs	r2, #2
 80079b0:	4619      	mov	r1, r3
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f8eb 	bl	8007b8e <USBD_CtlSendData>
      break;
 80079b8:	e004      	b.n	80079c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f875 	bl	8007aac <USBD_CtlError>
      break;
 80079c2:	bf00      	nop
  }
}
 80079c4:	bf00      	nop
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	885b      	ldrh	r3, [r3, #2]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d106      	bne.n	80079ec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f92b 	bl	8007c42 <USBD_CtlSendStatus>
  }
}
 80079ec:	bf00      	nop
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	3b01      	subs	r3, #1
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d80b      	bhi.n	8007a24 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	885b      	ldrh	r3, [r3, #2]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d10c      	bne.n	8007a2e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f910 	bl	8007c42 <USBD_CtlSendStatus>
      }
      break;
 8007a22:	e004      	b.n	8007a2e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f840 	bl	8007aac <USBD_CtlError>
      break;
 8007a2c:	e000      	b.n	8007a30 <USBD_ClrFeature+0x3c>
      break;
 8007a2e:	bf00      	nop
  }
}
 8007a30:	bf00      	nop
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	781a      	ldrb	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	3301      	adds	r3, #1
 8007a52:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	781a      	ldrb	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f7ff fabb 	bl	8006fde <SWAPBYTE>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	3301      	adds	r3, #1
 8007a74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f7ff faae 	bl	8006fde <SWAPBYTE>
 8007a82:	4603      	mov	r3, r0
 8007a84:	461a      	mov	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3301      	adds	r3, #1
 8007a94:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f7ff faa1 	bl	8006fde <SWAPBYTE>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	80da      	strh	r2, [r3, #6]
}
 8007aa4:	bf00      	nop
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ab6:	2180      	movs	r1, #128	; 0x80
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fcef 	bl	800849c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007abe:	2100      	movs	r1, #0
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fceb 	bl	800849c <USBD_LL_StallEP>
}
 8007ac6:	bf00      	nop
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b086      	sub	sp, #24
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	60f8      	str	r0, [r7, #12]
 8007ad6:	60b9      	str	r1, [r7, #8]
 8007ad8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d036      	beq.n	8007b52 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007ae8:	6938      	ldr	r0, [r7, #16]
 8007aea:	f000 f836 	bl	8007b5a <USBD_GetLen>
 8007aee:	4603      	mov	r3, r0
 8007af0:	3301      	adds	r3, #1
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	005b      	lsls	r3, r3, #1
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007afc:	7dfb      	ldrb	r3, [r7, #23]
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	4413      	add	r3, r2
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	7812      	ldrb	r2, [r2, #0]
 8007b06:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b0e:	7dfb      	ldrb	r3, [r7, #23]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	4413      	add	r3, r2
 8007b14:	2203      	movs	r2, #3
 8007b16:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b18:	7dfb      	ldrb	r3, [r7, #23]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007b1e:	e013      	b.n	8007b48 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007b20:	7dfb      	ldrb	r3, [r7, #23]
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	4413      	add	r3, r2
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	7812      	ldrb	r2, [r2, #0]
 8007b2a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	613b      	str	r3, [r7, #16]
    idx++;
 8007b32:	7dfb      	ldrb	r3, [r7, #23]
 8007b34:	3301      	adds	r3, #1
 8007b36:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007b38:	7dfb      	ldrb	r3, [r7, #23]
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	2200      	movs	r2, #0
 8007b40:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
 8007b44:	3301      	adds	r3, #1
 8007b46:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1e7      	bne.n	8007b20 <USBD_GetString+0x52>
 8007b50:	e000      	b.n	8007b54 <USBD_GetString+0x86>
    return;
 8007b52:	bf00      	nop
  }
}
 8007b54:	3718      	adds	r7, #24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b085      	sub	sp, #20
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b62:	2300      	movs	r3, #0
 8007b64:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b6a:	e005      	b.n	8007b78 <USBD_GetLen+0x1e>
  {
    len++;
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	3301      	adds	r3, #1
 8007b76:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1f5      	bne.n	8007b6c <USBD_GetLen+0x12>
  }

  return len;
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b084      	sub	sp, #16
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	60f8      	str	r0, [r7, #12]
 8007b96:	60b9      	str	r1, [r7, #8]
 8007b98:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f000 fcfa 	bl	80085ae <USBD_LL_Transmit>

  return USBD_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f000 fce9 	bl	80085ae <USBD_LL_Transmit>

  return USBD_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b084      	sub	sp, #16
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	60f8      	str	r0, [r7, #12]
 8007bee:	60b9      	str	r1, [r7, #8]
 8007bf0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2203      	movs	r2, #3
 8007bf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	2100      	movs	r1, #0
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f000 fced 	bl	80085f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	2100      	movs	r1, #0
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 fcdc 	bl	80085f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b082      	sub	sp, #8
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2204      	movs	r2, #4
 8007c4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c52:	2300      	movs	r3, #0
 8007c54:	2200      	movs	r2, #0
 8007c56:	2100      	movs	r1, #0
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 fca8 	bl	80085ae <USBD_LL_Transmit>

  return USBD_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2205      	movs	r2, #5
 8007c74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c78:	2300      	movs	r3, #0
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fcb6 	bl	80085f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
	...

08007c90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c94:	2200      	movs	r2, #0
 8007c96:	4912      	ldr	r1, [pc, #72]	; (8007ce0 <MX_USB_DEVICE_Init+0x50>)
 8007c98:	4812      	ldr	r0, [pc, #72]	; (8007ce4 <MX_USB_DEVICE_Init+0x54>)
 8007c9a:	f7fe fe8f 	bl	80069bc <USBD_Init>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d001      	beq.n	8007ca8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ca4:	f7f9 fbb6 	bl	8001414 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007ca8:	490f      	ldr	r1, [pc, #60]	; (8007ce8 <MX_USB_DEVICE_Init+0x58>)
 8007caa:	480e      	ldr	r0, [pc, #56]	; (8007ce4 <MX_USB_DEVICE_Init+0x54>)
 8007cac:	f7fe feb6 	bl	8006a1c <USBD_RegisterClass>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d001      	beq.n	8007cba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007cb6:	f7f9 fbad 	bl	8001414 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007cba:	490c      	ldr	r1, [pc, #48]	; (8007cec <MX_USB_DEVICE_Init+0x5c>)
 8007cbc:	4809      	ldr	r0, [pc, #36]	; (8007ce4 <MX_USB_DEVICE_Init+0x54>)
 8007cbe:	f7fe fdd7 	bl	8006870 <USBD_CDC_RegisterInterface>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007cc8:	f7f9 fba4 	bl	8001414 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ccc:	4805      	ldr	r0, [pc, #20]	; (8007ce4 <MX_USB_DEVICE_Init+0x54>)
 8007cce:	f7fe fecc 	bl	8006a6a <USBD_Start>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d001      	beq.n	8007cdc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007cd8:	f7f9 fb9c 	bl	8001414 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007cdc:	bf00      	nop
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	200001d8 	.word	0x200001d8
 8007ce4:	20000c98 	.word	0x20000c98
 8007ce8:	200000c0 	.word	0x200000c0
 8007cec:	200001c4 	.word	0x200001c4

08007cf0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	4905      	ldr	r1, [pc, #20]	; (8007d0c <CDC_Init_FS+0x1c>)
 8007cf8:	4805      	ldr	r0, [pc, #20]	; (8007d10 <CDC_Init_FS+0x20>)
 8007cfa:	f7fe fdce 	bl	800689a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007cfe:	4905      	ldr	r1, [pc, #20]	; (8007d14 <CDC_Init_FS+0x24>)
 8007d00:	4803      	ldr	r0, [pc, #12]	; (8007d10 <CDC_Init_FS+0x20>)
 8007d02:	f7fe fde8 	bl	80068d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007d06:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	20001768 	.word	0x20001768
 8007d10:	20000c98 	.word	0x20000c98
 8007d14:	20000f68 	.word	0x20000f68

08007d18 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007d1c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	4603      	mov	r3, r0
 8007d30:	6039      	str	r1, [r7, #0]
 8007d32:	71fb      	strb	r3, [r7, #7]
 8007d34:	4613      	mov	r3, r2
 8007d36:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007d38:	79fb      	ldrb	r3, [r7, #7]
 8007d3a:	2b23      	cmp	r3, #35	; 0x23
 8007d3c:	d84a      	bhi.n	8007dd4 <CDC_Control_FS+0xac>
 8007d3e:	a201      	add	r2, pc, #4	; (adr r2, 8007d44 <CDC_Control_FS+0x1c>)
 8007d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d44:	08007dd5 	.word	0x08007dd5
 8007d48:	08007dd5 	.word	0x08007dd5
 8007d4c:	08007dd5 	.word	0x08007dd5
 8007d50:	08007dd5 	.word	0x08007dd5
 8007d54:	08007dd5 	.word	0x08007dd5
 8007d58:	08007dd5 	.word	0x08007dd5
 8007d5c:	08007dd5 	.word	0x08007dd5
 8007d60:	08007dd5 	.word	0x08007dd5
 8007d64:	08007dd5 	.word	0x08007dd5
 8007d68:	08007dd5 	.word	0x08007dd5
 8007d6c:	08007dd5 	.word	0x08007dd5
 8007d70:	08007dd5 	.word	0x08007dd5
 8007d74:	08007dd5 	.word	0x08007dd5
 8007d78:	08007dd5 	.word	0x08007dd5
 8007d7c:	08007dd5 	.word	0x08007dd5
 8007d80:	08007dd5 	.word	0x08007dd5
 8007d84:	08007dd5 	.word	0x08007dd5
 8007d88:	08007dd5 	.word	0x08007dd5
 8007d8c:	08007dd5 	.word	0x08007dd5
 8007d90:	08007dd5 	.word	0x08007dd5
 8007d94:	08007dd5 	.word	0x08007dd5
 8007d98:	08007dd5 	.word	0x08007dd5
 8007d9c:	08007dd5 	.word	0x08007dd5
 8007da0:	08007dd5 	.word	0x08007dd5
 8007da4:	08007dd5 	.word	0x08007dd5
 8007da8:	08007dd5 	.word	0x08007dd5
 8007dac:	08007dd5 	.word	0x08007dd5
 8007db0:	08007dd5 	.word	0x08007dd5
 8007db4:	08007dd5 	.word	0x08007dd5
 8007db8:	08007dd5 	.word	0x08007dd5
 8007dbc:	08007dd5 	.word	0x08007dd5
 8007dc0:	08007dd5 	.word	0x08007dd5
 8007dc4:	08007dd5 	.word	0x08007dd5
 8007dc8:	08007dd5 	.word	0x08007dd5
 8007dcc:	08007dd5 	.word	0x08007dd5
 8007dd0:	08007dd5 	.word	0x08007dd5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007dd4:	bf00      	nop
  }

  return (USBD_OK);
 8007dd6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007dee:	6879      	ldr	r1, [r7, #4]
 8007df0:	4805      	ldr	r0, [pc, #20]	; (8007e08 <CDC_Receive_FS+0x24>)
 8007df2:	f7fe fd70 	bl	80068d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007df6:	4804      	ldr	r0, [pc, #16]	; (8007e08 <CDC_Receive_FS+0x24>)
 8007df8:	f7fe fdb6 	bl	8006968 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007dfc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20000c98 	.word	0x20000c98

08007e0c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007e1c:	4b0d      	ldr	r3, [pc, #52]	; (8007e54 <CDC_Transmit_FS+0x48>)
 8007e1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e22:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d001      	beq.n	8007e32 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e00b      	b.n	8007e4a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007e32:	887b      	ldrh	r3, [r7, #2]
 8007e34:	461a      	mov	r2, r3
 8007e36:	6879      	ldr	r1, [r7, #4]
 8007e38:	4806      	ldr	r0, [pc, #24]	; (8007e54 <CDC_Transmit_FS+0x48>)
 8007e3a:	f7fe fd2e 	bl	800689a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007e3e:	4805      	ldr	r0, [pc, #20]	; (8007e54 <CDC_Transmit_FS+0x48>)
 8007e40:	f7fe fd62 	bl	8006908 <USBD_CDC_TransmitPacket>
 8007e44:	4603      	mov	r3, r0
 8007e46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20000c98 	.word	0x20000c98

08007e58 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b087      	sub	sp, #28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	4613      	mov	r3, r2
 8007e64:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007e6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	371c      	adds	r7, #28
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
	...

08007e7c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	4603      	mov	r3, r0
 8007e84:	6039      	str	r1, [r7, #0]
 8007e86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	2212      	movs	r2, #18
 8007e8c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e8e:	4b03      	ldr	r3, [pc, #12]	; (8007e9c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	200001f4 	.word	0x200001f4

08007ea0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	6039      	str	r1, [r7, #0]
 8007eaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	2204      	movs	r2, #4
 8007eb0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007eb2:	4b03      	ldr	r3, [pc, #12]	; (8007ec0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	20000208 	.word	0x20000208

08007ec4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	4603      	mov	r3, r0
 8007ecc:	6039      	str	r1, [r7, #0]
 8007ece:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ed0:	79fb      	ldrb	r3, [r7, #7]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d105      	bne.n	8007ee2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	4907      	ldr	r1, [pc, #28]	; (8007ef8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007eda:	4808      	ldr	r0, [pc, #32]	; (8007efc <USBD_FS_ProductStrDescriptor+0x38>)
 8007edc:	f7ff fdf7 	bl	8007ace <USBD_GetString>
 8007ee0:	e004      	b.n	8007eec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	4904      	ldr	r1, [pc, #16]	; (8007ef8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ee6:	4805      	ldr	r0, [pc, #20]	; (8007efc <USBD_FS_ProductStrDescriptor+0x38>)
 8007ee8:	f7ff fdf1 	bl	8007ace <USBD_GetString>
  }
  return USBD_StrDesc;
 8007eec:	4b02      	ldr	r3, [pc, #8]	; (8007ef8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	20001f68 	.word	0x20001f68
 8007efc:	08009070 	.word	0x08009070

08007f00 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	4603      	mov	r3, r0
 8007f08:	6039      	str	r1, [r7, #0]
 8007f0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	4904      	ldr	r1, [pc, #16]	; (8007f20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007f10:	4804      	ldr	r0, [pc, #16]	; (8007f24 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007f12:	f7ff fddc 	bl	8007ace <USBD_GetString>
  return USBD_StrDesc;
 8007f16:	4b02      	ldr	r3, [pc, #8]	; (8007f20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	20001f68 	.word	0x20001f68
 8007f24:	08009088 	.word	0x08009088

08007f28 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	4603      	mov	r3, r0
 8007f30:	6039      	str	r1, [r7, #0]
 8007f32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	221a      	movs	r2, #26
 8007f38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f3a:	f000 f843 	bl	8007fc4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f3e:	4b02      	ldr	r3, [pc, #8]	; (8007f48 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	2000020c 	.word	0x2000020c

08007f4c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	4603      	mov	r3, r0
 8007f54:	6039      	str	r1, [r7, #0]
 8007f56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f58:	79fb      	ldrb	r3, [r7, #7]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d105      	bne.n	8007f6a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	4907      	ldr	r1, [pc, #28]	; (8007f80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f62:	4808      	ldr	r0, [pc, #32]	; (8007f84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f64:	f7ff fdb3 	bl	8007ace <USBD_GetString>
 8007f68:	e004      	b.n	8007f74 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	4904      	ldr	r1, [pc, #16]	; (8007f80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f6e:	4805      	ldr	r0, [pc, #20]	; (8007f84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f70:	f7ff fdad 	bl	8007ace <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f74:	4b02      	ldr	r3, [pc, #8]	; (8007f80 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	20001f68 	.word	0x20001f68
 8007f84:	0800909c 	.word	0x0800909c

08007f88 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	6039      	str	r1, [r7, #0]
 8007f92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f94:	79fb      	ldrb	r3, [r7, #7]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d105      	bne.n	8007fa6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	4907      	ldr	r1, [pc, #28]	; (8007fbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f9e:	4808      	ldr	r0, [pc, #32]	; (8007fc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fa0:	f7ff fd95 	bl	8007ace <USBD_GetString>
 8007fa4:	e004      	b.n	8007fb0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	4904      	ldr	r1, [pc, #16]	; (8007fbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007faa:	4805      	ldr	r0, [pc, #20]	; (8007fc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fac:	f7ff fd8f 	bl	8007ace <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fb0:	4b02      	ldr	r3, [pc, #8]	; (8007fbc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	20001f68 	.word	0x20001f68
 8007fc0:	080090a8 	.word	0x080090a8

08007fc4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007fca:	4b0f      	ldr	r3, [pc, #60]	; (8008008 <Get_SerialNum+0x44>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007fd0:	4b0e      	ldr	r3, [pc, #56]	; (800800c <Get_SerialNum+0x48>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007fd6:	4b0e      	ldr	r3, [pc, #56]	; (8008010 <Get_SerialNum+0x4c>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d009      	beq.n	8007ffe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007fea:	2208      	movs	r2, #8
 8007fec:	4909      	ldr	r1, [pc, #36]	; (8008014 <Get_SerialNum+0x50>)
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f000 f814 	bl	800801c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ff4:	2204      	movs	r2, #4
 8007ff6:	4908      	ldr	r1, [pc, #32]	; (8008018 <Get_SerialNum+0x54>)
 8007ff8:	68b8      	ldr	r0, [r7, #8]
 8007ffa:	f000 f80f 	bl	800801c <IntToUnicode>
  }
}
 8007ffe:	bf00      	nop
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	1fff7a10 	.word	0x1fff7a10
 800800c:	1fff7a14 	.word	0x1fff7a14
 8008010:	1fff7a18 	.word	0x1fff7a18
 8008014:	2000020e 	.word	0x2000020e
 8008018:	2000021e 	.word	0x2000021e

0800801c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800801c:	b480      	push	{r7}
 800801e:	b087      	sub	sp, #28
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	4613      	mov	r3, r2
 8008028:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800802a:	2300      	movs	r3, #0
 800802c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800802e:	2300      	movs	r3, #0
 8008030:	75fb      	strb	r3, [r7, #23]
 8008032:	e027      	b.n	8008084 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	0f1b      	lsrs	r3, r3, #28
 8008038:	2b09      	cmp	r3, #9
 800803a:	d80b      	bhi.n	8008054 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	0f1b      	lsrs	r3, r3, #28
 8008040:	b2da      	uxtb	r2, r3
 8008042:	7dfb      	ldrb	r3, [r7, #23]
 8008044:	005b      	lsls	r3, r3, #1
 8008046:	4619      	mov	r1, r3
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	440b      	add	r3, r1
 800804c:	3230      	adds	r2, #48	; 0x30
 800804e:	b2d2      	uxtb	r2, r2
 8008050:	701a      	strb	r2, [r3, #0]
 8008052:	e00a      	b.n	800806a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	0f1b      	lsrs	r3, r3, #28
 8008058:	b2da      	uxtb	r2, r3
 800805a:	7dfb      	ldrb	r3, [r7, #23]
 800805c:	005b      	lsls	r3, r3, #1
 800805e:	4619      	mov	r1, r3
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	440b      	add	r3, r1
 8008064:	3237      	adds	r2, #55	; 0x37
 8008066:	b2d2      	uxtb	r2, r2
 8008068:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	011b      	lsls	r3, r3, #4
 800806e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008070:	7dfb      	ldrb	r3, [r7, #23]
 8008072:	005b      	lsls	r3, r3, #1
 8008074:	3301      	adds	r3, #1
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	4413      	add	r3, r2
 800807a:	2200      	movs	r2, #0
 800807c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800807e:	7dfb      	ldrb	r3, [r7, #23]
 8008080:	3301      	adds	r3, #1
 8008082:	75fb      	strb	r3, [r7, #23]
 8008084:	7dfa      	ldrb	r2, [r7, #23]
 8008086:	79fb      	ldrb	r3, [r7, #7]
 8008088:	429a      	cmp	r2, r3
 800808a:	d3d3      	bcc.n	8008034 <IntToUnicode+0x18>
  }
}
 800808c:	bf00      	nop
 800808e:	bf00      	nop
 8008090:	371c      	adds	r7, #28
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
	...

0800809c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b08a      	sub	sp, #40	; 0x28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080a4:	f107 0314 	add.w	r3, r7, #20
 80080a8:	2200      	movs	r2, #0
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	605a      	str	r2, [r3, #4]
 80080ae:	609a      	str	r2, [r3, #8]
 80080b0:	60da      	str	r2, [r3, #12]
 80080b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080bc:	d147      	bne.n	800814e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080be:	2300      	movs	r3, #0
 80080c0:	613b      	str	r3, [r7, #16]
 80080c2:	4b25      	ldr	r3, [pc, #148]	; (8008158 <HAL_PCD_MspInit+0xbc>)
 80080c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c6:	4a24      	ldr	r2, [pc, #144]	; (8008158 <HAL_PCD_MspInit+0xbc>)
 80080c8:	f043 0301 	orr.w	r3, r3, #1
 80080cc:	6313      	str	r3, [r2, #48]	; 0x30
 80080ce:	4b22      	ldr	r3, [pc, #136]	; (8008158 <HAL_PCD_MspInit+0xbc>)
 80080d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	613b      	str	r3, [r7, #16]
 80080d8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80080da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80080e0:	2300      	movs	r3, #0
 80080e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080e4:	2300      	movs	r3, #0
 80080e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80080e8:	f107 0314 	add.w	r3, r7, #20
 80080ec:	4619      	mov	r1, r3
 80080ee:	481b      	ldr	r0, [pc, #108]	; (800815c <HAL_PCD_MspInit+0xc0>)
 80080f0:	f7fa fc1a 	bl	8002928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80080f4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80080f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080fa:	2302      	movs	r3, #2
 80080fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080fe:	2300      	movs	r3, #0
 8008100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008102:	2300      	movs	r3, #0
 8008104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008106:	230a      	movs	r3, #10
 8008108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800810a:	f107 0314 	add.w	r3, r7, #20
 800810e:	4619      	mov	r1, r3
 8008110:	4812      	ldr	r0, [pc, #72]	; (800815c <HAL_PCD_MspInit+0xc0>)
 8008112:	f7fa fc09 	bl	8002928 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008116:	4b10      	ldr	r3, [pc, #64]	; (8008158 <HAL_PCD_MspInit+0xbc>)
 8008118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800811a:	4a0f      	ldr	r2, [pc, #60]	; (8008158 <HAL_PCD_MspInit+0xbc>)
 800811c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008120:	6353      	str	r3, [r2, #52]	; 0x34
 8008122:	2300      	movs	r3, #0
 8008124:	60fb      	str	r3, [r7, #12]
 8008126:	4b0c      	ldr	r3, [pc, #48]	; (8008158 <HAL_PCD_MspInit+0xbc>)
 8008128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800812a:	4a0b      	ldr	r2, [pc, #44]	; (8008158 <HAL_PCD_MspInit+0xbc>)
 800812c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008130:	6453      	str	r3, [r2, #68]	; 0x44
 8008132:	4b09      	ldr	r3, [pc, #36]	; (8008158 <HAL_PCD_MspInit+0xbc>)
 8008134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800813a:	60fb      	str	r3, [r7, #12]
 800813c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800813e:	2200      	movs	r2, #0
 8008140:	2100      	movs	r1, #0
 8008142:	2043      	movs	r0, #67	; 0x43
 8008144:	f7fa fbb9 	bl	80028ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008148:	2043      	movs	r0, #67	; 0x43
 800814a:	f7fa fbd2 	bl	80028f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800814e:	bf00      	nop
 8008150:	3728      	adds	r7, #40	; 0x28
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	40023800 	.word	0x40023800
 800815c:	40020000 	.word	0x40020000

08008160 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008174:	4619      	mov	r1, r3
 8008176:	4610      	mov	r0, r2
 8008178:	f7fe fcc2 	bl	8006b00 <USBD_LL_SetupStage>
}
 800817c:	bf00      	nop
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	460b      	mov	r3, r1
 800818e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008196:	78fa      	ldrb	r2, [r7, #3]
 8008198:	6879      	ldr	r1, [r7, #4]
 800819a:	4613      	mov	r3, r2
 800819c:	00db      	lsls	r3, r3, #3
 800819e:	1a9b      	subs	r3, r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	440b      	add	r3, r1
 80081a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	78fb      	ldrb	r3, [r7, #3]
 80081ac:	4619      	mov	r1, r3
 80081ae:	f7fe fcfc 	bl	8006baa <USBD_LL_DataOutStage>
}
 80081b2:	bf00      	nop
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b082      	sub	sp, #8
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	460b      	mov	r3, r1
 80081c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80081cc:	78fa      	ldrb	r2, [r7, #3]
 80081ce:	6879      	ldr	r1, [r7, #4]
 80081d0:	4613      	mov	r3, r2
 80081d2:	00db      	lsls	r3, r3, #3
 80081d4:	1a9b      	subs	r3, r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	440b      	add	r3, r1
 80081da:	3348      	adds	r3, #72	; 0x48
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	78fb      	ldrb	r3, [r7, #3]
 80081e0:	4619      	mov	r1, r3
 80081e2:	f7fe fd45 	bl	8006c70 <USBD_LL_DataInStage>
}
 80081e6:	bf00      	nop
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b082      	sub	sp, #8
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fe fe59 	bl	8006eb4 <USBD_LL_SOF>
}
 8008202:	bf00      	nop
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b084      	sub	sp, #16
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008212:	2301      	movs	r3, #1
 8008214:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d102      	bne.n	8008224 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800821e:	2300      	movs	r3, #0
 8008220:	73fb      	strb	r3, [r7, #15]
 8008222:	e008      	b.n	8008236 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	2b02      	cmp	r3, #2
 800822a:	d102      	bne.n	8008232 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800822c:	2301      	movs	r3, #1
 800822e:	73fb      	strb	r3, [r7, #15]
 8008230:	e001      	b.n	8008236 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008232:	f7f9 f8ef 	bl	8001414 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800823c:	7bfa      	ldrb	r2, [r7, #15]
 800823e:	4611      	mov	r1, r2
 8008240:	4618      	mov	r0, r3
 8008242:	f7fe fdf9 	bl	8006e38 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800824c:	4618      	mov	r0, r3
 800824e:	f7fe fda5 	bl	8006d9c <USBD_LL_Reset>
}
 8008252:	bf00      	nop
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
	...

0800825c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800826a:	4618      	mov	r0, r3
 800826c:	f7fe fdf4 	bl	8006e58 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	6812      	ldr	r2, [r2, #0]
 800827e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008282:	f043 0301 	orr.w	r3, r3, #1
 8008286:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d005      	beq.n	800829c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008290:	4b04      	ldr	r3, [pc, #16]	; (80082a4 <HAL_PCD_SuspendCallback+0x48>)
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	4a03      	ldr	r2, [pc, #12]	; (80082a4 <HAL_PCD_SuspendCallback+0x48>)
 8008296:	f043 0306 	orr.w	r3, r3, #6
 800829a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800829c:	bf00      	nop
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	e000ed00 	.word	0xe000ed00

080082a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fe fde4 	bl	8006e84 <USBD_LL_Resume>
}
 80082bc:	bf00      	nop
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	460b      	mov	r3, r1
 80082ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082d6:	78fa      	ldrb	r2, [r7, #3]
 80082d8:	4611      	mov	r1, r2
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fe fe32 	bl	8006f44 <USBD_LL_IsoOUTIncomplete>
}
 80082e0:	bf00      	nop
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082fa:	78fa      	ldrb	r2, [r7, #3]
 80082fc:	4611      	mov	r1, r2
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fe fdfa 	bl	8006ef8 <USBD_LL_IsoINIncomplete>
}
 8008304:	bf00      	nop
 8008306:	3708      	adds	r7, #8
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800831a:	4618      	mov	r0, r3
 800831c:	f7fe fe38 	bl	8006f90 <USBD_LL_DevConnected>
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008336:	4618      	mov	r0, r3
 8008338:	f7fe fe35 	bl	8006fa6 <USBD_LL_DevDisconnected>
}
 800833c:	bf00      	nop
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d13c      	bne.n	80083ce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008354:	4a20      	ldr	r2, [pc, #128]	; (80083d8 <USBD_LL_Init+0x94>)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a1e      	ldr	r2, [pc, #120]	; (80083d8 <USBD_LL_Init+0x94>)
 8008360:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008364:	4b1c      	ldr	r3, [pc, #112]	; (80083d8 <USBD_LL_Init+0x94>)
 8008366:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800836a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800836c:	4b1a      	ldr	r3, [pc, #104]	; (80083d8 <USBD_LL_Init+0x94>)
 800836e:	2204      	movs	r2, #4
 8008370:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008372:	4b19      	ldr	r3, [pc, #100]	; (80083d8 <USBD_LL_Init+0x94>)
 8008374:	2202      	movs	r2, #2
 8008376:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008378:	4b17      	ldr	r3, [pc, #92]	; (80083d8 <USBD_LL_Init+0x94>)
 800837a:	2200      	movs	r2, #0
 800837c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800837e:	4b16      	ldr	r3, [pc, #88]	; (80083d8 <USBD_LL_Init+0x94>)
 8008380:	2202      	movs	r2, #2
 8008382:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008384:	4b14      	ldr	r3, [pc, #80]	; (80083d8 <USBD_LL_Init+0x94>)
 8008386:	2200      	movs	r2, #0
 8008388:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800838a:	4b13      	ldr	r3, [pc, #76]	; (80083d8 <USBD_LL_Init+0x94>)
 800838c:	2200      	movs	r2, #0
 800838e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008390:	4b11      	ldr	r3, [pc, #68]	; (80083d8 <USBD_LL_Init+0x94>)
 8008392:	2200      	movs	r2, #0
 8008394:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008396:	4b10      	ldr	r3, [pc, #64]	; (80083d8 <USBD_LL_Init+0x94>)
 8008398:	2201      	movs	r2, #1
 800839a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800839c:	4b0e      	ldr	r3, [pc, #56]	; (80083d8 <USBD_LL_Init+0x94>)
 800839e:	2200      	movs	r2, #0
 80083a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80083a2:	480d      	ldr	r0, [pc, #52]	; (80083d8 <USBD_LL_Init+0x94>)
 80083a4:	f7fa fdd4 	bl	8002f50 <HAL_PCD_Init>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80083ae:	f7f9 f831 	bl	8001414 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80083b2:	2180      	movs	r1, #128	; 0x80
 80083b4:	4808      	ldr	r0, [pc, #32]	; (80083d8 <USBD_LL_Init+0x94>)
 80083b6:	f7fb ff32 	bl	800421e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80083ba:	2240      	movs	r2, #64	; 0x40
 80083bc:	2100      	movs	r1, #0
 80083be:	4806      	ldr	r0, [pc, #24]	; (80083d8 <USBD_LL_Init+0x94>)
 80083c0:	f7fb fee6 	bl	8004190 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80083c4:	2280      	movs	r2, #128	; 0x80
 80083c6:	2101      	movs	r1, #1
 80083c8:	4803      	ldr	r0, [pc, #12]	; (80083d8 <USBD_LL_Init+0x94>)
 80083ca:	f7fb fee1 	bl	8004190 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	20002168 	.word	0x20002168

080083dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083e4:	2300      	movs	r3, #0
 80083e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fa fec9 	bl	800318a <HAL_PCD_Start>
 80083f8:	4603      	mov	r3, r0
 80083fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083fc:	7bfb      	ldrb	r3, [r7, #15]
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 f942 	bl	8008688 <USBD_Get_USB_Status>
 8008404:	4603      	mov	r3, r0
 8008406:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008408:	7bbb      	ldrb	r3, [r7, #14]
}
 800840a:	4618      	mov	r0, r3
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b084      	sub	sp, #16
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	4608      	mov	r0, r1
 800841c:	4611      	mov	r1, r2
 800841e:	461a      	mov	r2, r3
 8008420:	4603      	mov	r3, r0
 8008422:	70fb      	strb	r3, [r7, #3]
 8008424:	460b      	mov	r3, r1
 8008426:	70bb      	strb	r3, [r7, #2]
 8008428:	4613      	mov	r3, r2
 800842a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008430:	2300      	movs	r3, #0
 8008432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800843a:	78bb      	ldrb	r3, [r7, #2]
 800843c:	883a      	ldrh	r2, [r7, #0]
 800843e:	78f9      	ldrb	r1, [r7, #3]
 8008440:	f7fb faad 	bl	800399e <HAL_PCD_EP_Open>
 8008444:	4603      	mov	r3, r0
 8008446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008448:	7bfb      	ldrb	r3, [r7, #15]
 800844a:	4618      	mov	r0, r3
 800844c:	f000 f91c 	bl	8008688 <USBD_Get_USB_Status>
 8008450:	4603      	mov	r3, r0
 8008452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008454:	7bbb      	ldrb	r3, [r7, #14]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b084      	sub	sp, #16
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
 8008466:	460b      	mov	r3, r1
 8008468:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008478:	78fa      	ldrb	r2, [r7, #3]
 800847a:	4611      	mov	r1, r2
 800847c:	4618      	mov	r0, r3
 800847e:	f7fb faf6 	bl	8003a6e <HAL_PCD_EP_Close>
 8008482:	4603      	mov	r3, r0
 8008484:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008486:	7bfb      	ldrb	r3, [r7, #15]
 8008488:	4618      	mov	r0, r3
 800848a:	f000 f8fd 	bl	8008688 <USBD_Get_USB_Status>
 800848e:	4603      	mov	r3, r0
 8008490:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008492:	7bbb      	ldrb	r3, [r7, #14]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	460b      	mov	r3, r1
 80084a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084ac:	2300      	movs	r3, #0
 80084ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80084b6:	78fa      	ldrb	r2, [r7, #3]
 80084b8:	4611      	mov	r1, r2
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fb fbce 	bl	8003c5c <HAL_PCD_EP_SetStall>
 80084c0:	4603      	mov	r3, r0
 80084c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084c4:	7bfb      	ldrb	r3, [r7, #15]
 80084c6:	4618      	mov	r0, r3
 80084c8:	f000 f8de 	bl	8008688 <USBD_Get_USB_Status>
 80084cc:	4603      	mov	r3, r0
 80084ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b084      	sub	sp, #16
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	460b      	mov	r3, r1
 80084e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80084f4:	78fa      	ldrb	r2, [r7, #3]
 80084f6:	4611      	mov	r1, r2
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7fb fc13 	bl	8003d24 <HAL_PCD_EP_ClrStall>
 80084fe:	4603      	mov	r3, r0
 8008500:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008502:	7bfb      	ldrb	r3, [r7, #15]
 8008504:	4618      	mov	r0, r3
 8008506:	f000 f8bf 	bl	8008688 <USBD_Get_USB_Status>
 800850a:	4603      	mov	r3, r0
 800850c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800850e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	460b      	mov	r3, r1
 8008522:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800852a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800852c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008530:	2b00      	cmp	r3, #0
 8008532:	da0b      	bge.n	800854c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008534:	78fb      	ldrb	r3, [r7, #3]
 8008536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800853a:	68f9      	ldr	r1, [r7, #12]
 800853c:	4613      	mov	r3, r2
 800853e:	00db      	lsls	r3, r3, #3
 8008540:	1a9b      	subs	r3, r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	440b      	add	r3, r1
 8008546:	333e      	adds	r3, #62	; 0x3e
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	e00b      	b.n	8008564 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800854c:	78fb      	ldrb	r3, [r7, #3]
 800854e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008552:	68f9      	ldr	r1, [r7, #12]
 8008554:	4613      	mov	r3, r2
 8008556:	00db      	lsls	r3, r3, #3
 8008558:	1a9b      	subs	r3, r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	440b      	add	r3, r1
 800855e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008562:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008564:	4618      	mov	r0, r3
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	460b      	mov	r3, r1
 800857a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800857c:	2300      	movs	r3, #0
 800857e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008580:	2300      	movs	r3, #0
 8008582:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800858a:	78fa      	ldrb	r2, [r7, #3]
 800858c:	4611      	mov	r1, r2
 800858e:	4618      	mov	r0, r3
 8008590:	f7fb f9e0 	bl	8003954 <HAL_PCD_SetAddress>
 8008594:	4603      	mov	r3, r0
 8008596:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008598:	7bfb      	ldrb	r3, [r7, #15]
 800859a:	4618      	mov	r0, r3
 800859c:	f000 f874 	bl	8008688 <USBD_Get_USB_Status>
 80085a0:	4603      	mov	r3, r0
 80085a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b086      	sub	sp, #24
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	60f8      	str	r0, [r7, #12]
 80085b6:	607a      	str	r2, [r7, #4]
 80085b8:	603b      	str	r3, [r7, #0]
 80085ba:	460b      	mov	r3, r1
 80085bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80085cc:	7af9      	ldrb	r1, [r7, #11]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	f7fb faf9 	bl	8003bc8 <HAL_PCD_EP_Transmit>
 80085d6:	4603      	mov	r3, r0
 80085d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085da:	7dfb      	ldrb	r3, [r7, #23]
 80085dc:	4618      	mov	r0, r3
 80085de:	f000 f853 	bl	8008688 <USBD_Get_USB_Status>
 80085e2:	4603      	mov	r3, r0
 80085e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3718      	adds	r7, #24
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	607a      	str	r2, [r7, #4]
 80085fa:	603b      	str	r3, [r7, #0]
 80085fc:	460b      	mov	r3, r1
 80085fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800860e:	7af9      	ldrb	r1, [r7, #11]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	f7fb fa75 	bl	8003b02 <HAL_PCD_EP_Receive>
 8008618:	4603      	mov	r3, r0
 800861a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800861c:	7dfb      	ldrb	r3, [r7, #23]
 800861e:	4618      	mov	r0, r3
 8008620:	f000 f832 	bl	8008688 <USBD_Get_USB_Status>
 8008624:	4603      	mov	r3, r0
 8008626:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008628:	7dbb      	ldrb	r3, [r7, #22]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3718      	adds	r7, #24
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b082      	sub	sp, #8
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	460b      	mov	r3, r1
 800863c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008644:	78fa      	ldrb	r2, [r7, #3]
 8008646:	4611      	mov	r1, r2
 8008648:	4618      	mov	r0, r3
 800864a:	f7fb faa5 	bl	8003b98 <HAL_PCD_EP_GetRxCount>
 800864e:	4603      	mov	r3, r0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008660:	4b03      	ldr	r3, [pc, #12]	; (8008670 <USBD_static_malloc+0x18>)
}
 8008662:	4618      	mov	r0, r3
 8008664:	370c      	adds	r7, #12
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	20000370 	.word	0x20000370

08008674 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]

}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	4603      	mov	r3, r0
 8008690:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008692:	2300      	movs	r3, #0
 8008694:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008696:	79fb      	ldrb	r3, [r7, #7]
 8008698:	2b03      	cmp	r3, #3
 800869a:	d817      	bhi.n	80086cc <USBD_Get_USB_Status+0x44>
 800869c:	a201      	add	r2, pc, #4	; (adr r2, 80086a4 <USBD_Get_USB_Status+0x1c>)
 800869e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a2:	bf00      	nop
 80086a4:	080086b5 	.word	0x080086b5
 80086a8:	080086bb 	.word	0x080086bb
 80086ac:	080086c1 	.word	0x080086c1
 80086b0:	080086c7 	.word	0x080086c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	73fb      	strb	r3, [r7, #15]
    break;
 80086b8:	e00b      	b.n	80086d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80086ba:	2303      	movs	r3, #3
 80086bc:	73fb      	strb	r3, [r7, #15]
    break;
 80086be:	e008      	b.n	80086d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80086c0:	2301      	movs	r3, #1
 80086c2:	73fb      	strb	r3, [r7, #15]
    break;
 80086c4:	e005      	b.n	80086d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80086c6:	2303      	movs	r3, #3
 80086c8:	73fb      	strb	r3, [r7, #15]
    break;
 80086ca:	e002      	b.n	80086d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80086cc:	2303      	movs	r3, #3
 80086ce:	73fb      	strb	r3, [r7, #15]
    break;
 80086d0:	bf00      	nop
  }
  return usb_status;
 80086d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3714      	adds	r7, #20
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <__errno>:
 80086e0:	4b01      	ldr	r3, [pc, #4]	; (80086e8 <__errno+0x8>)
 80086e2:	6818      	ldr	r0, [r3, #0]
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	20000228 	.word	0x20000228

080086ec <__libc_init_array>:
 80086ec:	b570      	push	{r4, r5, r6, lr}
 80086ee:	4d0d      	ldr	r5, [pc, #52]	; (8008724 <__libc_init_array+0x38>)
 80086f0:	4c0d      	ldr	r4, [pc, #52]	; (8008728 <__libc_init_array+0x3c>)
 80086f2:	1b64      	subs	r4, r4, r5
 80086f4:	10a4      	asrs	r4, r4, #2
 80086f6:	2600      	movs	r6, #0
 80086f8:	42a6      	cmp	r6, r4
 80086fa:	d109      	bne.n	8008710 <__libc_init_array+0x24>
 80086fc:	4d0b      	ldr	r5, [pc, #44]	; (800872c <__libc_init_array+0x40>)
 80086fe:	4c0c      	ldr	r4, [pc, #48]	; (8008730 <__libc_init_array+0x44>)
 8008700:	f000 fc4e 	bl	8008fa0 <_init>
 8008704:	1b64      	subs	r4, r4, r5
 8008706:	10a4      	asrs	r4, r4, #2
 8008708:	2600      	movs	r6, #0
 800870a:	42a6      	cmp	r6, r4
 800870c:	d105      	bne.n	800871a <__libc_init_array+0x2e>
 800870e:	bd70      	pop	{r4, r5, r6, pc}
 8008710:	f855 3b04 	ldr.w	r3, [r5], #4
 8008714:	4798      	blx	r3
 8008716:	3601      	adds	r6, #1
 8008718:	e7ee      	b.n	80086f8 <__libc_init_array+0xc>
 800871a:	f855 3b04 	ldr.w	r3, [r5], #4
 800871e:	4798      	blx	r3
 8008720:	3601      	adds	r6, #1
 8008722:	e7f2      	b.n	800870a <__libc_init_array+0x1e>
 8008724:	0800910c 	.word	0x0800910c
 8008728:	0800910c 	.word	0x0800910c
 800872c:	0800910c 	.word	0x0800910c
 8008730:	08009110 	.word	0x08009110

08008734 <memset>:
 8008734:	4402      	add	r2, r0
 8008736:	4603      	mov	r3, r0
 8008738:	4293      	cmp	r3, r2
 800873a:	d100      	bne.n	800873e <memset+0xa>
 800873c:	4770      	bx	lr
 800873e:	f803 1b01 	strb.w	r1, [r3], #1
 8008742:	e7f9      	b.n	8008738 <memset+0x4>

08008744 <siprintf>:
 8008744:	b40e      	push	{r1, r2, r3}
 8008746:	b500      	push	{lr}
 8008748:	b09c      	sub	sp, #112	; 0x70
 800874a:	ab1d      	add	r3, sp, #116	; 0x74
 800874c:	9002      	str	r0, [sp, #8]
 800874e:	9006      	str	r0, [sp, #24]
 8008750:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008754:	4809      	ldr	r0, [pc, #36]	; (800877c <siprintf+0x38>)
 8008756:	9107      	str	r1, [sp, #28]
 8008758:	9104      	str	r1, [sp, #16]
 800875a:	4909      	ldr	r1, [pc, #36]	; (8008780 <siprintf+0x3c>)
 800875c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008760:	9105      	str	r1, [sp, #20]
 8008762:	6800      	ldr	r0, [r0, #0]
 8008764:	9301      	str	r3, [sp, #4]
 8008766:	a902      	add	r1, sp, #8
 8008768:	f000 f868 	bl	800883c <_svfiprintf_r>
 800876c:	9b02      	ldr	r3, [sp, #8]
 800876e:	2200      	movs	r2, #0
 8008770:	701a      	strb	r2, [r3, #0]
 8008772:	b01c      	add	sp, #112	; 0x70
 8008774:	f85d eb04 	ldr.w	lr, [sp], #4
 8008778:	b003      	add	sp, #12
 800877a:	4770      	bx	lr
 800877c:	20000228 	.word	0x20000228
 8008780:	ffff0208 	.word	0xffff0208

08008784 <__ssputs_r>:
 8008784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008788:	688e      	ldr	r6, [r1, #8]
 800878a:	429e      	cmp	r6, r3
 800878c:	4682      	mov	sl, r0
 800878e:	460c      	mov	r4, r1
 8008790:	4690      	mov	r8, r2
 8008792:	461f      	mov	r7, r3
 8008794:	d838      	bhi.n	8008808 <__ssputs_r+0x84>
 8008796:	898a      	ldrh	r2, [r1, #12]
 8008798:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800879c:	d032      	beq.n	8008804 <__ssputs_r+0x80>
 800879e:	6825      	ldr	r5, [r4, #0]
 80087a0:	6909      	ldr	r1, [r1, #16]
 80087a2:	eba5 0901 	sub.w	r9, r5, r1
 80087a6:	6965      	ldr	r5, [r4, #20]
 80087a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087b0:	3301      	adds	r3, #1
 80087b2:	444b      	add	r3, r9
 80087b4:	106d      	asrs	r5, r5, #1
 80087b6:	429d      	cmp	r5, r3
 80087b8:	bf38      	it	cc
 80087ba:	461d      	movcc	r5, r3
 80087bc:	0553      	lsls	r3, r2, #21
 80087be:	d531      	bpl.n	8008824 <__ssputs_r+0xa0>
 80087c0:	4629      	mov	r1, r5
 80087c2:	f000 fb47 	bl	8008e54 <_malloc_r>
 80087c6:	4606      	mov	r6, r0
 80087c8:	b950      	cbnz	r0, 80087e0 <__ssputs_r+0x5c>
 80087ca:	230c      	movs	r3, #12
 80087cc:	f8ca 3000 	str.w	r3, [sl]
 80087d0:	89a3      	ldrh	r3, [r4, #12]
 80087d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087d6:	81a3      	strh	r3, [r4, #12]
 80087d8:	f04f 30ff 	mov.w	r0, #4294967295
 80087dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e0:	6921      	ldr	r1, [r4, #16]
 80087e2:	464a      	mov	r2, r9
 80087e4:	f000 fabe 	bl	8008d64 <memcpy>
 80087e8:	89a3      	ldrh	r3, [r4, #12]
 80087ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087f2:	81a3      	strh	r3, [r4, #12]
 80087f4:	6126      	str	r6, [r4, #16]
 80087f6:	6165      	str	r5, [r4, #20]
 80087f8:	444e      	add	r6, r9
 80087fa:	eba5 0509 	sub.w	r5, r5, r9
 80087fe:	6026      	str	r6, [r4, #0]
 8008800:	60a5      	str	r5, [r4, #8]
 8008802:	463e      	mov	r6, r7
 8008804:	42be      	cmp	r6, r7
 8008806:	d900      	bls.n	800880a <__ssputs_r+0x86>
 8008808:	463e      	mov	r6, r7
 800880a:	4632      	mov	r2, r6
 800880c:	6820      	ldr	r0, [r4, #0]
 800880e:	4641      	mov	r1, r8
 8008810:	f000 fab6 	bl	8008d80 <memmove>
 8008814:	68a3      	ldr	r3, [r4, #8]
 8008816:	6822      	ldr	r2, [r4, #0]
 8008818:	1b9b      	subs	r3, r3, r6
 800881a:	4432      	add	r2, r6
 800881c:	60a3      	str	r3, [r4, #8]
 800881e:	6022      	str	r2, [r4, #0]
 8008820:	2000      	movs	r0, #0
 8008822:	e7db      	b.n	80087dc <__ssputs_r+0x58>
 8008824:	462a      	mov	r2, r5
 8008826:	f000 fb6f 	bl	8008f08 <_realloc_r>
 800882a:	4606      	mov	r6, r0
 800882c:	2800      	cmp	r0, #0
 800882e:	d1e1      	bne.n	80087f4 <__ssputs_r+0x70>
 8008830:	6921      	ldr	r1, [r4, #16]
 8008832:	4650      	mov	r0, sl
 8008834:	f000 fabe 	bl	8008db4 <_free_r>
 8008838:	e7c7      	b.n	80087ca <__ssputs_r+0x46>
	...

0800883c <_svfiprintf_r>:
 800883c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008840:	4698      	mov	r8, r3
 8008842:	898b      	ldrh	r3, [r1, #12]
 8008844:	061b      	lsls	r3, r3, #24
 8008846:	b09d      	sub	sp, #116	; 0x74
 8008848:	4607      	mov	r7, r0
 800884a:	460d      	mov	r5, r1
 800884c:	4614      	mov	r4, r2
 800884e:	d50e      	bpl.n	800886e <_svfiprintf_r+0x32>
 8008850:	690b      	ldr	r3, [r1, #16]
 8008852:	b963      	cbnz	r3, 800886e <_svfiprintf_r+0x32>
 8008854:	2140      	movs	r1, #64	; 0x40
 8008856:	f000 fafd 	bl	8008e54 <_malloc_r>
 800885a:	6028      	str	r0, [r5, #0]
 800885c:	6128      	str	r0, [r5, #16]
 800885e:	b920      	cbnz	r0, 800886a <_svfiprintf_r+0x2e>
 8008860:	230c      	movs	r3, #12
 8008862:	603b      	str	r3, [r7, #0]
 8008864:	f04f 30ff 	mov.w	r0, #4294967295
 8008868:	e0d1      	b.n	8008a0e <_svfiprintf_r+0x1d2>
 800886a:	2340      	movs	r3, #64	; 0x40
 800886c:	616b      	str	r3, [r5, #20]
 800886e:	2300      	movs	r3, #0
 8008870:	9309      	str	r3, [sp, #36]	; 0x24
 8008872:	2320      	movs	r3, #32
 8008874:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008878:	f8cd 800c 	str.w	r8, [sp, #12]
 800887c:	2330      	movs	r3, #48	; 0x30
 800887e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008a28 <_svfiprintf_r+0x1ec>
 8008882:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008886:	f04f 0901 	mov.w	r9, #1
 800888a:	4623      	mov	r3, r4
 800888c:	469a      	mov	sl, r3
 800888e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008892:	b10a      	cbz	r2, 8008898 <_svfiprintf_r+0x5c>
 8008894:	2a25      	cmp	r2, #37	; 0x25
 8008896:	d1f9      	bne.n	800888c <_svfiprintf_r+0x50>
 8008898:	ebba 0b04 	subs.w	fp, sl, r4
 800889c:	d00b      	beq.n	80088b6 <_svfiprintf_r+0x7a>
 800889e:	465b      	mov	r3, fp
 80088a0:	4622      	mov	r2, r4
 80088a2:	4629      	mov	r1, r5
 80088a4:	4638      	mov	r0, r7
 80088a6:	f7ff ff6d 	bl	8008784 <__ssputs_r>
 80088aa:	3001      	adds	r0, #1
 80088ac:	f000 80aa 	beq.w	8008a04 <_svfiprintf_r+0x1c8>
 80088b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088b2:	445a      	add	r2, fp
 80088b4:	9209      	str	r2, [sp, #36]	; 0x24
 80088b6:	f89a 3000 	ldrb.w	r3, [sl]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f000 80a2 	beq.w	8008a04 <_svfiprintf_r+0x1c8>
 80088c0:	2300      	movs	r3, #0
 80088c2:	f04f 32ff 	mov.w	r2, #4294967295
 80088c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088ca:	f10a 0a01 	add.w	sl, sl, #1
 80088ce:	9304      	str	r3, [sp, #16]
 80088d0:	9307      	str	r3, [sp, #28]
 80088d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088d6:	931a      	str	r3, [sp, #104]	; 0x68
 80088d8:	4654      	mov	r4, sl
 80088da:	2205      	movs	r2, #5
 80088dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088e0:	4851      	ldr	r0, [pc, #324]	; (8008a28 <_svfiprintf_r+0x1ec>)
 80088e2:	f7f7 fc75 	bl	80001d0 <memchr>
 80088e6:	9a04      	ldr	r2, [sp, #16]
 80088e8:	b9d8      	cbnz	r0, 8008922 <_svfiprintf_r+0xe6>
 80088ea:	06d0      	lsls	r0, r2, #27
 80088ec:	bf44      	itt	mi
 80088ee:	2320      	movmi	r3, #32
 80088f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088f4:	0711      	lsls	r1, r2, #28
 80088f6:	bf44      	itt	mi
 80088f8:	232b      	movmi	r3, #43	; 0x2b
 80088fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008902:	2b2a      	cmp	r3, #42	; 0x2a
 8008904:	d015      	beq.n	8008932 <_svfiprintf_r+0xf6>
 8008906:	9a07      	ldr	r2, [sp, #28]
 8008908:	4654      	mov	r4, sl
 800890a:	2000      	movs	r0, #0
 800890c:	f04f 0c0a 	mov.w	ip, #10
 8008910:	4621      	mov	r1, r4
 8008912:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008916:	3b30      	subs	r3, #48	; 0x30
 8008918:	2b09      	cmp	r3, #9
 800891a:	d94e      	bls.n	80089ba <_svfiprintf_r+0x17e>
 800891c:	b1b0      	cbz	r0, 800894c <_svfiprintf_r+0x110>
 800891e:	9207      	str	r2, [sp, #28]
 8008920:	e014      	b.n	800894c <_svfiprintf_r+0x110>
 8008922:	eba0 0308 	sub.w	r3, r0, r8
 8008926:	fa09 f303 	lsl.w	r3, r9, r3
 800892a:	4313      	orrs	r3, r2
 800892c:	9304      	str	r3, [sp, #16]
 800892e:	46a2      	mov	sl, r4
 8008930:	e7d2      	b.n	80088d8 <_svfiprintf_r+0x9c>
 8008932:	9b03      	ldr	r3, [sp, #12]
 8008934:	1d19      	adds	r1, r3, #4
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	9103      	str	r1, [sp, #12]
 800893a:	2b00      	cmp	r3, #0
 800893c:	bfbb      	ittet	lt
 800893e:	425b      	neglt	r3, r3
 8008940:	f042 0202 	orrlt.w	r2, r2, #2
 8008944:	9307      	strge	r3, [sp, #28]
 8008946:	9307      	strlt	r3, [sp, #28]
 8008948:	bfb8      	it	lt
 800894a:	9204      	strlt	r2, [sp, #16]
 800894c:	7823      	ldrb	r3, [r4, #0]
 800894e:	2b2e      	cmp	r3, #46	; 0x2e
 8008950:	d10c      	bne.n	800896c <_svfiprintf_r+0x130>
 8008952:	7863      	ldrb	r3, [r4, #1]
 8008954:	2b2a      	cmp	r3, #42	; 0x2a
 8008956:	d135      	bne.n	80089c4 <_svfiprintf_r+0x188>
 8008958:	9b03      	ldr	r3, [sp, #12]
 800895a:	1d1a      	adds	r2, r3, #4
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	9203      	str	r2, [sp, #12]
 8008960:	2b00      	cmp	r3, #0
 8008962:	bfb8      	it	lt
 8008964:	f04f 33ff 	movlt.w	r3, #4294967295
 8008968:	3402      	adds	r4, #2
 800896a:	9305      	str	r3, [sp, #20]
 800896c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008a38 <_svfiprintf_r+0x1fc>
 8008970:	7821      	ldrb	r1, [r4, #0]
 8008972:	2203      	movs	r2, #3
 8008974:	4650      	mov	r0, sl
 8008976:	f7f7 fc2b 	bl	80001d0 <memchr>
 800897a:	b140      	cbz	r0, 800898e <_svfiprintf_r+0x152>
 800897c:	2340      	movs	r3, #64	; 0x40
 800897e:	eba0 000a 	sub.w	r0, r0, sl
 8008982:	fa03 f000 	lsl.w	r0, r3, r0
 8008986:	9b04      	ldr	r3, [sp, #16]
 8008988:	4303      	orrs	r3, r0
 800898a:	3401      	adds	r4, #1
 800898c:	9304      	str	r3, [sp, #16]
 800898e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008992:	4826      	ldr	r0, [pc, #152]	; (8008a2c <_svfiprintf_r+0x1f0>)
 8008994:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008998:	2206      	movs	r2, #6
 800899a:	f7f7 fc19 	bl	80001d0 <memchr>
 800899e:	2800      	cmp	r0, #0
 80089a0:	d038      	beq.n	8008a14 <_svfiprintf_r+0x1d8>
 80089a2:	4b23      	ldr	r3, [pc, #140]	; (8008a30 <_svfiprintf_r+0x1f4>)
 80089a4:	bb1b      	cbnz	r3, 80089ee <_svfiprintf_r+0x1b2>
 80089a6:	9b03      	ldr	r3, [sp, #12]
 80089a8:	3307      	adds	r3, #7
 80089aa:	f023 0307 	bic.w	r3, r3, #7
 80089ae:	3308      	adds	r3, #8
 80089b0:	9303      	str	r3, [sp, #12]
 80089b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089b4:	4433      	add	r3, r6
 80089b6:	9309      	str	r3, [sp, #36]	; 0x24
 80089b8:	e767      	b.n	800888a <_svfiprintf_r+0x4e>
 80089ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80089be:	460c      	mov	r4, r1
 80089c0:	2001      	movs	r0, #1
 80089c2:	e7a5      	b.n	8008910 <_svfiprintf_r+0xd4>
 80089c4:	2300      	movs	r3, #0
 80089c6:	3401      	adds	r4, #1
 80089c8:	9305      	str	r3, [sp, #20]
 80089ca:	4619      	mov	r1, r3
 80089cc:	f04f 0c0a 	mov.w	ip, #10
 80089d0:	4620      	mov	r0, r4
 80089d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089d6:	3a30      	subs	r2, #48	; 0x30
 80089d8:	2a09      	cmp	r2, #9
 80089da:	d903      	bls.n	80089e4 <_svfiprintf_r+0x1a8>
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d0c5      	beq.n	800896c <_svfiprintf_r+0x130>
 80089e0:	9105      	str	r1, [sp, #20]
 80089e2:	e7c3      	b.n	800896c <_svfiprintf_r+0x130>
 80089e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80089e8:	4604      	mov	r4, r0
 80089ea:	2301      	movs	r3, #1
 80089ec:	e7f0      	b.n	80089d0 <_svfiprintf_r+0x194>
 80089ee:	ab03      	add	r3, sp, #12
 80089f0:	9300      	str	r3, [sp, #0]
 80089f2:	462a      	mov	r2, r5
 80089f4:	4b0f      	ldr	r3, [pc, #60]	; (8008a34 <_svfiprintf_r+0x1f8>)
 80089f6:	a904      	add	r1, sp, #16
 80089f8:	4638      	mov	r0, r7
 80089fa:	f3af 8000 	nop.w
 80089fe:	1c42      	adds	r2, r0, #1
 8008a00:	4606      	mov	r6, r0
 8008a02:	d1d6      	bne.n	80089b2 <_svfiprintf_r+0x176>
 8008a04:	89ab      	ldrh	r3, [r5, #12]
 8008a06:	065b      	lsls	r3, r3, #25
 8008a08:	f53f af2c 	bmi.w	8008864 <_svfiprintf_r+0x28>
 8008a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a0e:	b01d      	add	sp, #116	; 0x74
 8008a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a14:	ab03      	add	r3, sp, #12
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	462a      	mov	r2, r5
 8008a1a:	4b06      	ldr	r3, [pc, #24]	; (8008a34 <_svfiprintf_r+0x1f8>)
 8008a1c:	a904      	add	r1, sp, #16
 8008a1e:	4638      	mov	r0, r7
 8008a20:	f000 f87a 	bl	8008b18 <_printf_i>
 8008a24:	e7eb      	b.n	80089fe <_svfiprintf_r+0x1c2>
 8008a26:	bf00      	nop
 8008a28:	080090d0 	.word	0x080090d0
 8008a2c:	080090da 	.word	0x080090da
 8008a30:	00000000 	.word	0x00000000
 8008a34:	08008785 	.word	0x08008785
 8008a38:	080090d6 	.word	0x080090d6

08008a3c <_printf_common>:
 8008a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a40:	4616      	mov	r6, r2
 8008a42:	4699      	mov	r9, r3
 8008a44:	688a      	ldr	r2, [r1, #8]
 8008a46:	690b      	ldr	r3, [r1, #16]
 8008a48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	bfb8      	it	lt
 8008a50:	4613      	movlt	r3, r2
 8008a52:	6033      	str	r3, [r6, #0]
 8008a54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a58:	4607      	mov	r7, r0
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	b10a      	cbz	r2, 8008a62 <_printf_common+0x26>
 8008a5e:	3301      	adds	r3, #1
 8008a60:	6033      	str	r3, [r6, #0]
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	0699      	lsls	r1, r3, #26
 8008a66:	bf42      	ittt	mi
 8008a68:	6833      	ldrmi	r3, [r6, #0]
 8008a6a:	3302      	addmi	r3, #2
 8008a6c:	6033      	strmi	r3, [r6, #0]
 8008a6e:	6825      	ldr	r5, [r4, #0]
 8008a70:	f015 0506 	ands.w	r5, r5, #6
 8008a74:	d106      	bne.n	8008a84 <_printf_common+0x48>
 8008a76:	f104 0a19 	add.w	sl, r4, #25
 8008a7a:	68e3      	ldr	r3, [r4, #12]
 8008a7c:	6832      	ldr	r2, [r6, #0]
 8008a7e:	1a9b      	subs	r3, r3, r2
 8008a80:	42ab      	cmp	r3, r5
 8008a82:	dc26      	bgt.n	8008ad2 <_printf_common+0x96>
 8008a84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a88:	1e13      	subs	r3, r2, #0
 8008a8a:	6822      	ldr	r2, [r4, #0]
 8008a8c:	bf18      	it	ne
 8008a8e:	2301      	movne	r3, #1
 8008a90:	0692      	lsls	r2, r2, #26
 8008a92:	d42b      	bmi.n	8008aec <_printf_common+0xb0>
 8008a94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a98:	4649      	mov	r1, r9
 8008a9a:	4638      	mov	r0, r7
 8008a9c:	47c0      	blx	r8
 8008a9e:	3001      	adds	r0, #1
 8008aa0:	d01e      	beq.n	8008ae0 <_printf_common+0xa4>
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	68e5      	ldr	r5, [r4, #12]
 8008aa6:	6832      	ldr	r2, [r6, #0]
 8008aa8:	f003 0306 	and.w	r3, r3, #6
 8008aac:	2b04      	cmp	r3, #4
 8008aae:	bf08      	it	eq
 8008ab0:	1aad      	subeq	r5, r5, r2
 8008ab2:	68a3      	ldr	r3, [r4, #8]
 8008ab4:	6922      	ldr	r2, [r4, #16]
 8008ab6:	bf0c      	ite	eq
 8008ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008abc:	2500      	movne	r5, #0
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	bfc4      	itt	gt
 8008ac2:	1a9b      	subgt	r3, r3, r2
 8008ac4:	18ed      	addgt	r5, r5, r3
 8008ac6:	2600      	movs	r6, #0
 8008ac8:	341a      	adds	r4, #26
 8008aca:	42b5      	cmp	r5, r6
 8008acc:	d11a      	bne.n	8008b04 <_printf_common+0xc8>
 8008ace:	2000      	movs	r0, #0
 8008ad0:	e008      	b.n	8008ae4 <_printf_common+0xa8>
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	4652      	mov	r2, sl
 8008ad6:	4649      	mov	r1, r9
 8008ad8:	4638      	mov	r0, r7
 8008ada:	47c0      	blx	r8
 8008adc:	3001      	adds	r0, #1
 8008ade:	d103      	bne.n	8008ae8 <_printf_common+0xac>
 8008ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ae8:	3501      	adds	r5, #1
 8008aea:	e7c6      	b.n	8008a7a <_printf_common+0x3e>
 8008aec:	18e1      	adds	r1, r4, r3
 8008aee:	1c5a      	adds	r2, r3, #1
 8008af0:	2030      	movs	r0, #48	; 0x30
 8008af2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008af6:	4422      	add	r2, r4
 8008af8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008afc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b00:	3302      	adds	r3, #2
 8008b02:	e7c7      	b.n	8008a94 <_printf_common+0x58>
 8008b04:	2301      	movs	r3, #1
 8008b06:	4622      	mov	r2, r4
 8008b08:	4649      	mov	r1, r9
 8008b0a:	4638      	mov	r0, r7
 8008b0c:	47c0      	blx	r8
 8008b0e:	3001      	adds	r0, #1
 8008b10:	d0e6      	beq.n	8008ae0 <_printf_common+0xa4>
 8008b12:	3601      	adds	r6, #1
 8008b14:	e7d9      	b.n	8008aca <_printf_common+0x8e>
	...

08008b18 <_printf_i>:
 8008b18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b1c:	460c      	mov	r4, r1
 8008b1e:	4691      	mov	r9, r2
 8008b20:	7e27      	ldrb	r7, [r4, #24]
 8008b22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008b24:	2f78      	cmp	r7, #120	; 0x78
 8008b26:	4680      	mov	r8, r0
 8008b28:	469a      	mov	sl, r3
 8008b2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b2e:	d807      	bhi.n	8008b40 <_printf_i+0x28>
 8008b30:	2f62      	cmp	r7, #98	; 0x62
 8008b32:	d80a      	bhi.n	8008b4a <_printf_i+0x32>
 8008b34:	2f00      	cmp	r7, #0
 8008b36:	f000 80d8 	beq.w	8008cea <_printf_i+0x1d2>
 8008b3a:	2f58      	cmp	r7, #88	; 0x58
 8008b3c:	f000 80a3 	beq.w	8008c86 <_printf_i+0x16e>
 8008b40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b48:	e03a      	b.n	8008bc0 <_printf_i+0xa8>
 8008b4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b4e:	2b15      	cmp	r3, #21
 8008b50:	d8f6      	bhi.n	8008b40 <_printf_i+0x28>
 8008b52:	a001      	add	r0, pc, #4	; (adr r0, 8008b58 <_printf_i+0x40>)
 8008b54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008b58:	08008bb1 	.word	0x08008bb1
 8008b5c:	08008bc5 	.word	0x08008bc5
 8008b60:	08008b41 	.word	0x08008b41
 8008b64:	08008b41 	.word	0x08008b41
 8008b68:	08008b41 	.word	0x08008b41
 8008b6c:	08008b41 	.word	0x08008b41
 8008b70:	08008bc5 	.word	0x08008bc5
 8008b74:	08008b41 	.word	0x08008b41
 8008b78:	08008b41 	.word	0x08008b41
 8008b7c:	08008b41 	.word	0x08008b41
 8008b80:	08008b41 	.word	0x08008b41
 8008b84:	08008cd1 	.word	0x08008cd1
 8008b88:	08008bf5 	.word	0x08008bf5
 8008b8c:	08008cb3 	.word	0x08008cb3
 8008b90:	08008b41 	.word	0x08008b41
 8008b94:	08008b41 	.word	0x08008b41
 8008b98:	08008cf3 	.word	0x08008cf3
 8008b9c:	08008b41 	.word	0x08008b41
 8008ba0:	08008bf5 	.word	0x08008bf5
 8008ba4:	08008b41 	.word	0x08008b41
 8008ba8:	08008b41 	.word	0x08008b41
 8008bac:	08008cbb 	.word	0x08008cbb
 8008bb0:	680b      	ldr	r3, [r1, #0]
 8008bb2:	1d1a      	adds	r2, r3, #4
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	600a      	str	r2, [r1, #0]
 8008bb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008bbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e0a3      	b.n	8008d0c <_printf_i+0x1f4>
 8008bc4:	6825      	ldr	r5, [r4, #0]
 8008bc6:	6808      	ldr	r0, [r1, #0]
 8008bc8:	062e      	lsls	r6, r5, #24
 8008bca:	f100 0304 	add.w	r3, r0, #4
 8008bce:	d50a      	bpl.n	8008be6 <_printf_i+0xce>
 8008bd0:	6805      	ldr	r5, [r0, #0]
 8008bd2:	600b      	str	r3, [r1, #0]
 8008bd4:	2d00      	cmp	r5, #0
 8008bd6:	da03      	bge.n	8008be0 <_printf_i+0xc8>
 8008bd8:	232d      	movs	r3, #45	; 0x2d
 8008bda:	426d      	negs	r5, r5
 8008bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008be0:	485e      	ldr	r0, [pc, #376]	; (8008d5c <_printf_i+0x244>)
 8008be2:	230a      	movs	r3, #10
 8008be4:	e019      	b.n	8008c1a <_printf_i+0x102>
 8008be6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008bea:	6805      	ldr	r5, [r0, #0]
 8008bec:	600b      	str	r3, [r1, #0]
 8008bee:	bf18      	it	ne
 8008bf0:	b22d      	sxthne	r5, r5
 8008bf2:	e7ef      	b.n	8008bd4 <_printf_i+0xbc>
 8008bf4:	680b      	ldr	r3, [r1, #0]
 8008bf6:	6825      	ldr	r5, [r4, #0]
 8008bf8:	1d18      	adds	r0, r3, #4
 8008bfa:	6008      	str	r0, [r1, #0]
 8008bfc:	0628      	lsls	r0, r5, #24
 8008bfe:	d501      	bpl.n	8008c04 <_printf_i+0xec>
 8008c00:	681d      	ldr	r5, [r3, #0]
 8008c02:	e002      	b.n	8008c0a <_printf_i+0xf2>
 8008c04:	0669      	lsls	r1, r5, #25
 8008c06:	d5fb      	bpl.n	8008c00 <_printf_i+0xe8>
 8008c08:	881d      	ldrh	r5, [r3, #0]
 8008c0a:	4854      	ldr	r0, [pc, #336]	; (8008d5c <_printf_i+0x244>)
 8008c0c:	2f6f      	cmp	r7, #111	; 0x6f
 8008c0e:	bf0c      	ite	eq
 8008c10:	2308      	moveq	r3, #8
 8008c12:	230a      	movne	r3, #10
 8008c14:	2100      	movs	r1, #0
 8008c16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c1a:	6866      	ldr	r6, [r4, #4]
 8008c1c:	60a6      	str	r6, [r4, #8]
 8008c1e:	2e00      	cmp	r6, #0
 8008c20:	bfa2      	ittt	ge
 8008c22:	6821      	ldrge	r1, [r4, #0]
 8008c24:	f021 0104 	bicge.w	r1, r1, #4
 8008c28:	6021      	strge	r1, [r4, #0]
 8008c2a:	b90d      	cbnz	r5, 8008c30 <_printf_i+0x118>
 8008c2c:	2e00      	cmp	r6, #0
 8008c2e:	d04d      	beq.n	8008ccc <_printf_i+0x1b4>
 8008c30:	4616      	mov	r6, r2
 8008c32:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c36:	fb03 5711 	mls	r7, r3, r1, r5
 8008c3a:	5dc7      	ldrb	r7, [r0, r7]
 8008c3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c40:	462f      	mov	r7, r5
 8008c42:	42bb      	cmp	r3, r7
 8008c44:	460d      	mov	r5, r1
 8008c46:	d9f4      	bls.n	8008c32 <_printf_i+0x11a>
 8008c48:	2b08      	cmp	r3, #8
 8008c4a:	d10b      	bne.n	8008c64 <_printf_i+0x14c>
 8008c4c:	6823      	ldr	r3, [r4, #0]
 8008c4e:	07df      	lsls	r7, r3, #31
 8008c50:	d508      	bpl.n	8008c64 <_printf_i+0x14c>
 8008c52:	6923      	ldr	r3, [r4, #16]
 8008c54:	6861      	ldr	r1, [r4, #4]
 8008c56:	4299      	cmp	r1, r3
 8008c58:	bfde      	ittt	le
 8008c5a:	2330      	movle	r3, #48	; 0x30
 8008c5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c64:	1b92      	subs	r2, r2, r6
 8008c66:	6122      	str	r2, [r4, #16]
 8008c68:	f8cd a000 	str.w	sl, [sp]
 8008c6c:	464b      	mov	r3, r9
 8008c6e:	aa03      	add	r2, sp, #12
 8008c70:	4621      	mov	r1, r4
 8008c72:	4640      	mov	r0, r8
 8008c74:	f7ff fee2 	bl	8008a3c <_printf_common>
 8008c78:	3001      	adds	r0, #1
 8008c7a:	d14c      	bne.n	8008d16 <_printf_i+0x1fe>
 8008c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c80:	b004      	add	sp, #16
 8008c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c86:	4835      	ldr	r0, [pc, #212]	; (8008d5c <_printf_i+0x244>)
 8008c88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008c8c:	6823      	ldr	r3, [r4, #0]
 8008c8e:	680e      	ldr	r6, [r1, #0]
 8008c90:	061f      	lsls	r7, r3, #24
 8008c92:	f856 5b04 	ldr.w	r5, [r6], #4
 8008c96:	600e      	str	r6, [r1, #0]
 8008c98:	d514      	bpl.n	8008cc4 <_printf_i+0x1ac>
 8008c9a:	07d9      	lsls	r1, r3, #31
 8008c9c:	bf44      	itt	mi
 8008c9e:	f043 0320 	orrmi.w	r3, r3, #32
 8008ca2:	6023      	strmi	r3, [r4, #0]
 8008ca4:	b91d      	cbnz	r5, 8008cae <_printf_i+0x196>
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	f023 0320 	bic.w	r3, r3, #32
 8008cac:	6023      	str	r3, [r4, #0]
 8008cae:	2310      	movs	r3, #16
 8008cb0:	e7b0      	b.n	8008c14 <_printf_i+0xfc>
 8008cb2:	6823      	ldr	r3, [r4, #0]
 8008cb4:	f043 0320 	orr.w	r3, r3, #32
 8008cb8:	6023      	str	r3, [r4, #0]
 8008cba:	2378      	movs	r3, #120	; 0x78
 8008cbc:	4828      	ldr	r0, [pc, #160]	; (8008d60 <_printf_i+0x248>)
 8008cbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cc2:	e7e3      	b.n	8008c8c <_printf_i+0x174>
 8008cc4:	065e      	lsls	r6, r3, #25
 8008cc6:	bf48      	it	mi
 8008cc8:	b2ad      	uxthmi	r5, r5
 8008cca:	e7e6      	b.n	8008c9a <_printf_i+0x182>
 8008ccc:	4616      	mov	r6, r2
 8008cce:	e7bb      	b.n	8008c48 <_printf_i+0x130>
 8008cd0:	680b      	ldr	r3, [r1, #0]
 8008cd2:	6826      	ldr	r6, [r4, #0]
 8008cd4:	6960      	ldr	r0, [r4, #20]
 8008cd6:	1d1d      	adds	r5, r3, #4
 8008cd8:	600d      	str	r5, [r1, #0]
 8008cda:	0635      	lsls	r5, r6, #24
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	d501      	bpl.n	8008ce4 <_printf_i+0x1cc>
 8008ce0:	6018      	str	r0, [r3, #0]
 8008ce2:	e002      	b.n	8008cea <_printf_i+0x1d2>
 8008ce4:	0671      	lsls	r1, r6, #25
 8008ce6:	d5fb      	bpl.n	8008ce0 <_printf_i+0x1c8>
 8008ce8:	8018      	strh	r0, [r3, #0]
 8008cea:	2300      	movs	r3, #0
 8008cec:	6123      	str	r3, [r4, #16]
 8008cee:	4616      	mov	r6, r2
 8008cf0:	e7ba      	b.n	8008c68 <_printf_i+0x150>
 8008cf2:	680b      	ldr	r3, [r1, #0]
 8008cf4:	1d1a      	adds	r2, r3, #4
 8008cf6:	600a      	str	r2, [r1, #0]
 8008cf8:	681e      	ldr	r6, [r3, #0]
 8008cfa:	6862      	ldr	r2, [r4, #4]
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	4630      	mov	r0, r6
 8008d00:	f7f7 fa66 	bl	80001d0 <memchr>
 8008d04:	b108      	cbz	r0, 8008d0a <_printf_i+0x1f2>
 8008d06:	1b80      	subs	r0, r0, r6
 8008d08:	6060      	str	r0, [r4, #4]
 8008d0a:	6863      	ldr	r3, [r4, #4]
 8008d0c:	6123      	str	r3, [r4, #16]
 8008d0e:	2300      	movs	r3, #0
 8008d10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d14:	e7a8      	b.n	8008c68 <_printf_i+0x150>
 8008d16:	6923      	ldr	r3, [r4, #16]
 8008d18:	4632      	mov	r2, r6
 8008d1a:	4649      	mov	r1, r9
 8008d1c:	4640      	mov	r0, r8
 8008d1e:	47d0      	blx	sl
 8008d20:	3001      	adds	r0, #1
 8008d22:	d0ab      	beq.n	8008c7c <_printf_i+0x164>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	079b      	lsls	r3, r3, #30
 8008d28:	d413      	bmi.n	8008d52 <_printf_i+0x23a>
 8008d2a:	68e0      	ldr	r0, [r4, #12]
 8008d2c:	9b03      	ldr	r3, [sp, #12]
 8008d2e:	4298      	cmp	r0, r3
 8008d30:	bfb8      	it	lt
 8008d32:	4618      	movlt	r0, r3
 8008d34:	e7a4      	b.n	8008c80 <_printf_i+0x168>
 8008d36:	2301      	movs	r3, #1
 8008d38:	4632      	mov	r2, r6
 8008d3a:	4649      	mov	r1, r9
 8008d3c:	4640      	mov	r0, r8
 8008d3e:	47d0      	blx	sl
 8008d40:	3001      	adds	r0, #1
 8008d42:	d09b      	beq.n	8008c7c <_printf_i+0x164>
 8008d44:	3501      	adds	r5, #1
 8008d46:	68e3      	ldr	r3, [r4, #12]
 8008d48:	9903      	ldr	r1, [sp, #12]
 8008d4a:	1a5b      	subs	r3, r3, r1
 8008d4c:	42ab      	cmp	r3, r5
 8008d4e:	dcf2      	bgt.n	8008d36 <_printf_i+0x21e>
 8008d50:	e7eb      	b.n	8008d2a <_printf_i+0x212>
 8008d52:	2500      	movs	r5, #0
 8008d54:	f104 0619 	add.w	r6, r4, #25
 8008d58:	e7f5      	b.n	8008d46 <_printf_i+0x22e>
 8008d5a:	bf00      	nop
 8008d5c:	080090e1 	.word	0x080090e1
 8008d60:	080090f2 	.word	0x080090f2

08008d64 <memcpy>:
 8008d64:	440a      	add	r2, r1
 8008d66:	4291      	cmp	r1, r2
 8008d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d6c:	d100      	bne.n	8008d70 <memcpy+0xc>
 8008d6e:	4770      	bx	lr
 8008d70:	b510      	push	{r4, lr}
 8008d72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d7a:	4291      	cmp	r1, r2
 8008d7c:	d1f9      	bne.n	8008d72 <memcpy+0xe>
 8008d7e:	bd10      	pop	{r4, pc}

08008d80 <memmove>:
 8008d80:	4288      	cmp	r0, r1
 8008d82:	b510      	push	{r4, lr}
 8008d84:	eb01 0402 	add.w	r4, r1, r2
 8008d88:	d902      	bls.n	8008d90 <memmove+0x10>
 8008d8a:	4284      	cmp	r4, r0
 8008d8c:	4623      	mov	r3, r4
 8008d8e:	d807      	bhi.n	8008da0 <memmove+0x20>
 8008d90:	1e43      	subs	r3, r0, #1
 8008d92:	42a1      	cmp	r1, r4
 8008d94:	d008      	beq.n	8008da8 <memmove+0x28>
 8008d96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d9e:	e7f8      	b.n	8008d92 <memmove+0x12>
 8008da0:	4402      	add	r2, r0
 8008da2:	4601      	mov	r1, r0
 8008da4:	428a      	cmp	r2, r1
 8008da6:	d100      	bne.n	8008daa <memmove+0x2a>
 8008da8:	bd10      	pop	{r4, pc}
 8008daa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008db2:	e7f7      	b.n	8008da4 <memmove+0x24>

08008db4 <_free_r>:
 8008db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008db6:	2900      	cmp	r1, #0
 8008db8:	d048      	beq.n	8008e4c <_free_r+0x98>
 8008dba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dbe:	9001      	str	r0, [sp, #4]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f1a1 0404 	sub.w	r4, r1, #4
 8008dc6:	bfb8      	it	lt
 8008dc8:	18e4      	addlt	r4, r4, r3
 8008dca:	f000 f8d3 	bl	8008f74 <__malloc_lock>
 8008dce:	4a20      	ldr	r2, [pc, #128]	; (8008e50 <_free_r+0x9c>)
 8008dd0:	9801      	ldr	r0, [sp, #4]
 8008dd2:	6813      	ldr	r3, [r2, #0]
 8008dd4:	4615      	mov	r5, r2
 8008dd6:	b933      	cbnz	r3, 8008de6 <_free_r+0x32>
 8008dd8:	6063      	str	r3, [r4, #4]
 8008dda:	6014      	str	r4, [r2, #0]
 8008ddc:	b003      	add	sp, #12
 8008dde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008de2:	f000 b8cd 	b.w	8008f80 <__malloc_unlock>
 8008de6:	42a3      	cmp	r3, r4
 8008de8:	d90b      	bls.n	8008e02 <_free_r+0x4e>
 8008dea:	6821      	ldr	r1, [r4, #0]
 8008dec:	1862      	adds	r2, r4, r1
 8008dee:	4293      	cmp	r3, r2
 8008df0:	bf04      	itt	eq
 8008df2:	681a      	ldreq	r2, [r3, #0]
 8008df4:	685b      	ldreq	r3, [r3, #4]
 8008df6:	6063      	str	r3, [r4, #4]
 8008df8:	bf04      	itt	eq
 8008dfa:	1852      	addeq	r2, r2, r1
 8008dfc:	6022      	streq	r2, [r4, #0]
 8008dfe:	602c      	str	r4, [r5, #0]
 8008e00:	e7ec      	b.n	8008ddc <_free_r+0x28>
 8008e02:	461a      	mov	r2, r3
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	b10b      	cbz	r3, 8008e0c <_free_r+0x58>
 8008e08:	42a3      	cmp	r3, r4
 8008e0a:	d9fa      	bls.n	8008e02 <_free_r+0x4e>
 8008e0c:	6811      	ldr	r1, [r2, #0]
 8008e0e:	1855      	adds	r5, r2, r1
 8008e10:	42a5      	cmp	r5, r4
 8008e12:	d10b      	bne.n	8008e2c <_free_r+0x78>
 8008e14:	6824      	ldr	r4, [r4, #0]
 8008e16:	4421      	add	r1, r4
 8008e18:	1854      	adds	r4, r2, r1
 8008e1a:	42a3      	cmp	r3, r4
 8008e1c:	6011      	str	r1, [r2, #0]
 8008e1e:	d1dd      	bne.n	8008ddc <_free_r+0x28>
 8008e20:	681c      	ldr	r4, [r3, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	6053      	str	r3, [r2, #4]
 8008e26:	4421      	add	r1, r4
 8008e28:	6011      	str	r1, [r2, #0]
 8008e2a:	e7d7      	b.n	8008ddc <_free_r+0x28>
 8008e2c:	d902      	bls.n	8008e34 <_free_r+0x80>
 8008e2e:	230c      	movs	r3, #12
 8008e30:	6003      	str	r3, [r0, #0]
 8008e32:	e7d3      	b.n	8008ddc <_free_r+0x28>
 8008e34:	6825      	ldr	r5, [r4, #0]
 8008e36:	1961      	adds	r1, r4, r5
 8008e38:	428b      	cmp	r3, r1
 8008e3a:	bf04      	itt	eq
 8008e3c:	6819      	ldreq	r1, [r3, #0]
 8008e3e:	685b      	ldreq	r3, [r3, #4]
 8008e40:	6063      	str	r3, [r4, #4]
 8008e42:	bf04      	itt	eq
 8008e44:	1949      	addeq	r1, r1, r5
 8008e46:	6021      	streq	r1, [r4, #0]
 8008e48:	6054      	str	r4, [r2, #4]
 8008e4a:	e7c7      	b.n	8008ddc <_free_r+0x28>
 8008e4c:	b003      	add	sp, #12
 8008e4e:	bd30      	pop	{r4, r5, pc}
 8008e50:	20000590 	.word	0x20000590

08008e54 <_malloc_r>:
 8008e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e56:	1ccd      	adds	r5, r1, #3
 8008e58:	f025 0503 	bic.w	r5, r5, #3
 8008e5c:	3508      	adds	r5, #8
 8008e5e:	2d0c      	cmp	r5, #12
 8008e60:	bf38      	it	cc
 8008e62:	250c      	movcc	r5, #12
 8008e64:	2d00      	cmp	r5, #0
 8008e66:	4606      	mov	r6, r0
 8008e68:	db01      	blt.n	8008e6e <_malloc_r+0x1a>
 8008e6a:	42a9      	cmp	r1, r5
 8008e6c:	d903      	bls.n	8008e76 <_malloc_r+0x22>
 8008e6e:	230c      	movs	r3, #12
 8008e70:	6033      	str	r3, [r6, #0]
 8008e72:	2000      	movs	r0, #0
 8008e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e76:	f000 f87d 	bl	8008f74 <__malloc_lock>
 8008e7a:	4921      	ldr	r1, [pc, #132]	; (8008f00 <_malloc_r+0xac>)
 8008e7c:	680a      	ldr	r2, [r1, #0]
 8008e7e:	4614      	mov	r4, r2
 8008e80:	b99c      	cbnz	r4, 8008eaa <_malloc_r+0x56>
 8008e82:	4f20      	ldr	r7, [pc, #128]	; (8008f04 <_malloc_r+0xb0>)
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	b923      	cbnz	r3, 8008e92 <_malloc_r+0x3e>
 8008e88:	4621      	mov	r1, r4
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f000 f862 	bl	8008f54 <_sbrk_r>
 8008e90:	6038      	str	r0, [r7, #0]
 8008e92:	4629      	mov	r1, r5
 8008e94:	4630      	mov	r0, r6
 8008e96:	f000 f85d 	bl	8008f54 <_sbrk_r>
 8008e9a:	1c43      	adds	r3, r0, #1
 8008e9c:	d123      	bne.n	8008ee6 <_malloc_r+0x92>
 8008e9e:	230c      	movs	r3, #12
 8008ea0:	6033      	str	r3, [r6, #0]
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	f000 f86c 	bl	8008f80 <__malloc_unlock>
 8008ea8:	e7e3      	b.n	8008e72 <_malloc_r+0x1e>
 8008eaa:	6823      	ldr	r3, [r4, #0]
 8008eac:	1b5b      	subs	r3, r3, r5
 8008eae:	d417      	bmi.n	8008ee0 <_malloc_r+0x8c>
 8008eb0:	2b0b      	cmp	r3, #11
 8008eb2:	d903      	bls.n	8008ebc <_malloc_r+0x68>
 8008eb4:	6023      	str	r3, [r4, #0]
 8008eb6:	441c      	add	r4, r3
 8008eb8:	6025      	str	r5, [r4, #0]
 8008eba:	e004      	b.n	8008ec6 <_malloc_r+0x72>
 8008ebc:	6863      	ldr	r3, [r4, #4]
 8008ebe:	42a2      	cmp	r2, r4
 8008ec0:	bf0c      	ite	eq
 8008ec2:	600b      	streq	r3, [r1, #0]
 8008ec4:	6053      	strne	r3, [r2, #4]
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	f000 f85a 	bl	8008f80 <__malloc_unlock>
 8008ecc:	f104 000b 	add.w	r0, r4, #11
 8008ed0:	1d23      	adds	r3, r4, #4
 8008ed2:	f020 0007 	bic.w	r0, r0, #7
 8008ed6:	1ac2      	subs	r2, r0, r3
 8008ed8:	d0cc      	beq.n	8008e74 <_malloc_r+0x20>
 8008eda:	1a1b      	subs	r3, r3, r0
 8008edc:	50a3      	str	r3, [r4, r2]
 8008ede:	e7c9      	b.n	8008e74 <_malloc_r+0x20>
 8008ee0:	4622      	mov	r2, r4
 8008ee2:	6864      	ldr	r4, [r4, #4]
 8008ee4:	e7cc      	b.n	8008e80 <_malloc_r+0x2c>
 8008ee6:	1cc4      	adds	r4, r0, #3
 8008ee8:	f024 0403 	bic.w	r4, r4, #3
 8008eec:	42a0      	cmp	r0, r4
 8008eee:	d0e3      	beq.n	8008eb8 <_malloc_r+0x64>
 8008ef0:	1a21      	subs	r1, r4, r0
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	f000 f82e 	bl	8008f54 <_sbrk_r>
 8008ef8:	3001      	adds	r0, #1
 8008efa:	d1dd      	bne.n	8008eb8 <_malloc_r+0x64>
 8008efc:	e7cf      	b.n	8008e9e <_malloc_r+0x4a>
 8008efe:	bf00      	nop
 8008f00:	20000590 	.word	0x20000590
 8008f04:	20000594 	.word	0x20000594

08008f08 <_realloc_r>:
 8008f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0a:	4607      	mov	r7, r0
 8008f0c:	4614      	mov	r4, r2
 8008f0e:	460e      	mov	r6, r1
 8008f10:	b921      	cbnz	r1, 8008f1c <_realloc_r+0x14>
 8008f12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008f16:	4611      	mov	r1, r2
 8008f18:	f7ff bf9c 	b.w	8008e54 <_malloc_r>
 8008f1c:	b922      	cbnz	r2, 8008f28 <_realloc_r+0x20>
 8008f1e:	f7ff ff49 	bl	8008db4 <_free_r>
 8008f22:	4625      	mov	r5, r4
 8008f24:	4628      	mov	r0, r5
 8008f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f28:	f000 f830 	bl	8008f8c <_malloc_usable_size_r>
 8008f2c:	42a0      	cmp	r0, r4
 8008f2e:	d20f      	bcs.n	8008f50 <_realloc_r+0x48>
 8008f30:	4621      	mov	r1, r4
 8008f32:	4638      	mov	r0, r7
 8008f34:	f7ff ff8e 	bl	8008e54 <_malloc_r>
 8008f38:	4605      	mov	r5, r0
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	d0f2      	beq.n	8008f24 <_realloc_r+0x1c>
 8008f3e:	4631      	mov	r1, r6
 8008f40:	4622      	mov	r2, r4
 8008f42:	f7ff ff0f 	bl	8008d64 <memcpy>
 8008f46:	4631      	mov	r1, r6
 8008f48:	4638      	mov	r0, r7
 8008f4a:	f7ff ff33 	bl	8008db4 <_free_r>
 8008f4e:	e7e9      	b.n	8008f24 <_realloc_r+0x1c>
 8008f50:	4635      	mov	r5, r6
 8008f52:	e7e7      	b.n	8008f24 <_realloc_r+0x1c>

08008f54 <_sbrk_r>:
 8008f54:	b538      	push	{r3, r4, r5, lr}
 8008f56:	4d06      	ldr	r5, [pc, #24]	; (8008f70 <_sbrk_r+0x1c>)
 8008f58:	2300      	movs	r3, #0
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	4608      	mov	r0, r1
 8008f5e:	602b      	str	r3, [r5, #0]
 8008f60:	f7f8 fc84 	bl	800186c <_sbrk>
 8008f64:	1c43      	adds	r3, r0, #1
 8008f66:	d102      	bne.n	8008f6e <_sbrk_r+0x1a>
 8008f68:	682b      	ldr	r3, [r5, #0]
 8008f6a:	b103      	cbz	r3, 8008f6e <_sbrk_r+0x1a>
 8008f6c:	6023      	str	r3, [r4, #0]
 8008f6e:	bd38      	pop	{r3, r4, r5, pc}
 8008f70:	20002570 	.word	0x20002570

08008f74 <__malloc_lock>:
 8008f74:	4801      	ldr	r0, [pc, #4]	; (8008f7c <__malloc_lock+0x8>)
 8008f76:	f000 b811 	b.w	8008f9c <__retarget_lock_acquire_recursive>
 8008f7a:	bf00      	nop
 8008f7c:	20002578 	.word	0x20002578

08008f80 <__malloc_unlock>:
 8008f80:	4801      	ldr	r0, [pc, #4]	; (8008f88 <__malloc_unlock+0x8>)
 8008f82:	f000 b80c 	b.w	8008f9e <__retarget_lock_release_recursive>
 8008f86:	bf00      	nop
 8008f88:	20002578 	.word	0x20002578

08008f8c <_malloc_usable_size_r>:
 8008f8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f90:	1f18      	subs	r0, r3, #4
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	bfbc      	itt	lt
 8008f96:	580b      	ldrlt	r3, [r1, r0]
 8008f98:	18c0      	addlt	r0, r0, r3
 8008f9a:	4770      	bx	lr

08008f9c <__retarget_lock_acquire_recursive>:
 8008f9c:	4770      	bx	lr

08008f9e <__retarget_lock_release_recursive>:
 8008f9e:	4770      	bx	lr

08008fa0 <_init>:
 8008fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa2:	bf00      	nop
 8008fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fa6:	bc08      	pop	{r3}
 8008fa8:	469e      	mov	lr, r3
 8008faa:	4770      	bx	lr

08008fac <_fini>:
 8008fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fae:	bf00      	nop
 8008fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb2:	bc08      	pop	{r3}
 8008fb4:	469e      	mov	lr, r3
 8008fb6:	4770      	bx	lr
